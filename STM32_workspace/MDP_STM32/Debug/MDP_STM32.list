
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  080101d4  080101d4  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d3c  08010d3c  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010d3c  08010d3c  00020d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d44  08010d44  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d44  08010d44  00020d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d48  08010d48  00020d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08010d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a0  2**0
                  CONTENTS
 10 .bss          00005288  200001a0  200001a0  000301a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005428  20005428  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d5a7  00000000  00000000  00030213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cfb  00000000  00000000  0004d7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad8  00000000  00000000  000514b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001527  00000000  00000000  00052f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025220  00000000  00000000  000544b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f8a7  00000000  00000000  000796d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e90a0  00000000  00000000  00098f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b7c  00000000  00000000  00182020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00189b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080101bc 	.word	0x080101bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	080101bc 	.word	0x080101bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af04      	add	r7, sp, #16
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	460b      	mov	r3, r1
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <_ICM20948_SelectUserBank+0x26>
 8000f1a:	2368      	movs	r3, #104	; 0x68
 8000f1c:	e000      	b.n	8000f20 <_ICM20948_SelectUserBank+0x28>
 8000f1e:	2369      	movs	r3, #105	; 0x69
 8000f20:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 0315 	add.w	r3, r7, #21
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	227f      	movs	r2, #127	; 0x7f
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f006 ffbd 	bl	8007ebc <HAL_I2C_Mem_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	70fb      	strb	r3, [r7, #3]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70bb      	strb	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <_ICM20948_WriteByte+0x28>
 8000f74:	2368      	movs	r3, #104	; 0x68
 8000f76:	e000      	b.n	8000f7a <_ICM20948_WriteByte+0x2a>
 8000f78:	2369      	movs	r3, #105	; 0x69
 8000f7a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b299      	uxth	r1, r3
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	230a      	movs	r3, #10
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	1c7b      	adds	r3, r7, #1
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f006 ff90 	bl	8007ebc <HAL_I2C_Mem_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	70fb      	strb	r3, [r7, #3]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff97 	bl	8000ef8 <_ICM20948_SelectUserBank>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8000fce:	78f9      	ldrb	r1, [r7, #3]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffbb 	bl	8000f50 <_ICM20948_WriteByte>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8000fde:	20c8      	movs	r0, #200	; 0xc8
 8000fe0:	f005 fe92 	bl	8006d08 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8000fe4:	78f9      	ldrb	r1, [r7, #3]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2206      	movs	r2, #6
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb0 	bl	8000f50 <_ICM20948_WriteByte>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	2338      	movs	r3, #56	; 0x38
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa8 	bl	8000f50 <_ICM20948_WriteByte>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2202      	movs	r2, #2
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff74 	bl	8000ef8 <_ICM20948_SelectUserBank>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f043 0319 	orr.w	r3, r3, #25
 800101e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001020:	b2db      	uxtb	r3, r3
 8001022:	78f9      	ldrb	r1, [r7, #3]
 8001024:	2201      	movs	r2, #1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff92 	bl	8000f50 <_ICM20948_WriteByte>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 8001030:	78f9      	ldrb	r1, [r7, #3]
 8001032:	2304      	movs	r3, #4
 8001034:	2200      	movs	r2, #0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff8a 	bl	8000f50 <_ICM20948_WriteByte>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff56 	bl	8000ef8 <_ICM20948_SelectUserBank>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 8001050:	78f9      	ldrb	r1, [r7, #3]
 8001052:	2302      	movs	r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff7a 	bl	8000f50 <_ICM20948_WriteByte>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_TIM_IC_CaptureCallback>:

uint32_t IC_Val1 = 0, IC_Val2 = 0;
uint8_t Is_First_Captured = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2 (TRI: TIM4_CH2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7f1b      	ldrb	r3, [r3, #28]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d178      	bne.n	800116a <HAL_TIM_IC_CaptureCallback+0x102>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x118>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11a      	bne.n	80010b6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001080:	2104      	movs	r1, #4
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f009 fa0e 	bl	800a4a4 <HAL_TIM_ReadCapturedValue>
 8001088:	4603      	mov	r3, r0
 800108a:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800108c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800108e:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80010a2:	621a      	str	r2, [r3, #32]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a1a      	ldr	r2, [r3, #32]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0220 	orr.w	r2, r2, #32
 80010b2:	621a      	str	r2, [r3, #32]
//
//			  last_curTask_tick = HAL_GetTick();
//		  }
		}
	}
}
 80010b4:	e059      	b.n	800116a <HAL_TIM_IC_CaptureCallback+0x102>
		else if (Is_First_Captured==1)   // if the first is already captured
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x118>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d155      	bne.n	800116a <HAL_TIM_IC_CaptureCallback+0x102>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80010be:	2104      	movs	r1, #4
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f009 f9ef 	bl	800a4a4 <HAL_TIM_ReadCapturedValue>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010ca:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
			obsDist_US = (IC_Val2 > IC_Val1 ? (IC_Val2 - IC_Val1) : (65535 - IC_Val1 + IC_Val2)) * 0.034 / 2;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d908      	bls.n	80010f2 <HAL_TIM_IC_CaptureCallback+0x8a>
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa02 	bl	80004f4 <__aeabi_ui2d>
 80010f0:	e00a      	b.n	8001108 <HAL_TIM_IC_CaptureCallback+0xa0>
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001100:	33ff      	adds	r3, #255	; 0xff
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f9f6 	bl	80004f4 <__aeabi_ui2d>
 8001108:	a31b      	add	r3, pc, #108	; (adr r3, 8001178 <HAL_TIM_IC_CaptureCallback+0x110>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa6b 	bl	80005e8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001122:	f7ff fb8b 	bl	800083c <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd15 	bl	8000b5c <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <HAL_TIM_IC_CaptureCallback+0x124>)
 8001136:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x118>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800114c:	621a      	str	r2, [r3, #32]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a12      	ldr	r2, [r2, #32]
 8001158:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x128>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0204 	bic.w	r2, r2, #4
 8001168:	60da      	str	r2, [r3, #12]
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	b020c49c 	.word	0xb020c49c
 800117c:	3fa16872 	.word	0x3fa16872
 8001180:	20000574 	.word	0x20000574
 8001184:	2000056c 	.word	0x2000056c
 8001188:	20000570 	.word	0x20000570
 800118c:	2000054c 	.word	0x2000054c
 8001190:	20000378 	.word	0x20000378

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f005 fd43 	bl	8006c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f955 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 fcf3 	bl	8001b8c <MX_GPIO_Init>
  MX_TIM8_Init();
 80011a6:	f000 fc1d 	bl	80019e4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80011aa:	f000 fb1f 	bl	80017ec <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80011ae:	f000 fcc3 	bl	8001b38 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80011b2:	f000 fa7b 	bl	80016ac <MX_TIM1_Init>
  MX_TIM3_Init();
 80011b6:	f000 fb6d 	bl	8001894 <MX_TIM3_Init>
  MX_I2C1_Init();
 80011ba:	f000 fa49 	bl	8001650 <MX_I2C1_Init>
  MX_ADC1_Init();
 80011be:	f000 f9a3 	bl	8001508 <MX_ADC1_Init>
  MX_TIM4_Init();
 80011c2:	f000 fbbb 	bl	800193c <MX_TIM4_Init>
  MX_ADC2_Init();
 80011c6:	f000 f9f1 	bl	80015ac <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80011ca:	f005 f90f 	bl	80063ec <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 80011ce:	2203      	movs	r2, #3
 80011d0:	2100      	movs	r1, #0
 80011d2:	4868      	ldr	r0, [pc, #416]	; (8001374 <main+0x1e0>)
 80011d4:	f7ff fee9 	bl	8000faa <ICM20948_init>

  // initialise command queue
  curCmd.index = 100;
 80011d8:	4b67      	ldr	r3, [pc, #412]	; (8001378 <main+0x1e4>)
 80011da:	2264      	movs	r2, #100	; 0x64
 80011dc:	701a      	strb	r2, [r3, #0]
  curCmd.val = 0;
 80011de:	4b66      	ldr	r3, [pc, #408]	; (8001378 <main+0x1e4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 80011e4:	4b65      	ldr	r3, [pc, #404]	; (800137c <main+0x1e8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <main+0x1e8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 80011f0:	4b63      	ldr	r3, [pc, #396]	; (8001380 <main+0x1ec>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <main+0x1e8>)
 80011f6:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	e00c      	b.n	8001218 <main+0x84>
	  Command cmd;
	  cmd.index = 100;
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	703b      	strb	r3, [r7, #0]
	  cmd.val = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	807b      	strh	r3, [r7, #2]
	  cQueue.buffer[i] = cmd;
 8001206:	4a5d      	ldr	r2, [pc, #372]	; (800137c <main+0x1e8>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <main+0x1ec>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4293      	cmp	r3, r2
 8001222:	dbec      	blt.n	80011fe <main+0x6a>
  }

  PIDConfigInit(&pidTSlow, 2.5, 0.0,0.8);
 8001224:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001384 <main+0x1f0>
 8001228:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001388 <main+0x1f4>
 800122c:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8001230:	4856      	ldr	r0, [pc, #344]	; (800138c <main+0x1f8>)
 8001232:	f001 f973 	bl	800251c <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.5, 0.0,0);
 8001236:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8001388 <main+0x1f4>
 800123a:	eddf 0a53 	vldr	s1, [pc, #332]	; 8001388 <main+0x1f4>
 800123e:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8001242:	4853      	ldr	r0, [pc, #332]	; (8001390 <main+0x1fc>)
 8001244:	f001 f96a 	bl	800251c <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.5, 0.0,0);
 8001248:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001388 <main+0x1f4>
 800124c:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001388 <main+0x1f4>
 8001250:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8001254:	484f      	ldr	r0, [pc, #316]	; (8001394 <main+0x200>)
 8001256:	f001 f961 	bl	800251c <PIDConfigInit>
//  PIDConfigInit(&pidFast, 0.75, 0.0,0);

  	HAL_UART_Receive_IT(&huart3, aRxBuffer,RX_BUFFER_SIZE);
 800125a:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <main+0x204>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	494e      	ldr	r1, [pc, #312]	; (800139c <main+0x208>)
 8001264:	484e      	ldr	r0, [pc, #312]	; (80013a0 <main+0x20c>)
 8001266:	f009 ff84 	bl	800b172 <HAL_UART_Receive_IT>

	// servo motor turn
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800126a:	210c      	movs	r1, #12
 800126c:	484d      	ldr	r0, [pc, #308]	; (80013a4 <main+0x210>)
 800126e:	f008 f9c9 	bl	8009604 <HAL_TIM_PWM_Start>
	// motor backwheel move
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001272:	2100      	movs	r1, #0
 8001274:	484c      	ldr	r0, [pc, #304]	; (80013a8 <main+0x214>)
 8001276:	f008 f9c5 	bl	8009604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800127a:	2104      	movs	r1, #4
 800127c:	484a      	ldr	r0, [pc, #296]	; (80013a8 <main+0x214>)
 800127e:	f008 f9c1 	bl	8009604 <HAL_TIM_PWM_Start>
	// encoder monitor speed and distance
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001282:	213c      	movs	r1, #60	; 0x3c
 8001284:	4849      	ldr	r0, [pc, #292]	; (80013ac <main+0x218>)
 8001286:	f008 fd51 	bl	8009d2c <HAL_TIM_Encoder_Start>
//	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

	//adjust steering
	__RESET_SERVO_TURN(&htim1);
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <main+0x210>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	224a      	movs	r2, #74	; 0x4a
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
 8001292:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001296:	f005 fd37 	bl	8006d08 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800129a:	f00a ff33 	bl	800c104 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of oledTask */
  oledTaskHandle = osThreadNew(runOledTask, NULL, &oledTask_attributes);
 800129e:	4a44      	ldr	r2, [pc, #272]	; (80013b0 <main+0x21c>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4844      	ldr	r0, [pc, #272]	; (80013b4 <main+0x220>)
 80012a4:	f00a ff78 	bl	800c198 <osThreadNew>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <main+0x224>)
 80012ac:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(runCmdTask, NULL, &commandTask_attributes);
 80012ae:	4a43      	ldr	r2, [pc, #268]	; (80013bc <main+0x228>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	4843      	ldr	r0, [pc, #268]	; (80013c0 <main+0x22c>)
 80012b4:	f00a ff70 	bl	800c198 <osThreadNew>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a42      	ldr	r2, [pc, #264]	; (80013c4 <main+0x230>)
 80012bc:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 80012be:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <main+0x234>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	4842      	ldr	r0, [pc, #264]	; (80013cc <main+0x238>)
 80012c4:	f00a ff68 	bl	800c198 <osThreadNew>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a41      	ldr	r2, [pc, #260]	; (80013d0 <main+0x23c>)
 80012cc:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 80012ce:	4a41      	ldr	r2, [pc, #260]	; (80013d4 <main+0x240>)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4841      	ldr	r0, [pc, #260]	; (80013d8 <main+0x244>)
 80012d4:	f00a ff60 	bl	800c198 <osThreadNew>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a40      	ldr	r2, [pc, #256]	; (80013dc <main+0x248>)
 80012dc:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathTask */
  fastestPathTaskHandle = osThreadNew(runFastestPathTask, NULL, &fastestPathTask_attributes);
 80012de:	4a40      	ldr	r2, [pc, #256]	; (80013e0 <main+0x24c>)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4840      	ldr	r0, [pc, #256]	; (80013e4 <main+0x250>)
 80012e4:	f00a ff58 	bl	800c198 <osThreadNew>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <main+0x254>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* creation of buzzerTask */
  buzzerTaskHandle = osThreadNew(runBuzzerTask, NULL, &buzzerTask_attributes);
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <main+0x258>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	483f      	ldr	r0, [pc, #252]	; (80013f0 <main+0x25c>)
 80012f4:	f00a ff50 	bl	800c198 <osThreadNew>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <main+0x260>)
 80012fc:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 80012fe:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <main+0x264>)
 8001300:	2100      	movs	r1, #0
 8001302:	483e      	ldr	r0, [pc, #248]	; (80013fc <main+0x268>)
 8001304:	f00a ff48 	bl	800c198 <osThreadNew>
 8001308:	4603      	mov	r3, r0
 800130a:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <main+0x26c>)
 800130c:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 800130e:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <main+0x270>)
 8001310:	2100      	movs	r1, #0
 8001312:	483d      	ldr	r0, [pc, #244]	; (8001408 <main+0x274>)
 8001314:	f00a ff40 	bl	800c198 <osThreadNew>
 8001318:	4603      	mov	r3, r0
 800131a:	4a3c      	ldr	r2, [pc, #240]	; (800140c <main+0x278>)
 800131c:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 800131e:	4a3c      	ldr	r2, [pc, #240]	; (8001410 <main+0x27c>)
 8001320:	2100      	movs	r1, #0
 8001322:	483c      	ldr	r0, [pc, #240]	; (8001414 <main+0x280>)
 8001324:	f00a ff38 	bl	800c198 <osThreadNew>
 8001328:	4603      	mov	r3, r0
 800132a:	4a3b      	ldr	r2, [pc, #236]	; (8001418 <main+0x284>)
 800132c:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 800132e:	4a3b      	ldr	r2, [pc, #236]	; (800141c <main+0x288>)
 8001330:	2100      	movs	r1, #0
 8001332:	483b      	ldr	r0, [pc, #236]	; (8001420 <main+0x28c>)
 8001334:	f00a ff30 	bl	800c198 <osThreadNew>
 8001338:	4603      	mov	r3, r0
 800133a:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <main+0x290>)
 800133c:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathV2 */
  fastestPathV2Handle = osThreadNew(runFastestPathTask_V2, NULL, &fastestPathV2_attributes);
 800133e:	4a3a      	ldr	r2, [pc, #232]	; (8001428 <main+0x294>)
 8001340:	2100      	movs	r1, #0
 8001342:	483a      	ldr	r0, [pc, #232]	; (800142c <main+0x298>)
 8001344:	f00a ff28 	bl	800c198 <osThreadNew>
 8001348:	4603      	mov	r3, r0
 800134a:	4a39      	ldr	r2, [pc, #228]	; (8001430 <main+0x29c>)
 800134c:	6013      	str	r3, [r2, #0]

  /* creation of batteryTask */
  batteryTaskHandle = osThreadNew(runBatteryTask, NULL, &batteryTask_attributes);
 800134e:	4a39      	ldr	r2, [pc, #228]	; (8001434 <main+0x2a0>)
 8001350:	2100      	movs	r1, #0
 8001352:	4839      	ldr	r0, [pc, #228]	; (8001438 <main+0x2a4>)
 8001354:	f00a ff20 	bl	800c198 <osThreadNew>
 8001358:	4603      	mov	r3, r0
 800135a:	4a38      	ldr	r2, [pc, #224]	; (800143c <main+0x2a8>)
 800135c:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 800135e:	4a38      	ldr	r2, [pc, #224]	; (8001440 <main+0x2ac>)
 8001360:	2100      	movs	r1, #0
 8001362:	4838      	ldr	r0, [pc, #224]	; (8001444 <main+0x2b0>)
 8001364:	f00a ff18 	bl	800c198 <osThreadNew>
 8001368:	4603      	mov	r3, r0
 800136a:	4a37      	ldr	r2, [pc, #220]	; (8001448 <main+0x2b4>)
 800136c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800136e:	f00a feed 	bl	800c14c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001372:	e7fe      	b.n	8001372 <main+0x1de>
 8001374:	2000024c 	.word	0x2000024c
 8001378:	200004c0 	.word	0x200004c0
 800137c:	2000048c 	.word	0x2000048c
 8001380:	20000001 	.word	0x20000001
 8001384:	3f4ccccd 	.word	0x3f4ccccd
 8001388:	00000000 	.word	0x00000000
 800138c:	2000051c 	.word	0x2000051c
 8001390:	20000508 	.word	0x20000508
 8001394:	20000530 	.word	0x20000530
 8001398:	20000000 	.word	0x20000000
 800139c:	20000480 	.word	0x20000480
 80013a0:	20000408 	.word	0x20000408
 80013a4:	200002a0 	.word	0x200002a0
 80013a8:	200003c0 	.word	0x200003c0
 80013ac:	200002e8 	.word	0x200002e8
 80013b0:	080102b8 	.word	0x080102b8
 80013b4:	08003d29 	.word	0x08003d29
 80013b8:	2000044c 	.word	0x2000044c
 80013bc:	080102dc 	.word	0x080102dc
 80013c0:	08003dd9 	.word	0x08003dd9
 80013c4:	20000450 	.word	0x20000450
 80013c8:	08010300 	.word	0x08010300
 80013cc:	0800431d 	.word	0x0800431d
 80013d0:	20000454 	.word	0x20000454
 80013d4:	08010324 	.word	0x08010324
 80013d8:	080043fd 	.word	0x080043fd
 80013dc:	20000458 	.word	0x20000458
 80013e0:	08010348 	.word	0x08010348
 80013e4:	08004671 	.word	0x08004671
 80013e8:	2000045c 	.word	0x2000045c
 80013ec:	0801036c 	.word	0x0801036c
 80013f0:	08004bc1 	.word	0x08004bc1
 80013f4:	20000460 	.word	0x20000460
 80013f8:	08010390 	.word	0x08010390
 80013fc:	08004cbd 	.word	0x08004cbd
 8001400:	20000464 	.word	0x20000464
 8001404:	080103b4 	.word	0x080103b4
 8001408:	080050f1 	.word	0x080050f1
 800140c:	20000468 	.word	0x20000468
 8001410:	080103d8 	.word	0x080103d8
 8001414:	08005525 	.word	0x08005525
 8001418:	2000046c 	.word	0x2000046c
 800141c:	080103fc 	.word	0x080103fc
 8001420:	0800595d 	.word	0x0800595d
 8001424:	20000470 	.word	0x20000470
 8001428:	08010420 	.word	0x08010420
 800142c:	08005d99 	.word	0x08005d99
 8001430:	20000474 	.word	0x20000474
 8001434:	08010444 	.word	0x08010444
 8001438:	08005f41 	.word	0x08005f41
 800143c:	20000478 	.word	0x20000478
 8001440:	08010468 	.word	0x08010468
 8001444:	08005fbd 	.word	0x08005fbd
 8001448:	2000047c 	.word	0x2000047c

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	; 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00d fbda 	bl	800ec14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <SystemClock_Config+0xb4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <SystemClock_Config+0xb4>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <SystemClock_Config+0xb4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <SystemClock_Config+0xb8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <SystemClock_Config+0xb8>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <SystemClock_Config+0xb8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f007 fba1 	bl	8008c04 <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014c8:	f004 fdf0 	bl	80060ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 fe04 	bl	80090f4 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014f2:	f004 fddb 	bl	80060ac <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	; 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_ADC1_Init+0x98>)
 800151c:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <MX_ADC1_Init+0x9c>)
 800151e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <MX_ADC1_Init+0xa0>)
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_ADC1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001554:	2201      	movs	r2, #1
 8001556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001562:	2201      	movs	r2, #1
 8001564:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001568:	f005 fbf2 	bl	8006d50 <HAL_ADC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f004 fd9b 	bl	80060ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001576:	230b      	movs	r3, #11
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC1_Init+0x98>)
 8001588:	f005 fdc4 	bl	8007114 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001592:	f004 fd8b 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001bc 	.word	0x200001bc
 80015a4:	40012000 	.word	0x40012000
 80015a8:	0f000001 	.word	0x0f000001

080015ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC2_Init+0x98>)
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <MX_ADC2_Init+0x9c>)
 80015c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_ADC2_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ADC2_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_ADC2_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_ADC2_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_ADC2_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_ADC2_Init+0x98>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_ADC2_Init+0x98>)
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_ADC2_Init+0xa0>)
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ADC2_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_ADC2_Init+0x98>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_ADC2_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_ADC2_Init+0x98>)
 8001606:	2201      	movs	r2, #1
 8001608:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <MX_ADC2_Init+0x98>)
 800160c:	f005 fba0 	bl	8006d50 <HAL_ADC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001616:	f004 fd49 	bl	80060ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800161a:	230e      	movs	r3, #14
 800161c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_ADC2_Init+0x98>)
 800162c:	f005 fd72 	bl	8007114 <HAL_ADC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001636:	f004 fd39 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000204 	.word	0x20000204
 8001648:	40012100 	.word	0x40012100
 800164c:	0f000001 	.word	0x0f000001

08001650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <MX_I2C1_Init+0x54>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_I2C1_Init+0x50>)
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_I2C1_Init+0x58>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_I2C1_Init+0x50>)
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_I2C1_Init+0x50>)
 800168e:	f006 fad1 	bl	8007c34 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001698:	f004 fd08 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000024c 	.word	0x2000024c
 80016a4:	40005400 	.word	0x40005400
 80016a8:	000186a0 	.word	0x000186a0

080016ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b096      	sub	sp, #88	; 0x58
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2220      	movs	r2, #32
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00d fa95 	bl	800ec14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <MX_TIM1_Init+0x138>)
 80016ec:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <MX_TIM1_Init+0x13c>)
 80016ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_TIM1_Init+0x138>)
 80016f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_TIM1_Init+0x138>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <MX_TIM1_Init+0x138>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001718:	4832      	ldr	r0, [pc, #200]	; (80017e4 <MX_TIM1_Init+0x138>)
 800171a:	f007 fecb 	bl	80094b4 <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001724:	f004 fcc2 	bl	80060ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800172e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001732:	4619      	mov	r1, r3
 8001734:	482b      	ldr	r0, [pc, #172]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001736:	f008 fded 	bl	800a314 <HAL_TIM_ConfigClockSource>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001740:	f004 fcb4 	bl	80060ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001744:	4827      	ldr	r0, [pc, #156]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001746:	f007 ff04 	bl	8009552 <HAL_TIM_PWM_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001750:	f004 fcac 	bl	80060ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001760:	4619      	mov	r1, r3
 8001762:	4820      	ldr	r0, [pc, #128]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001764:	f009 fb44 	bl	800adf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800176e:	f004 fc9d 	bl	80060ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001772:	2360      	movs	r3, #96	; 0x60
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	220c      	movs	r2, #12
 8001790:	4619      	mov	r1, r3
 8001792:	4814      	ldr	r0, [pc, #80]	; (80017e4 <MX_TIM1_Init+0x138>)
 8001794:	f008 fcfc 	bl	800a190 <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800179e:	f004 fc85 	bl	80060ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM1_Init+0x138>)
 80017c6:	f009 fb8f 	bl	800aee8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017d0:	f004 fc6c 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM1_Init+0x138>)
 80017d6:	f005 f8cd 	bl	8006974 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3758      	adds	r7, #88	; 0x58
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002a0 	.word	0x200002a0
 80017e8:	40010000 	.word	0x40010000

080017ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00d fa0a 	bl	800ec14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_TIM2_Init+0xa4>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_TIM2_Init+0xa4>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_TIM2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_TIM2_Init+0xa4>)
 800181e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM2_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_TIM2_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001830:	2303      	movs	r3, #3
 8001832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001840:	230a      	movs	r3, #10
 8001842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001850:	230a      	movs	r3, #10
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_TIM2_Init+0xa4>)
 800185c:	f008 f9c0 	bl	8009be0 <HAL_TIM_Encoder_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001866:	f004 fc21 	bl	80060ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_TIM2_Init+0xa4>)
 8001878:	f009 faba 	bl	800adf0 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001882:	f004 fc13 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002e8 	.word	0x200002e8

08001894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00d f9b6 	bl	800ec14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <MX_TIM3_Init+0xa0>)
 80018b2:	4a21      	ldr	r2, [pc, #132]	; (8001938 <MX_TIM3_Init+0xa4>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_TIM3_Init+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <MX_TIM3_Init+0xa0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_TIM3_Init+0xa0>)
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_TIM3_Init+0xa0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_TIM3_Init+0xa0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018d6:	2303      	movs	r3, #3
 80018d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018e6:	230a      	movs	r3, #10
 80018e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ee:	2301      	movs	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80018f6:	230a      	movs	r3, #10
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <MX_TIM3_Init+0xa0>)
 8001902:	f008 f96d 	bl	8009be0 <HAL_TIM_Encoder_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800190c:	f004 fbce 	bl	80060ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_TIM3_Init+0xa0>)
 800191e:	f009 fa67 	bl	800adf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001928:	f004 fbc0 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000330 	.word	0x20000330
 8001938:	40000400 	.word	0x40000400

0800193c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_TIM4_Init+0xa0>)
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <MX_TIM4_Init+0xa4>)
 800195c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <MX_TIM4_Init+0xa0>)
 8001960:	220f      	movs	r2, #15
 8001962:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_TIM4_Init+0xa0>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_TIM4_Init+0xa0>)
 800196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001970:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_TIM4_Init+0xa0>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_TIM4_Init+0xa0>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800197e:	4817      	ldr	r0, [pc, #92]	; (80019dc <MX_TIM4_Init+0xa0>)
 8001980:	f007 ff08 	bl	8009794 <HAL_TIM_IC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800198a:	f004 fb8f 	bl	80060ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	480f      	ldr	r0, [pc, #60]	; (80019dc <MX_TIM4_Init+0xa0>)
 800199e:	f009 fa27 	bl	800adf0 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80019a8:	f004 fb80 	bl	80060ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019b0:	2301      	movs	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	2204      	movs	r2, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_TIM4_Init+0xa0>)
 80019c4:	f008 fb48 	bl	800a058 <HAL_TIM_IC_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80019ce:	f004 fb6d 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000378 	.word	0x20000378
 80019e0:	40000800 	.word	0x40000800

080019e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	; 0x58
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2220      	movs	r2, #32
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00d f8f9 	bl	800ec14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a24:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <MX_TIM8_Init+0x150>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a36:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001a3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a4e:	4838      	ldr	r0, [pc, #224]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a50:	f007 fd30 	bl	80094b4 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001a5a:	f004 fb27 	bl	80060ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4831      	ldr	r0, [pc, #196]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a6c:	f008 fc52 	bl	800a314 <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a76:	f004 fb19 	bl	80060ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a7a:	482d      	ldr	r0, [pc, #180]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a7c:	f007 fd69 	bl	8009552 <HAL_TIM_PWM_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001a86:	f004 fb11 	bl	80060ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a96:	4619      	mov	r1, r3
 8001a98:	4825      	ldr	r0, [pc, #148]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001a9a:	f009 f9a9 	bl	800adf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001aa4:	f004 fb02 	bl	80060ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	; 0x60
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001ace:	f008 fb5f 	bl	800a190 <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ad8:	f004 fae8 	bl	80060ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001ae6:	f008 fb53 	bl	800a190 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001af0:	f004 fadc 	bl	80060ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_TIM8_Init+0x14c>)
 8001b18:	f009 f9e6 	bl	800aee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001b22:	f004 fac3 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3758      	adds	r7, #88	; 0x58
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200003c0 	.word	0x200003c0
 8001b34:	40010400 	.word	0x40010400

08001b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_USART3_UART_Init+0x50>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_USART3_UART_Init+0x4c>)
 8001b70:	f009 fa20 	bl	800afb4 <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b7a:	f004 fa97 	bl	80060ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000408 	.word	0x20000408
 8001b88:	40004800 	.word	0x40004800

08001b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a3e      	ldr	r2, [pc, #248]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a37      	ldr	r2, [pc, #220]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <MX_GPIO_Init+0x150>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001c34:	482a      	ldr	r0, [pc, #168]	; (8001ce0 <MX_GPIO_Init+0x154>)
 8001c36:	f005 ffcb 	bl	8007bd0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	213c      	movs	r1, #60	; 0x3c
 8001c3e:	4829      	ldr	r0, [pc, #164]	; (8001ce4 <MX_GPIO_Init+0x158>)
 8001c40:	f005 ffc6 	bl	8007bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|TRI_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001c4a:	4827      	ldr	r0, [pc, #156]	; (8001ce8 <MX_GPIO_Init+0x15c>)
 8001c4c:	f005 ffc0 	bl	8007bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001c50:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001c54:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <MX_GPIO_Init+0x154>)
 8001c6a:	f005 fe15 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001c6e:	233c      	movs	r3, #60	; 0x3c
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <MX_GPIO_Init+0x158>)
 8001c86:	f005 fe07 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TRI_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|TRI_Pin;
 8001c8a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <MX_GPIO_Init+0x15c>)
 8001ca4:	f005 fdf8 	bl	8007898 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <MX_GPIO_Init+0x160>)
 8001cc0:	f005 fdea 	bl	8007898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2105      	movs	r1, #5
 8001cc8:	2017      	movs	r0, #23
 8001cca:	f005 fd1c 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cce:	2017      	movs	r0, #23
 8001cd0:	f005 fd35 	bl	800773e <HAL_NVIC_EnableIRQ>

}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020c00 	.word	0x40020c00

08001cf0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// HAL_UART_RxCpltCallback evoked when buffer is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	// prevent unused argument(s) compilation warning
	UNUSED(huart);
	int val;

	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001cf8:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001cfa:	789b      	ldrb	r3, [r3, #2]
 8001cfc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	3b30      	subs	r3, #48	; 0x30
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001d14:	4b88      	ldr	r3, [pc, #544]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b2f      	cmp	r3, #47	; 0x2f
 8001d1a:	d90c      	bls.n	8001d36 <HAL_UART_RxCpltCallback+0x46>
 8001d1c:	4b86      	ldr	r3, [pc, #536]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b39      	cmp	r3, #57	; 0x39
 8001d22:	d808      	bhi.n	8001d36 <HAL_UART_RxCpltCallback+0x46>
 8001d24:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	3b30      	subs	r3, #48	; 0x30
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

	manualMode = 0;
 8001d36:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_UART_RxCpltCallback+0x24c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b53      	cmp	r3, #83	; 0x53
 8001d42:	d159      	bne.n	8001df8 <HAL_UART_RxCpltCallback+0x108>
 8001d44:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b54      	cmp	r3, #84	; 0x54
 8001d4a:	d155      	bne.n	8001df8 <HAL_UART_RxCpltCallback+0x108>
//		__ADD_COMMAND(cQueue, 0, 0); // stop
		__ON_TASK_END(&htim8, prevTask, curTask);
 8001d4c:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <HAL_UART_RxCpltCallback+0x250>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2200      	movs	r2, #0
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <HAL_UART_RxCpltCallback+0x250>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d5c:	4b79      	ldr	r3, [pc, #484]	; (8001f44 <HAL_UART_RxCpltCallback+0x254>)
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <HAL_UART_RxCpltCallback+0x258>)
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	4b77      	ldr	r3, [pc, #476]	; (8001f44 <HAL_UART_RxCpltCallback+0x254>)
 8001d66:	220b      	movs	r2, #11
 8001d68:	701a      	strb	r2, [r3, #0]
		  angleNow = 0; gyroZ = 0; // reset angle for PID
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_UART_RxCpltCallback+0x25c>)
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b77      	ldr	r3, [pc, #476]	; (8001f50 <HAL_UART_RxCpltCallback+0x260>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8001d78:	4876      	ldr	r0, [pc, #472]	; (8001f54 <HAL_UART_RxCpltCallback+0x264>)
 8001d7a:	f000 fbf0 	bl	800255e <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8001d7e:	4876      	ldr	r0, [pc, #472]	; (8001f58 <HAL_UART_RxCpltCallback+0x268>)
 8001d80:	f000 fbed 	bl	800255e <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8001d84:	4875      	ldr	r0, [pc, #468]	; (8001f5c <HAL_UART_RxCpltCallback+0x26c>)
 8001d86:	f000 fbea 	bl	800255e <PIDConfigReset>
		curDistTick = 0;
 8001d8a:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_UART_RxCpltCallback+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	801a      	strh	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001d90:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d112      	bne.n	8001dc2 <HAL_UART_RxCpltCallback+0xd2>
			__CLEAR_CURCMD(curCmd);
 8001d9c:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_UART_RxCpltCallback+0x278>)
 8001d9e:	2264      	movs	r2, #100	; 0x64
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <HAL_UART_RxCpltCallback+0x278>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8001da8:	4a70      	ldr	r2, [pc, #448]	; (8001f6c <HAL_UART_RxCpltCallback+0x27c>)
 8001daa:	210f      	movs	r1, #15
 8001dac:	4870      	ldr	r0, [pc, #448]	; (8001f70 <HAL_UART_RxCpltCallback+0x280>)
 8001dae:	f00c fefd 	bl	800ebac <sniprintf>
 8001db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db6:	2206      	movs	r2, #6
 8001db8:	496e      	ldr	r1, [pc, #440]	; (8001f74 <HAL_UART_RxCpltCallback+0x284>)
 8001dba:	486f      	ldr	r0, [pc, #444]	; (8001f78 <HAL_UART_RxCpltCallback+0x288>)
 8001dbc:	f009 f947 	bl	800b04e <HAL_UART_Transmit>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001dc0:	e303      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
		}
		else {
			__READ_COMMAND(cQueue, curCmd, rxMsg);
 8001dc2:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	4a68      	ldr	r2, [pc, #416]	; (8001f68 <HAL_UART_RxCpltCallback+0x278>)
 8001dc8:	4966      	ldr	r1, [pc, #408]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a62      	ldr	r2, [pc, #392]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001dda:	7892      	ldrb	r2, [r2, #2]
 8001ddc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001de0:	fb01 f202 	mul.w	r2, r1, r2
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001dea:	705a      	strb	r2, [r3, #1]
 8001dec:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_UART_RxCpltCallback+0x28c>)
 8001dee:	210f      	movs	r1, #15
 8001df0:	485f      	ldr	r0, [pc, #380]	; (8001f70 <HAL_UART_RxCpltCallback+0x280>)
 8001df2:	f00c fedb 	bl	800ebac <sniprintf>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001df6:	e2e8      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b46      	cmp	r3, #70	; 0x46
 8001dfe:	d13d      	bne.n	8001e7c <HAL_UART_RxCpltCallback+0x18c>
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e02:	785b      	ldrb	r3, [r3, #1]
 8001e04:	2b57      	cmp	r3, #87	; 0x57
 8001e06:	d003      	beq.n	8001e10 <HAL_UART_RxCpltCallback+0x120>
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	2b53      	cmp	r3, #83	; 0x53
 8001e0e:	d135      	bne.n	8001e7c <HAL_UART_RxCpltCallback+0x18c>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e12:	789b      	ldrb	r3, [r3, #2]
 8001e14:	2b2d      	cmp	r3, #45	; 0x2d
 8001e16:	d105      	bne.n	8001e24 <HAL_UART_RxCpltCallback+0x134>
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e1a:	78db      	ldrb	r3, [r3, #3]
 8001e1c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e1e:	d101      	bne.n	8001e24 <HAL_UART_RxCpltCallback+0x134>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_UART_RxCpltCallback+0x136>
 8001e24:	2300      	movs	r3, #0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_UART_RxCpltCallback+0x24c>)
 8001e2a:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	2b53      	cmp	r3, #83	; 0x53
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_UART_RxCpltCallback+0x290>)
 8001e3e:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 1, val);
 8001e40:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	711a      	strb	r2, [r3, #4]
 8001e4e:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	b291      	uxth	r1, r2
 8001e56:	4a43      	ldr	r2, [pc, #268]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	80da      	strh	r2, [r3, #6]
 8001e60:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a3f      	ldr	r2, [pc, #252]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e68:	7892      	ldrb	r2, [r2, #2]
 8001e6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e6e:	fb01 f202 	mul.w	r2, r1, r2
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e2a6      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b42      	cmp	r3, #66	; 0x42
 8001e82:	d13d      	bne.n	8001f00 <HAL_UART_RxCpltCallback+0x210>
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b57      	cmp	r3, #87	; 0x57
 8001e8a:	d003      	beq.n	8001e94 <HAL_UART_RxCpltCallback+0x1a4>
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b53      	cmp	r3, #83	; 0x53
 8001e92:	d135      	bne.n	8001f00 <HAL_UART_RxCpltCallback+0x210>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	2b2d      	cmp	r3, #45	; 0x2d
 8001e9a:	d105      	bne.n	8001ea8 <HAL_UART_RxCpltCallback+0x1b8>
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ea2:	d101      	bne.n	8001ea8 <HAL_UART_RxCpltCallback+0x1b8>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x1ba>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_UART_RxCpltCallback+0x24c>)
 8001eae:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	2b53      	cmp	r3, #83	; 0x53
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_UART_RxCpltCallback+0x290>)
 8001ec2:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 2, val);
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	2202      	movs	r2, #2
 8001ed0:	711a      	strb	r2, [r3, #4]
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	b291      	uxth	r1, r2
 8001eda:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	80da      	strh	r2, [r3, #6]
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001eec:	7892      	ldrb	r2, [r2, #2]
 8001eee:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ef2:	fb01 f202 	mul.w	r2, r1, r2
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_UART_RxCpltCallback+0x274>)
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e264      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b46      	cmp	r3, #70	; 0x46
 8001f06:	d15c      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x2d2>
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	2b4c      	cmp	r3, #76	; 0x4c
 8001f0e:	d158      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x2d2>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001f12:	789b      	ldrb	r3, [r3, #2]
 8001f14:	2b2d      	cmp	r3, #45	; 0x2d
 8001f16:	d105      	bne.n	8001f24 <HAL_UART_RxCpltCallback+0x234>
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_UART_RxCpltCallback+0x248>)
 8001f1a:	78db      	ldrb	r3, [r3, #3]
 8001f1c:	2b2d      	cmp	r3, #45	; 0x2d
 8001f1e:	d101      	bne.n	8001f24 <HAL_UART_RxCpltCallback+0x234>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_UART_RxCpltCallback+0x236>
 8001f24:	2300      	movs	r3, #0
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_UART_RxCpltCallback+0x24c>)
 8001f2a:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_UART_RxCpltCallback+0x24c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d027      	beq.n	8001f84 <HAL_UART_RxCpltCallback+0x294>
 8001f34:	2103      	movs	r1, #3
 8001f36:	e026      	b.n	8001f86 <HAL_UART_RxCpltCallback+0x296>
 8001f38:	20000480 	.word	0x20000480
 8001f3c:	200004e4 	.word	0x200004e4
 8001f40:	200003c0 	.word	0x200003c0
 8001f44:	20000134 	.word	0x20000134
 8001f48:	20000135 	.word	0x20000135
 8001f4c:	200004ec 	.word	0x200004ec
 8001f50:	200004f2 	.word	0x200004f2
 8001f54:	2000051c 	.word	0x2000051c
 8001f58:	20000508 	.word	0x20000508
 8001f5c:	20000530 	.word	0x20000530
 8001f60:	20000500 	.word	0x20000500
 8001f64:	2000048c 	.word	0x2000048c
 8001f68:	200004c0 	.word	0x200004c0
 8001f6c:	0801026c 	.word	0x0801026c
 8001f70:	200004c4 	.word	0x200004c4
 8001f74:	08010274 	.word	0x08010274
 8001f78:	20000408 	.word	0x20000408
 8001f7c:	0801027c 	.word	0x0801027c
 8001f80:	20000136 	.word	0x20000136
 8001f84:	2107      	movs	r1, #7
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4a8c      	ldr	r2, [pc, #560]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	460a      	mov	r2, r1
 8001f92:	711a      	strb	r2, [r3, #4]
 8001f94:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	b291      	uxth	r1, r2
 8001f9c:	4a87      	ldr	r2, [pc, #540]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	80da      	strh	r2, [r3, #6]
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a83      	ldr	r2, [pc, #524]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001fae:	7892      	ldrb	r2, [r2, #2]
 8001fb0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fb4:	fb01 f202 	mul.w	r2, r1, r2
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	e203      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b46      	cmp	r3, #70	; 0x46
 8001fc8:	d136      	bne.n	8002038 <HAL_UART_RxCpltCallback+0x348>
 8001fca:	4b7d      	ldr	r3, [pc, #500]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b52      	cmp	r3, #82	; 0x52
 8001fd0:	d132      	bne.n	8002038 <HAL_UART_RxCpltCallback+0x348>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001fd2:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8001fd4:	789b      	ldrb	r3, [r3, #2]
 8001fd6:	2b2d      	cmp	r3, #45	; 0x2d
 8001fd8:	d105      	bne.n	8001fe6 <HAL_UART_RxCpltCallback+0x2f6>
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8001fdc:	78db      	ldrb	r3, [r3, #3]
 8001fde:	2b2d      	cmp	r3, #45	; 0x2d
 8001fe0:	d101      	bne.n	8001fe6 <HAL_UART_RxCpltCallback+0x2f6>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_UART_RxCpltCallback+0x2f8>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <HAL_UART_RxCpltCallback+0x4d4>)
 8001fec:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001fee:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <HAL_UART_RxCpltCallback+0x4d4>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_UART_RxCpltCallback+0x30a>
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	e000      	b.n	8001ffc <HAL_UART_RxCpltCallback+0x30c>
 8001ffa:	2108      	movs	r1, #8
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	460a      	mov	r2, r1
 8002008:	711a      	strb	r2, [r3, #4]
 800200a:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	b291      	uxth	r1, r2
 8002012:	4a6a      	ldr	r2, [pc, #424]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	460a      	mov	r2, r1
 800201a:	80da      	strh	r2, [r3, #6]
 800201c:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a66      	ldr	r2, [pc, #408]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002024:	7892      	ldrb	r2, [r2, #2]
 8002026:	fb93 f1f2 	sdiv	r1, r3, r2
 800202a:	fb01 f202 	mul.w	r2, r1, r2
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b62      	ldr	r3, [pc, #392]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e1c8      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 8002038:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b42      	cmp	r3, #66	; 0x42
 800203e:	d136      	bne.n	80020ae <HAL_UART_RxCpltCallback+0x3be>
 8002040:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8002042:	785b      	ldrb	r3, [r3, #1]
 8002044:	2b4c      	cmp	r3, #76	; 0x4c
 8002046:	d132      	bne.n	80020ae <HAL_UART_RxCpltCallback+0x3be>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002048:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800204a:	789b      	ldrb	r3, [r3, #2]
 800204c:	2b2d      	cmp	r3, #45	; 0x2d
 800204e:	d105      	bne.n	800205c <HAL_UART_RxCpltCallback+0x36c>
 8002050:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8002052:	78db      	ldrb	r3, [r3, #3]
 8002054:	2b2d      	cmp	r3, #45	; 0x2d
 8002056:	d101      	bne.n	800205c <HAL_UART_RxCpltCallback+0x36c>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_UART_RxCpltCallback+0x36e>
 800205c:	2300      	movs	r3, #0
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <HAL_UART_RxCpltCallback+0x4d4>)
 8002062:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_UART_RxCpltCallback+0x4d4>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_RxCpltCallback+0x380>
 800206c:	2105      	movs	r1, #5
 800206e:	e000      	b.n	8002072 <HAL_UART_RxCpltCallback+0x382>
 8002070:	2109      	movs	r1, #9
 8002072:	4b52      	ldr	r3, [pc, #328]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	460a      	mov	r2, r1
 800207e:	711a      	strb	r2, [r3, #4]
 8002080:	4b4e      	ldr	r3, [pc, #312]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	b291      	uxth	r1, r2
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	460a      	mov	r2, r1
 8002090:	80da      	strh	r2, [r3, #6]
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800209a:	7892      	ldrb	r2, [r2, #2]
 800209c:	fb93 f1f2 	sdiv	r1, r3, r2
 80020a0:	fb01 f202 	mul.w	r2, r1, r2
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b44      	ldr	r3, [pc, #272]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e18d      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b42      	cmp	r3, #66	; 0x42
 80020b4:	d136      	bne.n	8002124 <HAL_UART_RxCpltCallback+0x434>
 80020b6:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 80020b8:	785b      	ldrb	r3, [r3, #1]
 80020ba:	2b52      	cmp	r3, #82	; 0x52
 80020bc:	d132      	bne.n	8002124 <HAL_UART_RxCpltCallback+0x434>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 80020c0:	789b      	ldrb	r3, [r3, #2]
 80020c2:	2b2d      	cmp	r3, #45	; 0x2d
 80020c4:	d105      	bne.n	80020d2 <HAL_UART_RxCpltCallback+0x3e2>
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	2b2d      	cmp	r3, #45	; 0x2d
 80020cc:	d101      	bne.n	80020d2 <HAL_UART_RxCpltCallback+0x3e2>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_UART_RxCpltCallback+0x3e4>
 80020d2:	2300      	movs	r3, #0
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_UART_RxCpltCallback+0x4d4>)
 80020d8:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_UART_RxCpltCallback+0x4d4>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_UART_RxCpltCallback+0x3f6>
 80020e2:	2106      	movs	r1, #6
 80020e4:	e000      	b.n	80020e8 <HAL_UART_RxCpltCallback+0x3f8>
 80020e6:	210a      	movs	r1, #10
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4a33      	ldr	r2, [pc, #204]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	460a      	mov	r2, r1
 80020f4:	711a      	strb	r2, [r3, #4]
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	b291      	uxth	r1, r2
 80020fe:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	460a      	mov	r2, r1
 8002106:	80da      	strh	r2, [r3, #6]
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002110:	7892      	ldrb	r2, [r2, #2]
 8002112:	fb93 f1f2 	sdiv	r1, r3, r2
 8002116:	fb01 f202 	mul.w	r2, r1, r2
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e152      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b54      	cmp	r3, #84	; 0x54
 800212a:	d121      	bne.n	8002170 <HAL_UART_RxCpltCallback+0x480>
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b4c      	cmp	r3, #76	; 0x4c
 8002132:	d11d      	bne.n	8002170 <HAL_UART_RxCpltCallback+0x480>
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	220b      	movs	r2, #11
 8002140:	711a      	strb	r2, [r3, #4]
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	b291      	uxth	r1, r2
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	80da      	strh	r2, [r3, #6]
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800215c:	7892      	ldrb	r2, [r2, #2]
 800215e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002162:	fb01 f202 	mul.w	r2, r1, r2
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e12c      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b54      	cmp	r3, #84	; 0x54
 8002176:	d127      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x4d8>
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800217a:	785b      	ldrb	r3, [r3, #1]
 800217c:	2b52      	cmp	r3, #82	; 0x52
 800217e:	d123      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x4d8>
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	220c      	movs	r2, #12
 800218c:	711a      	strb	r2, [r3, #4]
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	b291      	uxth	r1, r2
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	460a      	mov	r2, r1
 800219e:	80da      	strh	r2, [r3, #6]
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80021a8:	7892      	ldrb	r2, [r2, #2]
 80021aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ae:	fb01 f202 	mul.w	r2, r1, r2
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b01      	ldr	r3, [pc, #4]	; (80021bc <HAL_UART_RxCpltCallback+0x4cc>)
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e106      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
 80021bc:	2000048c 	.word	0x2000048c
 80021c0:	20000480 	.word	0x20000480
 80021c4:	200004e4 	.word	0x200004e4
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 80021c8:	4b97      	ldr	r3, [pc, #604]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b49      	cmp	r3, #73	; 0x49
 80021ce:	d121      	bne.n	8002214 <HAL_UART_RxCpltCallback+0x524>
 80021d0:	4b95      	ldr	r3, [pc, #596]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b52      	cmp	r3, #82	; 0x52
 80021d6:	d11d      	bne.n	8002214 <HAL_UART_RxCpltCallback+0x524>
 80021d8:	4b94      	ldr	r3, [pc, #592]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4a93      	ldr	r2, [pc, #588]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	220d      	movs	r2, #13
 80021e4:	711a      	strb	r2, [r3, #4]
 80021e6:	4b91      	ldr	r3, [pc, #580]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	b291      	uxth	r1, r2
 80021ee:	4a8f      	ldr	r2, [pc, #572]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	460a      	mov	r2, r1
 80021f6:	80da      	strh	r2, [r3, #6]
 80021f8:	4b8c      	ldr	r3, [pc, #560]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a8b      	ldr	r2, [pc, #556]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002200:	7892      	ldrb	r2, [r2, #2]
 8002202:	fb93 f1f2 	sdiv	r1, r3, r2
 8002206:	fb01 f202 	mul.w	r2, r1, r2
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b87      	ldr	r3, [pc, #540]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e0da      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002214:	4b84      	ldr	r3, [pc, #528]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b44      	cmp	r3, #68	; 0x44
 800221a:	d121      	bne.n	8002260 <HAL_UART_RxCpltCallback+0x570>
 800221c:	4b82      	ldr	r3, [pc, #520]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	2b54      	cmp	r3, #84	; 0x54
 8002222:	d11d      	bne.n	8002260 <HAL_UART_RxCpltCallback+0x570>
 8002224:	4b81      	ldr	r3, [pc, #516]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4a80      	ldr	r2, [pc, #512]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	220e      	movs	r2, #14
 8002230:	711a      	strb	r2, [r3, #4]
 8002232:	4b7e      	ldr	r3, [pc, #504]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	b291      	uxth	r1, r2
 800223a:	4a7c      	ldr	r2, [pc, #496]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	460a      	mov	r2, r1
 8002242:	80da      	strh	r2, [r3, #6]
 8002244:	4b79      	ldr	r3, [pc, #484]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a78      	ldr	r2, [pc, #480]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800224c:	7892      	ldrb	r2, [r2, #2]
 800224e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002252:	fb01 f202 	mul.w	r2, r1, r2
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e0b4      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 8002260:	4b71      	ldr	r3, [pc, #452]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b5a      	cmp	r3, #90	; 0x5a
 8002266:	d121      	bne.n	80022ac <HAL_UART_RxCpltCallback+0x5bc>
 8002268:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	2b5a      	cmp	r3, #90	; 0x5a
 800226e:	d11d      	bne.n	80022ac <HAL_UART_RxCpltCallback+0x5bc>
 8002270:	4b6e      	ldr	r3, [pc, #440]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4a6d      	ldr	r2, [pc, #436]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	220f      	movs	r2, #15
 800227c:	711a      	strb	r2, [r3, #4]
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	b291      	uxth	r1, r2
 8002286:	4a69      	ldr	r2, [pc, #420]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	460a      	mov	r2, r1
 800228e:	80da      	strh	r2, [r3, #6]
 8002290:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a65      	ldr	r2, [pc, #404]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002298:	7892      	ldrb	r2, [r2, #2]
 800229a:	fb93 f1f2 	sdiv	r1, r3, r2
 800229e:	fb01 f202 	mul.w	r2, r1, r2
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b61      	ldr	r3, [pc, #388]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e08e      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 80022ac:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b57      	cmp	r3, #87	; 0x57
 80022b2:	d121      	bne.n	80022f8 <HAL_UART_RxCpltCallback+0x608>
 80022b4:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b58      	cmp	r3, #88	; 0x58
 80022ba:	d11d      	bne.n	80022f8 <HAL_UART_RxCpltCallback+0x608>
 80022bc:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4a5a      	ldr	r2, [pc, #360]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	2210      	movs	r2, #16
 80022c8:	711a      	strb	r2, [r3, #4]
 80022ca:	4b58      	ldr	r3, [pc, #352]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	b291      	uxth	r1, r2
 80022d2:	4a56      	ldr	r2, [pc, #344]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	460a      	mov	r2, r1
 80022da:	80da      	strh	r2, [r3, #6]
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022e4:	7892      	ldrb	r2, [r2, #2]
 80022e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80022ea:	fb01 f202 	mul.w	r2, r1, r2
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b4e      	ldr	r3, [pc, #312]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e068      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N') __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b57      	cmp	r3, #87	; 0x57
 80022fe:	d121      	bne.n	8002344 <HAL_UART_RxCpltCallback+0x654>
 8002300:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b4e      	cmp	r3, #78	; 0x4e
 8002306:	d11d      	bne.n	8002344 <HAL_UART_RxCpltCallback+0x654>
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	2211      	movs	r2, #17
 8002314:	711a      	strb	r2, [r3, #4]
 8002316:	4b45      	ldr	r3, [pc, #276]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b291      	uxth	r1, r2
 800231e:	4a43      	ldr	r2, [pc, #268]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	460a      	mov	r2, r1
 8002326:	80da      	strh	r2, [r3, #6]
 8002328:	4b40      	ldr	r3, [pc, #256]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a3f      	ldr	r2, [pc, #252]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002330:	7892      	ldrb	r2, [r2, #2]
 8002332:	fb93 f1f2 	sdiv	r1, r3, r2
 8002336:	fb01 f202 	mul.w	r2, r1, r2
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e042      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'A') __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b41      	cmp	r3, #65	; 0x41
 800234a:	d11d      	bne.n	8002388 <HAL_UART_RxCpltCallback+0x698>
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4a36      	ldr	r2, [pc, #216]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	2258      	movs	r2, #88	; 0x58
 8002358:	711a      	strb	r2, [r3, #4]
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	b291      	uxth	r1, r2
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	460a      	mov	r2, r1
 800236a:	80da      	strh	r2, [r3, #6]
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002374:	7892      	ldrb	r2, [r2, #2]
 8002376:	fb93 f1f2 	sdiv	r1, r3, r2
 800237a:	fb01 f202 	mul.w	r2, r1, r2
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e020      	b.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'C') __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b43      	cmp	r3, #67	; 0x43
 800238e:	d11c      	bne.n	80023ca <HAL_UART_RxCpltCallback+0x6da>
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4a25      	ldr	r2, [pc, #148]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	2259      	movs	r2, #89	; 0x59
 800239c:	711a      	strb	r2, [r3, #4]
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	b291      	uxth	r1, r2
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	460a      	mov	r2, r1
 80023ae:	80da      	strh	r2, [r3, #6]
 80023b0:	4b1e      	ldr	r3, [pc, #120]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023b8:	7892      	ldrb	r2, [r2, #2]
 80023ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80023be:	fb01 f202 	mul.w	r2, r1, r2
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023c8:	701a      	strb	r2, [r3, #0]

	if (!__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d019      	beq.n	800240a <HAL_UART_RxCpltCallback+0x71a>
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_UART_RxCpltCallback+0x740>)
 80023dc:	4913      	ldr	r1, [pc, #76]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023e8:	785b      	ldrb	r3, [r3, #1]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023ee:	7892      	ldrb	r2, [r2, #2]
 80023f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80023f4:	fb01 f202 	mul.w	r2, r1, r2
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_UART_RxCpltCallback+0x73c>)
 80023fe:	705a      	strb	r2, [r3, #1]
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_UART_RxCpltCallback+0x744>)
 8002402:	210f      	movs	r1, #15
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <HAL_UART_RxCpltCallback+0x748>)
 8002406:	f00c fbd1 	bl	800ebac <sniprintf>
	}

	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_UART_RxCpltCallback+0x74c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_UART_RxCpltCallback+0x750>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_UART_RxCpltCallback+0x738>)
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <HAL_UART_RxCpltCallback+0x74c>)
 800241c:	f008 fea9 	bl	800b172 <HAL_UART_Receive_IT>
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000480 	.word	0x20000480
 800242c:	2000048c 	.word	0x2000048c
 8002430:	200004c0 	.word	0x200004c0
 8002434:	0801027c 	.word	0x0801027c
 8002438:	200004c4 	.word	0x200004c4
 800243c:	20000408 	.word	0x20000408
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_GPIO_EXTI_Callback>:
int clickOnce = 0;
int targetD = 5;
uint8_t tempDir = 1 ;
int8_t step = 0;
uint8_t turnMode = 2;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
	if (clickOnce) return;
 800244e:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d151      	bne.n	80024fa <HAL_GPIO_EXTI_Callback+0xb6>
	if (GPIO_Pin == SW1_Pin) {
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d14e      	bne.n	80024fc <HAL_GPIO_EXTI_Callback+0xb8>
		clickOnce = 1;
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
//		manualMode = 1;
//		moveMode = FAST;
//		__ADD_COMMAND(cQueue, 1, 90);
//		__READ_COMMAND(cQueue, curCmd, rxMsg);

		__ADD_COMMAND(cQueue, 7 + step, 0);
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002466:	f993 3000 	ldrsb.w	r3, [r3]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	4610      	mov	r0, r2
 8002472:	3307      	adds	r3, #7
 8002474:	b2d9      	uxtb	r1, r3
 8002476:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002478:	0083      	lsls	r3, r0, #2
 800247a:	4413      	add	r3, r2
 800247c:	460a      	mov	r2, r1
 800247e:	711a      	strb	r2, [r3, #4]
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	2200      	movs	r2, #0
 800248c:	80da      	strh	r2, [r3, #6]
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002496:	7892      	ldrb	r2, [r2, #2]
 8002498:	fb93 f1f2 	sdiv	r1, r3, r2
 800249c:	fb01 f202 	mul.w	r2, r1, r2
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024a6:	701a      	strb	r2, [r3, #0]
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_GPIO_EXTI_Callback+0xcc>)
 80024ae:	4917      	ldr	r1, [pc, #92]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024c0:	7892      	ldrb	r2, [r2, #2]
 80024c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80024c6:	fb01 f202 	mul.w	r2, r1, r2
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024d0:	705a      	strb	r2, [r3, #1]
 80024d2:	4a10      	ldr	r2, [pc, #64]	; (8002514 <HAL_GPIO_EXTI_Callback+0xd0>)
 80024d4:	210f      	movs	r1, #15
 80024d6:	4810      	ldr	r0, [pc, #64]	; (8002518 <HAL_GPIO_EXTI_Callback+0xd4>)
 80024d8:	f00c fb68 	bl	800ebac <sniprintf>

		step = (step + 1) % 4;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_GPIO_EXTI_Callback+0xc4>)
 80024de:	f993 3000 	ldrsb.w	r3, [r3]
 80024e2:	3301      	adds	r3, #1
 80024e4:	425a      	negs	r2, r3
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	bf58      	it	pl
 80024f0:	4253      	negpl	r3, r2
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <HAL_GPIO_EXTI_Callback+0xc4>)
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_EXTI_Callback+0xb8>
	if (clickOnce) return;
 80024fa:	bf00      	nop
//		turnMode = (turnMode + 1) % 4;
//		__ADD_COMMAND(cQueue, 1, 100);
//		__READ_COMMAND(cQueue, curCmd, rxMsg);
	}

}
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000578 	.word	0x20000578
 8002508:	2000057c 	.word	0x2000057c
 800250c:	2000048c 	.word	0x2000048c
 8002510:	200004c0 	.word	0x200004c0
 8002514:	0801027c 	.word	0x0801027c
 8002518:	200004c4 	.word	0x200004c4

0800251c <PIDConfigInit>:

void PIDConfigInit(PIDConfig * cfg, const float Kp, const float Ki, const float Kd) {
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	ed87 0a02 	vstr	s0, [r7, #8]
 8002528:	edc7 0a01 	vstr	s1, [r7, #4]
 800252c:	ed87 1a00 	vstr	s2, [r7]
	cfg->Kp = Kp;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	601a      	str	r2, [r3, #0]
	cfg->Ki = Ki;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	605a      	str	r2, [r3, #4]
	cfg->Kd = Kd;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	609a      	str	r2, [r3, #8]
	cfg->ek1 = 0;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <PIDConfigReset>:

void PIDConfigReset(PIDConfig * cfg) {
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;
//PIDConfig curPIDConfig;

void StraightLineMove(const uint8_t speedMode) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af04      	add	r7, sp, #16
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800258e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	2302      	movs	r3, #2
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	4ba9      	ldr	r3, [pc, #676]	; (8002840 <StraightLineMove+0x2bc>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	2237      	movs	r2, #55	; 0x37
 80025a0:	21d0      	movs	r1, #208	; 0xd0
 80025a2:	48a8      	ldr	r0, [pc, #672]	; (8002844 <StraightLineMove+0x2c0>)
 80025a4:	f005 fd84 	bl	80080b0 <HAL_I2C_Mem_Read>
 80025a8:	4ba5      	ldr	r3, [pc, #660]	; (8002840 <StraightLineMove+0x2bc>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	4ba3      	ldr	r3, [pc, #652]	; (8002840 <StraightLineMove+0x2bc>)
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	4ba3      	ldr	r3, [pc, #652]	; (8002848 <StraightLineMove+0x2c4>)
 80025bc:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 80025be:	4ba3      	ldr	r3, [pc, #652]	; (800284c <StraightLineMove+0x2c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d101      	bne.n	80025d0 <StraightLineMove+0x4c>
 80025cc:	2201      	movs	r2, #1
 80025ce:	e001      	b.n	80025d4 <StraightLineMove+0x50>
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	4b9e      	ldr	r3, [pc, #632]	; (8002850 <StraightLineMove+0x2cc>)
 80025d6:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80025d8:	4b9b      	ldr	r3, [pc, #620]	; (8002848 <StraightLineMove+0x2c4>)
 80025da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025de:	f113 0f04 	cmn.w	r3, #4
 80025e2:	db04      	blt.n	80025ee <StraightLineMove+0x6a>
 80025e4:	4b98      	ldr	r3, [pc, #608]	; (8002848 <StraightLineMove+0x2c4>)
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	2b0b      	cmp	r3, #11
 80025ec:	dd07      	ble.n	80025fe <StraightLineMove+0x7a>
 80025ee:	4b96      	ldr	r3, [pc, #600]	; (8002848 <StraightLineMove+0x2c4>)
 80025f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fc:	e001      	b.n	8002602 <StraightLineMove+0x7e>
 80025fe:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002854 <StraightLineMove+0x2d0>
 8002602:	4b95      	ldr	r3, [pc, #596]	; (8002858 <StraightLineMove+0x2d4>)
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800260c:	4b92      	ldr	r3, [pc, #584]	; (8002858 <StraightLineMove+0x2d4>)
 800260e:	edc3 7a00 	vstr	s15, [r3]

	if (speedMode == SPEED_MODE_T) __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d164      	bne.n	80026e2 <StraightLineMove+0x15e>
 8002618:	4b90      	ldr	r3, [pc, #576]	; (800285c <StraightLineMove+0x2d8>)
 800261a:	ed93 7a00 	vldr	s14, [r3]
 800261e:	4b8e      	ldr	r3, [pc, #568]	; (8002858 <StraightLineMove+0x2d4>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <StraightLineMove+0x2d8>)
 800262a:	edd3 6a01 	vldr	s13, [r3, #4]
 800262e:	4b8b      	ldr	r3, [pc, #556]	; (800285c <StraightLineMove+0x2d8>)
 8002630:	edd3 7a04 	vldr	s15, [r3, #16]
 8002634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	4b87      	ldr	r3, [pc, #540]	; (800285c <StraightLineMove+0x2d8>)
 800263e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002642:	4b86      	ldr	r3, [pc, #536]	; (800285c <StraightLineMove+0x2d8>)
 8002644:	ed93 6a03 	vldr	s12, [r3, #12]
 8002648:	4b83      	ldr	r3, [pc, #524]	; (8002858 <StraightLineMove+0x2d4>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800265e:	ee17 2a90 	vmov	r2, s15
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <StraightLineMove+0x2dc>)
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4b7c      	ldr	r3, [pc, #496]	; (8002858 <StraightLineMove+0x2d4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7c      	ldr	r2, [pc, #496]	; (800285c <StraightLineMove+0x2d8>)
 800266c:	60d3      	str	r3, [r2, #12]
 800266e:	4b7b      	ldr	r3, [pc, #492]	; (800285c <StraightLineMove+0x2d8>)
 8002670:	ed93 7a04 	vldr	s14, [r3, #16]
 8002674:	4b78      	ldr	r3, [pc, #480]	; (8002858 <StraightLineMove+0x2d4>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <StraightLineMove+0x2d8>)
 8002680:	edc3 7a04 	vstr	s15, [r3, #16]
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <StraightLineMove+0x2dc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800268c:	dc06      	bgt.n	800269c <StraightLineMove+0x118>
 800268e:	4b74      	ldr	r3, [pc, #464]	; (8002860 <StraightLineMove+0x2dc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a74      	ldr	r2, [pc, #464]	; (8002864 <StraightLineMove+0x2e0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bfb8      	it	lt
 8002698:	4613      	movlt	r3, r2
 800269a:	e001      	b.n	80026a0 <StraightLineMove+0x11c>
 800269c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80026a0:	4a6f      	ldr	r2, [pc, #444]	; (8002860 <StraightLineMove+0x2dc>)
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <StraightLineMove+0x2cc>)
 80026a6:	f993 3000 	ldrsb.w	r3, [r3]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <StraightLineMove+0x2dc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	fb12 f303 	smulbb	r3, r2, r3
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <StraightLineMove+0x2e4>)
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <StraightLineMove+0x2cc>)
 80026c4:	f993 3000 	ldrsb.w	r3, [r3]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <StraightLineMove+0x2dc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	fb12 f303 	smulbb	r3, r2, r3
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b63      	ldr	r3, [pc, #396]	; (800286c <StraightLineMove+0x2e8>)
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	e0ef      	b.n	80028c2 <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d165      	bne.n	80027b4 <StraightLineMove+0x230>
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <StraightLineMove+0x2ec>)
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <StraightLineMove+0x2d4>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <StraightLineMove+0x2ec>)
 80026fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <StraightLineMove+0x2ec>)
 8002700:	edd3 7a04 	vldr	s15, [r3, #16]
 8002704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270c:	4b58      	ldr	r3, [pc, #352]	; (8002870 <StraightLineMove+0x2ec>)
 800270e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <StraightLineMove+0x2ec>)
 8002714:	ed93 6a03 	vldr	s12, [r3, #12]
 8002718:	4b4f      	ldr	r3, [pc, #316]	; (8002858 <StraightLineMove+0x2d4>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272e:	ee17 2a90 	vmov	r2, s15
 8002732:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <StraightLineMove+0x2dc>)
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4b48      	ldr	r3, [pc, #288]	; (8002858 <StraightLineMove+0x2d4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <StraightLineMove+0x2ec>)
 800273c:	60d3      	str	r3, [r2, #12]
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <StraightLineMove+0x2ec>)
 8002740:	ed93 7a04 	vldr	s14, [r3, #16]
 8002744:	4b44      	ldr	r3, [pc, #272]	; (8002858 <StraightLineMove+0x2d4>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	4b48      	ldr	r3, [pc, #288]	; (8002870 <StraightLineMove+0x2ec>)
 8002750:	edc3 7a04 	vstr	s15, [r3, #16]
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <StraightLineMove+0x2dc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800275c:	dc06      	bgt.n	800276c <StraightLineMove+0x1e8>
 800275e:	4b40      	ldr	r3, [pc, #256]	; (8002860 <StraightLineMove+0x2dc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a44      	ldr	r2, [pc, #272]	; (8002874 <StraightLineMove+0x2f0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bfb8      	it	lt
 8002768:	4613      	movlt	r3, r2
 800276a:	e001      	b.n	8002770 <StraightLineMove+0x1ec>
 800276c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002770:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <StraightLineMove+0x2dc>)
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <StraightLineMove+0x2cc>)
 8002776:	f993 3000 	ldrsb.w	r3, [r3]
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b38      	ldr	r3, [pc, #224]	; (8002860 <StraightLineMove+0x2dc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	fb12 f303 	smulbb	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <StraightLineMove+0x2e4>)
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <StraightLineMove+0x2cc>)
 8002794:	f993 3000 	ldrsb.w	r3, [r3]
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <StraightLineMove+0x2dc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	fb12 f303 	smulbb	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80027aa:	3308      	adds	r3, #8
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <StraightLineMove+0x2e8>)
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e086      	b.n	80028c2 <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 8083 	bne.w	80028c2 <StraightLineMove+0x33e>
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <StraightLineMove+0x2f4>)
 80027be:	ed93 7a00 	vldr	s14, [r3]
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <StraightLineMove+0x2d4>)
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <StraightLineMove+0x2f4>)
 80027ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <StraightLineMove+0x2f4>)
 80027d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80027d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <StraightLineMove+0x2f4>)
 80027e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <StraightLineMove+0x2f4>)
 80027e8:	ed93 6a03 	vldr	s12, [r3, #12]
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <StraightLineMove+0x2d4>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002802:	ee17 2a90 	vmov	r2, s15
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <StraightLineMove+0x2dc>)
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <StraightLineMove+0x2d4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <StraightLineMove+0x2f4>)
 8002810:	60d3      	str	r3, [r2, #12]
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <StraightLineMove+0x2f4>)
 8002814:	ed93 7a04 	vldr	s14, [r3, #16]
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <StraightLineMove+0x2d4>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <StraightLineMove+0x2f4>)
 8002824:	edc3 7a04 	vstr	s15, [r3, #16]
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <StraightLineMove+0x2dc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002830:	dc24      	bgt.n	800287c <StraightLineMove+0x2f8>
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <StraightLineMove+0x2dc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <StraightLineMove+0x2f0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	bfb8      	it	lt
 800283c:	4613      	movlt	r3, r2
 800283e:	e01f      	b.n	8002880 <StraightLineMove+0x2fc>
 8002840:	200004f0 	.word	0x200004f0
 8002844:	2000024c 	.word	0x2000024c
 8002848:	200004f2 	.word	0x200004f2
 800284c:	200002e8 	.word	0x200002e8
 8002850:	2000013c 	.word	0x2000013c
 8002854:	00000000 	.word	0x00000000
 8002858:	200004ec 	.word	0x200004ec
 800285c:	2000051c 	.word	0x2000051c
 8002860:	20000580 	.word	0x20000580
 8002864:	fffffda8 	.word	0xfffffda8
 8002868:	200004f4 	.word	0x200004f4
 800286c:	200004f6 	.word	0x200004f6
 8002870:	20000530 	.word	0x20000530
 8002874:	fffffd44 	.word	0xfffffd44
 8002878:	20000508 	.word	0x20000508
 800287c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002880:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <StraightLineMove+0x35c>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <StraightLineMove+0x360>)
 8002886:	f993 3000 	ldrsb.w	r3, [r3]
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <StraightLineMove+0x35c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	fb12 f303 	smulbb	r3, r2, r3
 8002896:	b29b      	uxth	r3, r3
 8002898:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 800289c:	b29a      	uxth	r2, r3
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <StraightLineMove+0x364>)
 80028a0:	801a      	strh	r2, [r3, #0]
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <StraightLineMove+0x360>)
 80028a4:	f993 3000 	ldrsb.w	r3, [r3]
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <StraightLineMove+0x35c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	fb12 f303 	smulbb	r3, r2, r3
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 80028ba:	330c      	adds	r3, #12
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <StraightLineMove+0x368>)
 80028c0:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <StraightLineMove+0x364>)
 80028c4:	881a      	ldrh	r2, [r3, #0]
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <StraightLineMove+0x36c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <StraightLineMove+0x368>)
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <StraightLineMove+0x36c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000580 	.word	0x20000580
 80028e4:	2000013c 	.word	0x2000013c
 80028e8:	200004f4 	.word	0x200004f4
 80028ec:	200004f6 	.word	0x200004f6
 80028f0:	200003c0 	.word	0x200003c0

080028f4 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float * speedScale) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002904:	9302      	str	r3, [sp, #8]
 8002906:	2302      	movs	r3, #2
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	4b9b      	ldr	r3, [pc, #620]	; (8002b78 <StraightLineMoveSpeedScale+0x284>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2301      	movs	r3, #1
 8002910:	2237      	movs	r2, #55	; 0x37
 8002912:	21d0      	movs	r1, #208	; 0xd0
 8002914:	4899      	ldr	r0, [pc, #612]	; (8002b7c <StraightLineMoveSpeedScale+0x288>)
 8002916:	f005 fbcb 	bl	80080b0 <HAL_I2C_Mem_Read>
 800291a:	4b97      	ldr	r3, [pc, #604]	; (8002b78 <StraightLineMoveSpeedScale+0x284>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	b21a      	sxth	r2, r3
 8002922:	4b95      	ldr	r3, [pc, #596]	; (8002b78 <StraightLineMoveSpeedScale+0x284>)
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	b21b      	sxth	r3, r3
 8002928:	4313      	orrs	r3, r2
 800292a:	b21a      	sxth	r2, r3
 800292c:	4b94      	ldr	r3, [pc, #592]	; (8002b80 <StraightLineMoveSpeedScale+0x28c>)
 800292e:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002930:	4b94      	ldr	r3, [pc, #592]	; (8002b84 <StraightLineMoveSpeedScale+0x290>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b10      	cmp	r3, #16
 800293c:	d101      	bne.n	8002942 <StraightLineMoveSpeedScale+0x4e>
 800293e:	2201      	movs	r2, #1
 8002940:	e001      	b.n	8002946 <StraightLineMoveSpeedScale+0x52>
 8002942:	f04f 32ff 	mov.w	r2, #4294967295
 8002946:	4b90      	ldr	r3, [pc, #576]	; (8002b88 <StraightLineMoveSpeedScale+0x294>)
 8002948:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 800294a:	4b8d      	ldr	r3, [pc, #564]	; (8002b80 <StraightLineMoveSpeedScale+0x28c>)
 800294c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002950:	f113 0f04 	cmn.w	r3, #4
 8002954:	db04      	blt.n	8002960 <StraightLineMoveSpeedScale+0x6c>
 8002956:	4b8a      	ldr	r3, [pc, #552]	; (8002b80 <StraightLineMoveSpeedScale+0x28c>)
 8002958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295c:	2b0b      	cmp	r3, #11
 800295e:	dd07      	ble.n	8002970 <StraightLineMoveSpeedScale+0x7c>
 8002960:	4b87      	ldr	r3, [pc, #540]	; (8002b80 <StraightLineMoveSpeedScale+0x28c>)
 8002962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296e:	e001      	b.n	8002974 <StraightLineMoveSpeedScale+0x80>
 8002970:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002b8c <StraightLineMoveSpeedScale+0x298>
 8002974:	4b86      	ldr	r3, [pc, #536]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002976:	ed93 7a00 	vldr	s14, [r3]
 800297a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800297e:	4b84      	ldr	r3, [pc, #528]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002980:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d165      	bne.n	8002a56 <StraightLineMoveSpeedScale+0x162>
 800298a:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 800298c:	ed93 7a00 	vldr	s14, [r3]
 8002990:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299a:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 800299c:	edd3 6a01 	vldr	s13, [r3, #4]
 80029a0:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 80029a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ae:	4b79      	ldr	r3, [pc, #484]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 80029b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80029b4:	4b77      	ldr	r3, [pc, #476]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 80029b6:	ed93 6a03 	vldr	s12, [r3, #12]
 80029ba:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d0:	ee17 2a90 	vmov	r2, s15
 80029d4:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	4b6d      	ldr	r3, [pc, #436]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6d      	ldr	r2, [pc, #436]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 80029de:	60d3      	str	r3, [r2, #12]
 80029e0:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 80029e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80029e6:	4b6a      	ldr	r3, [pc, #424]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <StraightLineMoveSpeedScale+0x2a0>)
 80029f2:	edc3 7a04 	vstr	s15, [r3, #16]
 80029f6:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80029fe:	dc06      	bgt.n	8002a0e <StraightLineMoveSpeedScale+0x11a>
 8002a00:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a65      	ldr	r2, [pc, #404]	; (8002b9c <StraightLineMoveSpeedScale+0x2a8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	bfb8      	it	lt
 8002a0a:	4613      	movlt	r3, r2
 8002a0c:	e001      	b.n	8002a12 <StraightLineMoveSpeedScale+0x11e>
 8002a0e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002a12:	4a61      	ldr	r2, [pc, #388]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <StraightLineMoveSpeedScale+0x294>)
 8002a18:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	fb12 f303 	smulbb	r3, r2, r3
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b5b      	ldr	r3, [pc, #364]	; (8002ba0 <StraightLineMoveSpeedScale+0x2ac>)
 8002a32:	801a      	strh	r2, [r3, #0]
 8002a34:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <StraightLineMoveSpeedScale+0x294>)
 8002a36:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	fb12 f303 	smulbb	r3, r2, r3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <StraightLineMoveSpeedScale+0x2b0>)
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	e067      	b.n	8002b26 <StraightLineMoveSpeedScale+0x232>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d164      	bne.n	8002b26 <StraightLineMoveSpeedScale+0x232>
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	4b4b      	ldr	r3, [pc, #300]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002a6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a72:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002a74:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a80:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002a82:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a86:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002a88:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a8c:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa2:	ee17 2a90 	vmov	r2, s15
 8002aa6:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3e      	ldr	r2, [pc, #248]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002ab0:	60d3      	str	r3, [r2, #12]
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002ab4:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <StraightLineMoveSpeedScale+0x29c>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac2:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <StraightLineMoveSpeedScale+0x2b4>)
 8002ac4:	edc3 7a04 	vstr	s15, [r3, #16]
 8002ac8:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002ad0:	dc06      	bgt.n	8002ae0 <StraightLineMoveSpeedScale+0x1ec>
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <StraightLineMoveSpeedScale+0x2a8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bfb8      	it	lt
 8002adc:	4613      	movlt	r3, r2
 8002ade:	e001      	b.n	8002ae4 <StraightLineMoveSpeedScale+0x1f0>
 8002ae0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002ae4:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <StraightLineMoveSpeedScale+0x294>)
 8002aea:	f993 3000 	ldrsb.w	r3, [r3]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	fb12 f303 	smulbb	r3, r2, r3
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <StraightLineMoveSpeedScale+0x2ac>)
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <StraightLineMoveSpeedScale+0x294>)
 8002b08:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <StraightLineMoveSpeedScale+0x2a4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	fb12 f303 	smulbb	r3, r2, r3
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002b1e:	3308      	adds	r3, #8
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <StraightLineMoveSpeedScale+0x2b0>)
 8002b24:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <StraightLineMoveSpeedScale+0x2ac>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <StraightLineMoveSpeedScale+0x2b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b44:	ee17 2a90 	vmov	r2, s15
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <StraightLineMoveSpeedScale+0x2b0>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <StraightLineMoveSpeedScale+0x2b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b68:	ee17 2a90 	vmov	r2, s15
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200004f0 	.word	0x200004f0
 8002b7c:	2000024c 	.word	0x2000024c
 8002b80:	200004f2 	.word	0x200004f2
 8002b84:	200002e8 	.word	0x200002e8
 8002b88:	2000013c 	.word	0x2000013c
 8002b8c:	00000000 	.word	0x00000000
 8002b90:	200004ec 	.word	0x200004ec
 8002b94:	20000508 	.word	0x20000508
 8002b98:	20000580 	.word	0x20000580
 8002b9c:	fffffd44 	.word	0xfffffd44
 8002ba0:	200004f4 	.word	0x200004f4
 8002ba4:	200004f6 	.word	0x200004f6
 8002ba8:	20000530 	.word	0x20000530
 8002bac:	200003c0 	.word	0x200003c0

08002bb0 <RobotMoveDist>:

void RobotMoveDist(float * targetDist, const uint8_t dir, const uint8_t speedMode) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0; // reset angle for PID
 8002bc0:	4ba1      	ldr	r3, [pc, #644]	; (8002e48 <RobotMoveDist+0x298>)
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	4ba0      	ldr	r3, [pc, #640]	; (8002e4c <RobotMoveDist+0x29c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002bce:	48a0      	ldr	r0, [pc, #640]	; (8002e50 <RobotMoveDist+0x2a0>)
 8002bd0:	f7ff fcc5 	bl	800255e <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002bd4:	489f      	ldr	r0, [pc, #636]	; (8002e54 <RobotMoveDist+0x2a4>)
 8002bd6:	f7ff fcc2 	bl	800255e <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002bda:	489f      	ldr	r0, [pc, #636]	; (8002e58 <RobotMoveDist+0x2a8>)
 8002bdc:	f7ff fcbf 	bl	800255e <PIDConfigReset>
	curDistTick = 0;
 8002be0:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <RobotMoveDist+0x2ac>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fca4 	bl	8000538 <__aeabi_f2d>
 8002bf0:	a38f      	add	r3, pc, #572	; (adr r3, 8002e30 <RobotMoveDist+0x280>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fcf7 	bl	80005e8 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	a38d      	add	r3, pc, #564	; (adr r3, 8002e38 <RobotMoveDist+0x288>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fb36 	bl	8000278 <__aeabi_dsub>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	4b91      	ldr	r3, [pc, #580]	; (8002e60 <RobotMoveDist+0x2b0>)
 8002c1a:	f7fd fe0f 	bl	800083c <__aeabi_ddiv>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	4b8e      	ldr	r3, [pc, #568]	; (8002e64 <RobotMoveDist+0x2b4>)
 8002c2c:	f7fd fcdc 	bl	80005e8 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	4b8a      	ldr	r3, [pc, #552]	; (8002e68 <RobotMoveDist+0x2b8>)
 8002c3e:	f7fd fb1b 	bl	8000278 <__aeabi_dsub>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fd ff67 	bl	8000b1c <__aeabi_d2uiz>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b86      	ldr	r3, [pc, #536]	; (8002e6c <RobotMoveDist+0x2bc>)
 8002c54:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 8002c56:	f004 f84b 	bl	8006cf0 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a84      	ldr	r2, [pc, #528]	; (8002e70 <RobotMoveDist+0x2c0>)
 8002c5e:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIRECTION(dir);
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2104      	movs	r1, #4
 8002c70:	4880      	ldr	r0, [pc, #512]	; (8002e74 <RobotMoveDist+0x2c4>)
 8002c72:	f004 ffad 	bl	8007bd0 <HAL_GPIO_WritePin>
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	2108      	movs	r1, #8
 8002c86:	487b      	ldr	r0, [pc, #492]	; (8002e74 <RobotMoveDist+0x2c4>)
 8002c88:	f004 ffa2 	bl	8007bd0 <HAL_GPIO_WritePin>
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	4875      	ldr	r0, [pc, #468]	; (8002e74 <RobotMoveDist+0x2c4>)
 8002c9e:	f004 ff97 	bl	8007bd0 <HAL_GPIO_WritePin>
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2110      	movs	r1, #16
 8002cb2:	4870      	ldr	r0, [pc, #448]	; (8002e74 <RobotMoveDist+0x2c4>)
 8002cb4:	f004 ff8c 	bl	8007bd0 <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002cb8:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <RobotMoveDist+0x2c8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b6e      	ldr	r3, [pc, #440]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002cc2:	801a      	strh	r2, [r3, #0]
	do {
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002cc4:	4b6c      	ldr	r3, [pc, #432]	; (8002e78 <RobotMoveDist+0x2c8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <RobotMoveDist+0x2c8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d117      	bne.n	8002d0a <RobotMoveDist+0x15a>
 8002cda:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d806      	bhi.n	8002cf4 <RobotMoveDist+0x144>
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002ce8:	881a      	ldrh	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	e007      	b.n	8002d04 <RobotMoveDist+0x154>
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002cf6:	881a      	ldrh	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4a5e      	ldr	r2, [pc, #376]	; (8002e80 <RobotMoveDist+0x2d0>)
 8002d06:	8013      	strh	r3, [r2, #0]
 8002d08:	e016      	b.n	8002d38 <RobotMoveDist+0x188>
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d306      	bcc.n	8002d24 <RobotMoveDist+0x174>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	e007      	b.n	8002d34 <RobotMoveDist+0x184>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <RobotMoveDist+0x2d0>)
 8002d36:	8013      	strh	r3, [r2, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <RobotMoveDist+0x2cc>)
 8002d3e:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 8002d40:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <RobotMoveDist+0x2ac>)
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <RobotMoveDist+0x2d0>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <RobotMoveDist+0x2ac>)
 8002d4e:	801a      	strh	r2, [r3, #0]

		if (curDistTick >= targetDistTick) break;
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <RobotMoveDist+0x2ac>)
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <RobotMoveDist+0x2bc>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f080 80a8 	bcs.w	8002eae <RobotMoveDist+0x2fe>

		if (HAL_GetTick() - last_curTask_tick >= 10) {
 8002d5e:	f003 ffc7 	bl	8006cf0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <RobotMoveDist+0x2c0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	d9aa      	bls.n	8002cc4 <RobotMoveDist+0x114>
			if (speedMode == SPEED_MODE_T) {
 8002d6e:	78bb      	ldrb	r3, [r7, #2]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <RobotMoveDist+0x1cc>
				StraightLineMove(SPEED_MODE_T);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff fc05 	bl	8002584 <StraightLineMove>
 8002d7a:	e092      	b.n	8002ea2 <RobotMoveDist+0x2f2>
			} else {
				speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002d7c:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <RobotMoveDist+0x2ac>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <RobotMoveDist+0x2bc>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bfb8      	it	lt
 8002d8c:	425b      	neglt	r3, r3
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <RobotMoveDist+0x2d4>)
 8002d90:	fb82 1203 	smull	r1, r2, r2, r3
 8002d94:	11d2      	asrs	r2, r2, #7
 8002d96:	17db      	asrs	r3, r3, #31
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002da4:	edc3 7a00 	vstr	s15, [r3]
				if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002da8:	78bb      	ldrb	r3, [r7, #2]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d11e      	bne.n	8002dec <RobotMoveDist+0x23c>
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	dd02      	ble.n	8002dc8 <RobotMoveDist+0x218>
 8002dc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002dc6:	e00e      	b.n	8002de6 <RobotMoveDist+0x236>
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d502      	bpl.n	8002de2 <RobotMoveDist+0x232>
 8002ddc:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002de0:	e001      	b.n	8002de6 <RobotMoveDist+0x236>
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e055      	b.n	8002e98 <RobotMoveDist+0x2e8>
				else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002dec:	78bb      	ldrb	r3, [r7, #2]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d152      	bne.n	8002e98 <RobotMoveDist+0x2e8>
 8002df2:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002df4:	edd3 7a00 	vldr	s15, [r3]
 8002df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	dd02      	ble.n	8002e0c <RobotMoveDist+0x25c>
 8002e06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e0a:	e043      	b.n	8002e94 <RobotMoveDist+0x2e4>
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <RobotMoveDist+0x2d8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fb91 	bl	8000538 <__aeabi_f2d>
 8002e16:	a30a      	add	r3, pc, #40	; (adr r3, 8002e40 <RobotMoveDist+0x290>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fe56 	bl	8000acc <__aeabi_dcmplt>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d034      	beq.n	8002e90 <RobotMoveDist+0x2e0>
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <RobotMoveDist+0x2dc>)
 8002e28:	e034      	b.n	8002e94 <RobotMoveDist+0x2e4>
 8002e2a:	bf00      	nop
 8002e2c:	f3af 8000 	nop.w
 8002e30:	fc66b22a 	.word	0xfc66b22a
 8002e34:	3ff266ac 	.word	0x3ff266ac
 8002e38:	bb2526f8 	.word	0xbb2526f8
 8002e3c:	3feee3d4 	.word	0x3feee3d4
 8002e40:	9999999a 	.word	0x9999999a
 8002e44:	3fd99999 	.word	0x3fd99999
 8002e48:	200004ec 	.word	0x200004ec
 8002e4c:	200004f2 	.word	0x200004f2
 8002e50:	2000051c 	.word	0x2000051c
 8002e54:	20000508 	.word	0x20000508
 8002e58:	20000530 	.word	0x20000530
 8002e5c:	20000500 	.word	0x20000500
 8002e60:	40340000 	.word	0x40340000
 8002e64:	4094a000 	.word	0x4094a000
 8002e68:	40240000 	.word	0x40240000
 8002e6c:	20000502 	.word	0x20000502
 8002e70:	200004f8 	.word	0x200004f8
 8002e74:	40020000 	.word	0x40020000
 8002e78:	200002e8 	.word	0x200002e8
 8002e7c:	20000506 	.word	0x20000506
 8002e80:	20000504 	.word	0x20000504
 8002e84:	21195767 	.word	0x21195767
 8002e88:	20000138 	.word	0x20000138
 8002e8c:	3ecccccd 	.word	0x3ecccccd
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <RobotMoveDist+0x318>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <RobotMoveDist+0x318>)
 8002e96:	6013      	str	r3, [r2, #0]
				StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002e98:	78bb      	ldrb	r3, [r7, #2]
 8002e9a:	490b      	ldr	r1, [pc, #44]	; (8002ec8 <RobotMoveDist+0x318>)
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fd29 	bl	80028f4 <StraightLineMoveSpeedScale>
			}

			last_curTask_tick = HAL_GetTick();
 8002ea2:	f003 ff25 	bl	8006cf0 <HAL_GetTick>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <RobotMoveDist+0x31c>)
 8002eaa:	6013      	str	r3, [r2, #0]
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002eac:	e70a      	b.n	8002cc4 <RobotMoveDist+0x114>
		if (curDistTick >= targetDistTick) break;
 8002eae:	bf00      	nop
		}
	} while (1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <RobotMoveDist+0x320>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <RobotMoveDist+0x320>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000138 	.word	0x20000138
 8002ecc:	200004f8 	.word	0x200004f8
 8002ed0:	200003c0 	.word	0x200003c0
 8002ed4:	00000000 	.word	0x00000000

08002ed8 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float * targetDist, const uint8_t speedMode) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
	angleNow = 0; gyroZ = 0;
 8002ee4:	4baa      	ldr	r3, [pc, #680]	; (8003190 <RobotMoveDistObstacle+0x2b8>)
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	4ba9      	ldr	r3, [pc, #676]	; (8003194 <RobotMoveDistObstacle+0x2bc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002ef2:	48a9      	ldr	r0, [pc, #676]	; (8003198 <RobotMoveDistObstacle+0x2c0>)
 8002ef4:	f7ff fb33 	bl	800255e <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002ef8:	48a8      	ldr	r0, [pc, #672]	; (800319c <RobotMoveDistObstacle+0x2c4>)
 8002efa:	f7ff fb30 	bl	800255e <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002efe:	48a8      	ldr	r0, [pc, #672]	; (80031a0 <RobotMoveDistObstacle+0x2c8>)
 8002f00:	f7ff fb2d 	bl	800255e <PIDConfigReset>
	obsDist_US = 1000;
 8002f04:	4ba7      	ldr	r3, [pc, #668]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8002f06:	4aa8      	ldr	r2, [pc, #672]	; (80031a8 <RobotMoveDistObstacle+0x2d0>)
 8002f08:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	48a7      	ldr	r0, [pc, #668]	; (80031ac <RobotMoveDistObstacle+0x2d4>)
 8002f0e:	f006 fc91 	bl	8009834 <HAL_TIM_IC_Start_IT>
	last_curTask_tick = HAL_GetTick();
 8002f12:	f003 feed 	bl	8006cf0 <HAL_GetTick>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4aa5      	ldr	r2, [pc, #660]	; (80031b0 <RobotMoveDistObstacle+0x2d8>)
 8002f1a:	6013      	str	r3, [r2, #0]

	do {
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2110      	movs	r1, #16
 8002f20:	48a4      	ldr	r0, [pc, #656]	; (80031b4 <RobotMoveDistObstacle+0x2dc>)
 8002f22:	f004 fe55 	bl	8007bd0 <HAL_GPIO_WritePin>
	  __delay_us(&htim4, 10); // wait for 10us
 8002f26:	4ba1      	ldr	r3, [pc, #644]	; (80031ac <RobotMoveDistObstacle+0x2d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f2e:	4b9f      	ldr	r3, [pc, #636]	; (80031ac <RobotMoveDistObstacle+0x2d4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d9fa      	bls.n	8002f2e <RobotMoveDistObstacle+0x56>
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	489d      	ldr	r0, [pc, #628]	; (80031b4 <RobotMoveDistObstacle+0x2dc>)
 8002f3e:	f004 fe47 	bl	8007bd0 <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8002f42:	4b9a      	ldr	r3, [pc, #616]	; (80031ac <RobotMoveDistObstacle+0x2d4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4b98      	ldr	r3, [pc, #608]	; (80031ac <RobotMoveDistObstacle+0x2d4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0204 	orr.w	r2, r2, #4
 8002f50:	60da      	str	r2, [r3, #12]
	  osDelay(10); // give timer interrupt chance to update obsDist_US value
 8002f52:	200a      	movs	r0, #10
 8002f54:	f009 f9b2 	bl	800c2bc <osDelay>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	ed93 7a00 	vldr	s14, [r3]
 8002f5e:	4b91      	ldr	r3, [pc, #580]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6c:	ee17 3a90 	vmov	r3, s15
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0e      	blt.n	8002f92 <RobotMoveDistObstacle+0xba>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	ed93 7a00 	vldr	s14, [r3]
 8002f7a:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f88:	ee17 3a90 	vmov	r3, s15
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f340 80e7 	ble.w	8003160 <RobotMoveDistObstacle+0x288>
	  __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	ed93 7a00 	vldr	s14, [r3]
 8002f98:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f083 0301 	eor.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2104      	movs	r1, #4
 8002fba:	487f      	ldr	r0, [pc, #508]	; (80031b8 <RobotMoveDistObstacle+0x2e0>)
 8002fbc:	f004 fe08 	bl	8007bd0 <HAL_GPIO_WritePin>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	4b77      	ldr	r3, [pc, #476]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd4:	bf94      	ite	ls
 8002fd6:	2301      	movls	r3, #1
 8002fd8:	2300      	movhi	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2108      	movs	r1, #8
 8002fe0:	4875      	ldr	r0, [pc, #468]	; (80031b8 <RobotMoveDistObstacle+0x2e0>)
 8002fe2:	f004 fdf5 	bl	8007bd0 <HAL_GPIO_WritePin>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	ed93 7a00 	vldr	s14, [r3]
 8002fec:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	bf94      	ite	ls
 8002ffc:	2301      	movls	r3, #1
 8002ffe:	2300      	movhi	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f083 0301 	eor.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	2120      	movs	r1, #32
 800300e:	486a      	ldr	r0, [pc, #424]	; (80031b8 <RobotMoveDistObstacle+0x2e0>)
 8003010:	f004 fdde 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	bf94      	ite	ls
 800302a:	2301      	movls	r3, #1
 800302c:	2300      	movhi	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	2110      	movs	r1, #16
 8003034:	4860      	ldr	r0, [pc, #384]	; (80031b8 <RobotMoveDistObstacle+0x2e0>)
 8003036:	f004 fdcb 	bl	8007bd0 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 800303a:	f003 fe59 	bl	8006cf0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <RobotMoveDistObstacle+0x2d8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b13      	cmp	r3, #19
 8003048:	f67f af68 	bls.w	8002f1c <RobotMoveDistObstacle+0x44>
//		  speedScale = 1;
		  if (speedMode == SPEED_MODE_1) {
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d13f      	bne.n	80030d2 <RobotMoveDistObstacle+0x1fa>
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003052:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 8003054:	ed93 7a00 	vldr	s14, [r3]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003066:	ee17 3a90 	vmov	r3, s15
 800306a:	2b00      	cmp	r3, #0
 800306c:	bfb8      	it	lt
 800306e:	425b      	neglt	r3, r3
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <RobotMoveDistObstacle+0x2e4>)
 8003072:	fb82 1203 	smull	r1, r2, r2, r3
 8003076:	441a      	add	r2, r3
 8003078:	10d2      	asrs	r2, r2, #3
 800307a:	17db      	asrs	r3, r3, #31
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003086:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 8003088:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 800308c:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	dd02      	ble.n	80030a6 <RobotMoveDistObstacle+0x1ce>
 80030a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030a4:	e00e      	b.n	80030c4 <RobotMoveDistObstacle+0x1ec>
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80030b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	d502      	bpl.n	80030c0 <RobotMoveDistObstacle+0x1e8>
 80030ba:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80030be:	e001      	b.n	80030c4 <RobotMoveDistObstacle+0x1ec>
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3e      	ldr	r2, [pc, #248]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 80030c6:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 80030c8:	493d      	ldr	r1, [pc, #244]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff fc12 	bl	80028f4 <StraightLineMoveSpeedScale>
 80030d0:	e040      	b.n	8003154 <RobotMoveDistObstacle+0x27c>
		  } else {
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <RobotMoveDistObstacle+0x2cc>)
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e6:	ee17 3a90 	vmov	r3, s15
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bfb8      	it	lt
 80030ee:	425b      	neglt	r3, r3
 80030f0:	4a32      	ldr	r2, [pc, #200]	; (80031bc <RobotMoveDistObstacle+0x2e4>)
 80030f2:	fb82 1203 	smull	r1, r2, r2, r3
 80030f6:	441a      	add	r2, r3
 80030f8:	10d2      	asrs	r2, r2, #3
 80030fa:	17db      	asrs	r3, r3, #31
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 8003108:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dd02      	ble.n	8003126 <RobotMoveDistObstacle+0x24e>
 8003120:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003124:	e010      	b.n	8003148 <RobotMoveDistObstacle+0x270>
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fa04 	bl	8000538 <__aeabi_f2d>
 8003130:	a315      	add	r3, pc, #84	; (adr r3, 8003188 <RobotMoveDistObstacle+0x2b0>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f7fd fcc9 	bl	8000acc <__aeabi_dcmplt>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <RobotMoveDistObstacle+0x26c>
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <RobotMoveDistObstacle+0x2ec>)
 8003142:	e001      	b.n	8003148 <RobotMoveDistObstacle+0x270>
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 800314a:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 800314c:	491c      	ldr	r1, [pc, #112]	; (80031c0 <RobotMoveDistObstacle+0x2e8>)
 800314e:	2002      	movs	r0, #2
 8003150:	f7ff fbd0 	bl	80028f4 <StraightLineMoveSpeedScale>
		  }


		  last_curTask_tick = HAL_GetTick();
 8003154:	f003 fdcc 	bl	8006cf0 <HAL_GetTick>
 8003158:	4603      	mov	r3, r0
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <RobotMoveDistObstacle+0x2d8>)
 800315c:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800315e:	e6dd      	b.n	8002f1c <RobotMoveDistObstacle+0x44>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 8003160:	bf00      	nop
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <RobotMoveDistObstacle+0x2f0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	635a      	str	r2, [r3, #52]	; 0x34
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <RobotMoveDistObstacle+0x2f0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 8003172:	2104      	movs	r1, #4
 8003174:	480d      	ldr	r0, [pc, #52]	; (80031ac <RobotMoveDistObstacle+0x2d4>)
 8003176:	f006 fc85 	bl	8009a84 <HAL_TIM_IC_Stop_IT>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	f3af 8000 	nop.w
 8003188:	9999999a 	.word	0x9999999a
 800318c:	3fd99999 	.word	0x3fd99999
 8003190:	200004ec 	.word	0x200004ec
 8003194:	200004f2 	.word	0x200004f2
 8003198:	2000051c 	.word	0x2000051c
 800319c:	20000508 	.word	0x20000508
 80031a0:	20000530 	.word	0x20000530
 80031a4:	2000054c 	.word	0x2000054c
 80031a8:	447a0000 	.word	0x447a0000
 80031ac:	20000378 	.word	0x20000378
 80031b0:	200004f8 	.word	0x200004f8
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020000 	.word	0x40020000
 80031bc:	88888889 	.word	0x88888889
 80031c0:	20000138 	.word	0x20000138
 80031c4:	3ecccccd 	.word	0x3ecccccd
 80031c8:	200003c0 	.word	0x200003c0
 80031cc:	00000000 	.word	0x00000000

080031d0 <RobotMoveDistObstacle_IR>:

void RobotMoveDistObstacle_IR(float * targetDist) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
 80031d8:	4ba1      	ldr	r3, [pc, #644]	; (8003460 <RobotMoveDistObstacle_IR+0x290>)
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
 80031de:	4ba1      	ldr	r3, [pc, #644]	; (8003464 <RobotMoveDistObstacle_IR+0x294>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4ba0      	ldr	r3, [pc, #640]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 80031e6:	4aa1      	ldr	r2, [pc, #644]	; (800346c <RobotMoveDistObstacle_IR+0x29c>)
 80031e8:	601a      	str	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 80031ea:	f003 fd81 	bl	8006cf0 <HAL_GetTick>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4a9f      	ldr	r2, [pc, #636]	; (8003470 <RobotMoveDistObstacle_IR+0x2a0>)
 80031f2:	6013      	str	r3, [r2, #0]
//	__PEND_CURCMD(curCmd);

	do {
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80031f4:	489f      	ldr	r0, [pc, #636]	; (8003474 <RobotMoveDistObstacle_IR+0x2a4>)
 80031f6:	f003 fdef 	bl	8006dd8 <HAL_ADC_Start>
 80031fa:	2114      	movs	r1, #20
 80031fc:	489d      	ldr	r0, [pc, #628]	; (8003474 <RobotMoveDistObstacle_IR+0x2a4>)
 80031fe:	f003 fef0 	bl	8006fe2 <HAL_ADC_PollForConversion>
 8003202:	489c      	ldr	r0, [pc, #624]	; (8003474 <RobotMoveDistObstacle_IR+0x2a4>)
 8003204:	f003 ff78 	bl	80070f8 <HAL_ADC_GetValue>
 8003208:	4602      	mov	r2, r0
 800320a:	4b96      	ldr	r3, [pc, #600]	; (8003464 <RobotMoveDistObstacle_IR+0x294>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4413      	add	r3, r2
 8003210:	4a94      	ldr	r2, [pc, #592]	; (8003464 <RobotMoveDistObstacle_IR+0x294>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <RobotMoveDistObstacle_IR+0x290>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	4a97      	ldr	r2, [pc, #604]	; (8003478 <RobotMoveDistObstacle_IR+0x2a8>)
 800321c:	fb82 1203 	smull	r1, r2, r2, r3
 8003220:	1151      	asrs	r1, r2, #5
 8003222:	17da      	asrs	r2, r3, #31
 8003224:	1a8a      	subs	r2, r1, r2
 8003226:	2164      	movs	r1, #100	; 0x64
 8003228:	fb01 f202 	mul.w	r2, r1, r2
 800322c:	1a9a      	subs	r2, r3, r2
 800322e:	b292      	uxth	r2, r2
 8003230:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <RobotMoveDistObstacle_IR+0x290>)
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	4b8a      	ldr	r3, [pc, #552]	; (8003460 <RobotMoveDistObstacle_IR+0x290>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	2b63      	cmp	r3, #99	; 0x63
 800323a:	d129      	bne.n	8003290 <RobotMoveDistObstacle_IR+0xc0>
 800323c:	4b89      	ldr	r3, [pc, #548]	; (8003464 <RobotMoveDistObstacle_IR+0x294>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a87      	ldr	r2, [pc, #540]	; (8003460 <RobotMoveDistObstacle_IR+0x290>)
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	fbb3 f3f2 	udiv	r3, r3, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f953 	bl	80004f4 <__aeabi_ui2d>
 800324e:	a37e      	add	r3, pc, #504	; (adr r3, 8003448 <RobotMoveDistObstacle_IR+0x278>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd f810 	bl	8000278 <__aeabi_dsub>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	a17c      	add	r1, pc, #496	; (adr r1, 8003450 <RobotMoveDistObstacle_IR+0x280>)
 800325e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003262:	f7fd faeb 	bl	800083c <__aeabi_ddiv>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	f7fd fc75 	bl	8000b5c <__aeabi_d2f>
 8003272:	4603      	mov	r3, r0
 8003274:	4a7c      	ldr	r2, [pc, #496]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <RobotMoveDistObstacle_IR+0x294>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a78      	ldr	r2, [pc, #480]	; (8003460 <RobotMoveDistObstacle_IR+0x290>)
 800327e:	8812      	ldrh	r2, [r2, #0]
 8003280:	fbb3 f3f2 	udiv	r3, r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <RobotMoveDistObstacle_IR+0x2ac>)
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <RobotMoveDistObstacle_IR+0x294>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	dd1c      	ble.n	80032da <RobotMoveDistObstacle_IR+0x10a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	ed93 7a00 	vldr	s14, [r3]
 80032a6:	4b70      	ldr	r3, [pc, #448]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b4:	ee17 3a90 	vmov	r3, s15
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0e      	blt.n	80032da <RobotMoveDistObstacle_IR+0x10a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	ed93 7a00 	vldr	s14, [r3]
 80032c2:	4b69      	ldr	r3, [pc, #420]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d0:	ee17 3a90 	vmov	r3, s15
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f340 80a4 	ble.w	8003422 <RobotMoveDistObstacle_IR+0x252>

		__SET_MOTOR_DIRECTION(obsDist_IR >= *targetDist);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	ed93 7a00 	vldr	s14, [r3]
 80032e0:	4b61      	ldr	r3, [pc, #388]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	2104      	movs	r1, #4
 8003302:	485f      	ldr	r0, [pc, #380]	; (8003480 <RobotMoveDistObstacle_IR+0x2b0>)
 8003304:	f004 fc64 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	4b56      	ldr	r3, [pc, #344]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	bf94      	ite	ls
 800331e:	2301      	movls	r3, #1
 8003320:	2300      	movhi	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	2108      	movs	r1, #8
 8003328:	4855      	ldr	r0, [pc, #340]	; (8003480 <RobotMoveDistObstacle_IR+0x2b0>)
 800332a:	f004 fc51 	bl	8007bd0 <HAL_GPIO_WritePin>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	ed93 7a00 	vldr	s14, [r3]
 8003334:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	bf94      	ite	ls
 8003344:	2301      	movls	r3, #1
 8003346:	2300      	movhi	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	2120      	movs	r1, #32
 8003356:	484a      	ldr	r0, [pc, #296]	; (8003480 <RobotMoveDistObstacle_IR+0x2b0>)
 8003358:	f004 fc3a 	bl	8007bd0 <HAL_GPIO_WritePin>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	ed93 7a00 	vldr	s14, [r3]
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	bf94      	ite	ls
 8003372:	2301      	movls	r3, #1
 8003374:	2300      	movhi	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	2110      	movs	r1, #16
 800337c:	4840      	ldr	r0, [pc, #256]	; (8003480 <RobotMoveDistObstacle_IR+0x2b0>)
 800337e:	f004 fc27 	bl	8007bd0 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=10) {
 8003382:	f003 fcb5 	bl	8006cf0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <RobotMoveDistObstacle_IR+0x2a0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b09      	cmp	r3, #9
 8003390:	f67f af30 	bls.w	80031f4 <RobotMoveDistObstacle_IR+0x24>
//		  speedScale = 1;
		  speedScale = abs(obsDist_IR - *targetDist) / 15; // slow down at 15cm
 8003394:	4b34      	ldr	r3, [pc, #208]	; (8003468 <RobotMoveDistObstacle_IR+0x298>)
 8003396:	ed93 7a00 	vldr	s14, [r3]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033a8:	ee17 3a90 	vmov	r3, s15
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bfb8      	it	lt
 80033b0:	425b      	neglt	r3, r3
 80033b2:	4a34      	ldr	r2, [pc, #208]	; (8003484 <RobotMoveDistObstacle_IR+0x2b4>)
 80033b4:	fb82 1203 	smull	r1, r2, r2, r3
 80033b8:	441a      	add	r2, r3
 80033ba:	10d2      	asrs	r2, r2, #3
 80033bc:	17db      	asrs	r3, r3, #31
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <RobotMoveDistObstacle_IR+0x2b8>)
 80033ca:	edc3 7a00 	vstr	s15, [r3]
		  speedScale = speedScale > 1 ? 1 : (speedScale < 0.3 ? 0.3 : speedScale);
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <RobotMoveDistObstacle_IR+0x2b8>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	dd02      	ble.n	80033e8 <RobotMoveDistObstacle_IR+0x218>
 80033e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80033e6:	e010      	b.n	800340a <RobotMoveDistObstacle_IR+0x23a>
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <RobotMoveDistObstacle_IR+0x2b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd f8a3 	bl	8000538 <__aeabi_f2d>
 80033f2:	a319      	add	r3, pc, #100	; (adr r3, 8003458 <RobotMoveDistObstacle_IR+0x288>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f7fd fb68 	bl	8000acc <__aeabi_dcmplt>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <RobotMoveDistObstacle_IR+0x236>
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <RobotMoveDistObstacle_IR+0x2bc>)
 8003404:	e001      	b.n	800340a <RobotMoveDistObstacle_IR+0x23a>
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <RobotMoveDistObstacle_IR+0x2b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <RobotMoveDistObstacle_IR+0x2b8>)
 800340c:	6013      	str	r3, [r2, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 800340e:	491e      	ldr	r1, [pc, #120]	; (8003488 <RobotMoveDistObstacle_IR+0x2b8>)
 8003410:	2002      	movs	r0, #2
 8003412:	f7ff fa6f 	bl	80028f4 <StraightLineMoveSpeedScale>

		  last_curTask_tick = HAL_GetTick();
 8003416:	f003 fc6b 	bl	8006cf0 <HAL_GetTick>
 800341a:	4603      	mov	r3, r0
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <RobotMoveDistObstacle_IR+0x2a0>)
 800341e:	6013      	str	r3, [r2, #0]
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003420:	e6e8      	b.n	80031f4 <RobotMoveDistObstacle_IR+0x24>
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003422:	bf00      	nop
	  }
//	  osDelay(5);
	} while (1);

//  __ON_TASK_END(&htim8, prevTask, curTask);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <RobotMoveDistObstacle_IR+0x2c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	; 0x34
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <RobotMoveDistObstacle_IR+0x2c0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_ADC_Stop(&hadc1);
 8003434:	480f      	ldr	r0, [pc, #60]	; (8003474 <RobotMoveDistObstacle_IR+0x2a4>)
 8003436:	f003 fda1 	bl	8006f7c <HAL_ADC_Stop>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	f3af 8000 	nop.w
 8003448:	fb5723d3 	.word	0xfb5723d3
 800344c:	407046c5 	.word	0x407046c5
 8003450:	324c8366 	.word	0x324c8366
 8003454:	40d90b34 	.word	0x40d90b34
 8003458:	33333333 	.word	0x33333333
 800345c:	3fd33333 	.word	0x3fd33333
 8003460:	20000550 	.word	0x20000550
 8003464:	20000554 	.word	0x20000554
 8003468:	20000548 	.word	0x20000548
 800346c:	447a0000 	.word	0x447a0000
 8003470:	200004f8 	.word	0x200004f8
 8003474:	200001bc 	.word	0x200001bc
 8003478:	51eb851f 	.word	0x51eb851f
 800347c:	20000544 	.word	0x20000544
 8003480:	40020000 	.word	0x40020000
 8003484:	88888889 	.word	0x88888889
 8003488:	20000138 	.word	0x20000138
 800348c:	3e99999a 	.word	0x3e99999a
 8003490:	200003c0 	.word	0x200003c0
 8003494:	00000000 	.word	0x00000000

08003498 <RobotTurn>:

void RobotTurn(float * targetAngle) {
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af04      	add	r7, sp, #16
 800349e:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <RobotTurn+0x138>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <RobotTurn+0x13c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 80034ae:	f003 fc1f 	bl	8006cf0 <HAL_GetTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a48      	ldr	r2, [pc, #288]	; (80035d8 <RobotTurn+0x140>)
 80034b6:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80034b8:	f003 fc1a 	bl	8006cf0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <RobotTurn+0x140>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	d9f7      	bls.n	80034b8 <RobotTurn+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80034c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034cc:	9302      	str	r3, [sp, #8]
 80034ce:	2302      	movs	r3, #2
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <RobotTurn+0x144>)
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2301      	movs	r3, #1
 80034d8:	2237      	movs	r2, #55	; 0x37
 80034da:	21d0      	movs	r1, #208	; 0xd0
 80034dc:	4840      	ldr	r0, [pc, #256]	; (80035e0 <RobotTurn+0x148>)
 80034de:	f004 fde7 	bl	80080b0 <HAL_I2C_Mem_Read>
 80034e2:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <RobotTurn+0x144>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <RobotTurn+0x144>)
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	b21a      	sxth	r2, r3
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <RobotTurn+0x13c>)
 80034f6:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80034f8:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <RobotTurn+0x138>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f81b 	bl	8000538 <__aeabi_f2d>
 8003502:	4604      	mov	r4, r0
 8003504:	460d      	mov	r5, r1
 8003506:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <RobotTurn+0x13c>)
 8003508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f801 	bl	8000514 <__aeabi_i2d>
 8003512:	a32b      	add	r3, pc, #172	; (adr r3, 80035c0 <RobotTurn+0x128>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f990 	bl	800083c <__aeabi_ddiv>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	a328      	add	r3, pc, #160	; (adr r3, 80035c8 <RobotTurn+0x130>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fd f85d 	bl	80005e8 <__aeabi_dmul>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fc fea1 	bl	800027c <__adddf3>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb0b 	bl	8000b5c <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <RobotTurn+0x138>)
 800354a:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <RobotTurn+0x138>)
 800354e:	ed93 7a00 	vldr	s14, [r3]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003560:	ee17 3a90 	vmov	r3, s15
 8003564:	2b00      	cmp	r3, #0
 8003566:	db0d      	blt.n	8003584 <RobotTurn+0xec>
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <RobotTurn+0x138>)
 800356a:	ed93 7a00 	vldr	s14, [r3]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800357c:	ee17 3a90 	vmov	r3, s15
 8003580:	2b00      	cmp	r3, #0
 8003582:	dd05      	ble.n	8003590 <RobotTurn+0xf8>
		  last_curTask_tick = HAL_GetTick();
 8003584:	f003 fbb4 	bl	8006cf0 <HAL_GetTick>
 8003588:	4603      	mov	r3, r0
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <RobotTurn+0x140>)
 800358c:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 800358e:	e793      	b.n	80034b8 <RobotTurn+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003590:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <RobotTurn+0x14c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	635a      	str	r2, [r3, #52]	; 0x34
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <RobotTurn+0x14c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN(&htim1);
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <RobotTurn+0x150>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	224a      	movs	r2, #74	; 0x4a
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
 80035aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035ae:	f003 fbab 	bl	8006d08 <HAL_Delay>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	f3af 8000 	nop.w
 80035c0:	66666666 	.word	0x66666666
 80035c4:	40306666 	.word	0x40306666
 80035c8:	47ae147b 	.word	0x47ae147b
 80035cc:	3f847ae1 	.word	0x3f847ae1
 80035d0:	200004ec 	.word	0x200004ec
 80035d4:	200004f2 	.word	0x200004f2
 80035d8:	200004f8 	.word	0x200004f8
 80035dc:	200004f0 	.word	0x200004f0
 80035e0:	2000024c 	.word	0x2000024c
 80035e4:	200003c0 	.word	0x200003c0
 80035e8:	200002a0 	.word	0x200002a0
 80035ec:	00000000 	.word	0x00000000

080035f0 <RobotTurnFastest>:

void RobotTurnFastest(float * targetAngle) {
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <RobotTurnFastest+0x130>)
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <RobotTurnFastest+0x134>)
 8003602:	2200      	movs	r2, #0
 8003604:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8003606:	f003 fb73 	bl	8006cf0 <HAL_GetTick>
 800360a:	4603      	mov	r3, r0
 800360c:	4a46      	ldr	r2, [pc, #280]	; (8003728 <RobotTurnFastest+0x138>)
 800360e:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003610:	f003 fb6e 	bl	8006cf0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	4b44      	ldr	r3, [pc, #272]	; (8003728 <RobotTurnFastest+0x138>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b09      	cmp	r3, #9
 800361e:	d9f7      	bls.n	8003610 <RobotTurnFastest+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	2302      	movs	r3, #2
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <RobotTurnFastest+0x13c>)
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2301      	movs	r3, #1
 8003630:	2237      	movs	r2, #55	; 0x37
 8003632:	21d0      	movs	r1, #208	; 0xd0
 8003634:	483e      	ldr	r0, [pc, #248]	; (8003730 <RobotTurnFastest+0x140>)
 8003636:	f004 fd3b 	bl	80080b0 <HAL_I2C_Mem_Read>
 800363a:	4b3c      	ldr	r3, [pc, #240]	; (800372c <RobotTurnFastest+0x13c>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	b21a      	sxth	r2, r3
 8003642:	4b3a      	ldr	r3, [pc, #232]	; (800372c <RobotTurnFastest+0x13c>)
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	b21b      	sxth	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b21a      	sxth	r2, r3
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <RobotTurnFastest+0x134>)
 800364e:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <RobotTurnFastest+0x130>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff6f 	bl	8000538 <__aeabi_f2d>
 800365a:	4604      	mov	r4, r0
 800365c:	460d      	mov	r5, r1
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <RobotTurnFastest+0x134>)
 8003660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff55 	bl	8000514 <__aeabi_i2d>
 800366a:	a329      	add	r3, pc, #164	; (adr r3, 8003710 <RobotTurnFastest+0x120>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f7fd f8e4 	bl	800083c <__aeabi_ddiv>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	a326      	add	r3, pc, #152	; (adr r3, 8003718 <RobotTurnFastest+0x128>)
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f7fc ffb1 	bl	80005e8 <__aeabi_dmul>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4620      	mov	r0, r4
 800368c:	4629      	mov	r1, r5
 800368e:	f7fc fdf5 	bl	800027c <__adddf3>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7fd fa5f 	bl	8000b5c <__aeabi_d2f>
 800369e:	4603      	mov	r3, r0
 80036a0:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <RobotTurnFastest+0x130>)
 80036a2:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <RobotTurnFastest+0x130>)
 80036a6:	ed93 7a00 	vldr	s14, [r3]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b8:	ee17 3a90 	vmov	r3, s15
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db0d      	blt.n	80036dc <RobotTurnFastest+0xec>
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <RobotTurnFastest+0x130>)
 80036c2:	ed93 7a00 	vldr	s14, [r3]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	edd3 7a00 	vldr	s15, [r3]
 80036cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d4:	ee17 3a90 	vmov	r3, s15
 80036d8:	2b00      	cmp	r3, #0
 80036da:	dd05      	ble.n	80036e8 <RobotTurnFastest+0xf8>
		  last_curTask_tick = HAL_GetTick();
 80036dc:	f003 fb08 	bl	8006cf0 <HAL_GetTick>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4a11      	ldr	r2, [pc, #68]	; (8003728 <RobotTurnFastest+0x138>)
 80036e4:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80036e6:	e793      	b.n	8003610 <RobotTurnFastest+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 80036e8:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <RobotTurnFastest+0x144>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <RobotTurnFastest+0x144>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN_FAST(&htim1);
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <RobotTurnFastest+0x148>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	224a      	movs	r2, #74	; 0x4a
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
 8003702:	20c8      	movs	r0, #200	; 0xc8
 8003704:	f003 fb00 	bl	8006d08 <HAL_Delay>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bdb0      	pop	{r4, r5, r7, pc}
 8003710:	66666666 	.word	0x66666666
 8003714:	40306666 	.word	0x40306666
 8003718:	47ae147b 	.word	0x47ae147b
 800371c:	3f847ae1 	.word	0x3f847ae1
 8003720:	200004ec 	.word	0x200004ec
 8003724:	200004f2 	.word	0x200004f2
 8003728:	200004f8 	.word	0x200004f8
 800372c:	200004f0 	.word	0x200004f0
 8003730:	2000024c 	.word	0x2000024c
 8003734:	200003c0 	.word	0x200003c0
 8003738:	200002a0 	.word	0x200002a0

0800373c <FASTESTPATH_TURN_RIGHT_90>:
	__SET_MOTOR_DIRECTION(1);
	__SET_MOTOR_DUTY(&htim8, 1000, 2000);
	RobotTurn(&targetAngle);
}

void FASTESTPATH_TURN_RIGHT_90() {
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
	targetAngle = -86;
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <FASTESTPATH_TURN_RIGHT_90+0x60>)
 8003742:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <FASTESTPATH_TURN_RIGHT_90+0x64>)
 8003744:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <FASTESTPATH_TURN_RIGHT_90+0x68>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2273      	movs	r2, #115	; 0x73
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
 800374e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003752:	f003 fad9 	bl	8006d08 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 8003756:	2200      	movs	r2, #0
 8003758:	2104      	movs	r1, #4
 800375a:	4813      	ldr	r0, [pc, #76]	; (80037a8 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 800375c:	f004 fa38 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003760:	2201      	movs	r2, #1
 8003762:	2108      	movs	r1, #8
 8003764:	4810      	ldr	r0, [pc, #64]	; (80037a8 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 8003766:	f004 fa33 	bl	8007bd0 <HAL_GPIO_WritePin>
 800376a:	2200      	movs	r2, #0
 800376c:	2120      	movs	r1, #32
 800376e:	480e      	ldr	r0, [pc, #56]	; (80037a8 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 8003770:	f004 fa2e 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003774:	2201      	movs	r2, #1
 8003776:	2110      	movs	r1, #16
 8003778:	480b      	ldr	r0, [pc, #44]	; (80037a8 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 800377a:	f004 fa29 	bl	8007bd0 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <FASTESTPATH_TURN_RIGHT_90+0x70>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003786:	635a      	str	r2, [r3, #52]	; 0x34
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <FASTESTPATH_TURN_RIGHT_90+0x70>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003790:	639a      	str	r2, [r3, #56]	; 0x38

	RobotTurn(&targetAngle);
 8003792:	4802      	ldr	r0, [pc, #8]	; (800379c <FASTESTPATH_TURN_RIGHT_90+0x60>)
 8003794:	f7ff fe80 	bl	8003498 <RobotTurn>
}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200004e8 	.word	0x200004e8
 80037a0:	c2ac0000 	.word	0xc2ac0000
 80037a4:	200002a0 	.word	0x200002a0
 80037a8:	40020000 	.word	0x40020000
 80037ac:	200003c0 	.word	0x200003c0

080037b0 <FASTESTPATH_TURN_RIGHT_180>:

void FASTESTPATH_TURN_RIGHT_180() {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	targetAngle = -176;
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <FASTESTPATH_TURN_RIGHT_180+0x64>)
 80037b8:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <FASTESTPATH_TURN_RIGHT_180+0x68>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2273      	movs	r2, #115	; 0x73
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
 80037c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037c6:	f003 fa9f 	bl	8006d08 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2104      	movs	r1, #4
 80037ce:	4813      	ldr	r0, [pc, #76]	; (800381c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80037d0:	f004 f9fe 	bl	8007bd0 <HAL_GPIO_WritePin>
 80037d4:	2201      	movs	r2, #1
 80037d6:	2108      	movs	r1, #8
 80037d8:	4810      	ldr	r0, [pc, #64]	; (800381c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80037da:	f004 f9f9 	bl	8007bd0 <HAL_GPIO_WritePin>
 80037de:	2200      	movs	r2, #0
 80037e0:	2120      	movs	r1, #32
 80037e2:	480e      	ldr	r0, [pc, #56]	; (800381c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80037e4:	f004 f9f4 	bl	8007bd0 <HAL_GPIO_WritePin>
 80037e8:	2201      	movs	r2, #1
 80037ea:	2110      	movs	r1, #16
 80037ec:	480b      	ldr	r0, [pc, #44]	; (800381c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 80037ee:	f004 f9ef 	bl	8007bd0 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurn(&targetAngle);
 8003806:	4802      	ldr	r0, [pc, #8]	; (8003810 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 8003808:	f7ff fe46 	bl	8003498 <RobotTurn>
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200004e8 	.word	0x200004e8
 8003814:	c3300000 	.word	0xc3300000
 8003818:	200002a0 	.word	0x200002a0
 800381c:	40020000 	.word	0x40020000
 8003820:	200003c0 	.word	0x200003c0

08003824 <FASTESTPATH_TURN_LEFT_90X>:

void FASTESTPATH_TURN_LEFT_90X(uint8_t * turnSize) { // x3
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 800382c:	2200      	movs	r2, #0
 800382e:	2104      	movs	r1, #4
 8003830:	4825      	ldr	r0, [pc, #148]	; (80038c8 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003832:	f004 f9cd 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003836:	2201      	movs	r2, #1
 8003838:	2108      	movs	r1, #8
 800383a:	4823      	ldr	r0, [pc, #140]	; (80038c8 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 800383c:	f004 f9c8 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003840:	2200      	movs	r2, #0
 8003842:	2120      	movs	r1, #32
 8003844:	4820      	ldr	r0, [pc, #128]	; (80038c8 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003846:	f004 f9c3 	bl	8007bd0 <HAL_GPIO_WritePin>
 800384a:	2201      	movs	r2, #1
 800384c:	2110      	movs	r1, #16
 800384e:	481e      	ldr	r0, [pc, #120]	; (80038c8 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 8003850:	f004 f9be 	bl	8007bd0 <HAL_GPIO_WritePin>
	switch (*turnSize) {
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d001      	beq.n	8003860 <FASTESTPATH_TURN_LEFT_90X+0x3c>
 800385c:	2b03      	cmp	r3, #3
 800385e:	d115      	bne.n	800388c <FASTESTPATH_TURN_LEFT_90X+0x68>
	case 1:
	case 3:
		targetAngle = 83;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 8003864:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 50);
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2232      	movs	r2, #50	; 0x32
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
 800386e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003872:	f003 fa49 	bl	8006d08 <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800387e:	635a      	str	r2, [r3, #52]	; 0x34
 8003880:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800388a:	e015      	b.n	80038b8 <FASTESTPATH_TURN_LEFT_90X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = 85;
		targetAngle = 83;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 800388e:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 8003890:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 52);
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2234      	movs	r2, #52	; 0x34
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
 800389a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800389e:	f003 fa33 	bl	8006d08 <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
		__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f640 52ac 	movw	r2, #3500	; 0xdac
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80038b6:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 80038ba:	f7ff fe99 	bl	80035f0 <RobotTurnFastest>

}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40020000 	.word	0x40020000
 80038cc:	200004e8 	.word	0x200004e8
 80038d0:	42a60000 	.word	0x42a60000
 80038d4:	200002a0 	.word	0x200002a0
 80038d8:	200003c0 	.word	0x200003c0

080038dc <FASTESTPATH_TURN_LEFT_90X_RETURN>:

void FASTESTPATH_TURN_LEFT_90X_RETURN(uint8_t * turnSize) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2104      	movs	r1, #4
 80038e8:	4830      	ldr	r0, [pc, #192]	; (80039ac <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80038ea:	f004 f971 	bl	8007bd0 <HAL_GPIO_WritePin>
 80038ee:	2201      	movs	r2, #1
 80038f0:	2108      	movs	r1, #8
 80038f2:	482e      	ldr	r0, [pc, #184]	; (80039ac <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80038f4:	f004 f96c 	bl	8007bd0 <HAL_GPIO_WritePin>
 80038f8:	2200      	movs	r2, #0
 80038fa:	2120      	movs	r1, #32
 80038fc:	482b      	ldr	r0, [pc, #172]	; (80039ac <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 80038fe:	f004 f967 	bl	8007bd0 <HAL_GPIO_WritePin>
 8003902:	2201      	movs	r2, #1
 8003904:	2110      	movs	r1, #16
 8003906:	4829      	ldr	r0, [pc, #164]	; (80039ac <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003908:	f004 f962 	bl	8007bd0 <HAL_GPIO_WritePin>
		switch (*turnSize) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <FASTESTPATH_TURN_LEFT_90X_RETURN+0x3e>
 8003914:	2b03      	cmp	r3, #3
 8003916:	d016      	beq.n	8003946 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x6a>
 8003918:	e02b      	b.n	8003972 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x96>
		case 1:
			targetAngle = 83;
 800391a:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 800391c:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd8>)
 800391e:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2232      	movs	r2, #50	; 0x32
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
 8003928:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800392c:	f003 f9ec 	bl	8006d08 <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 8003930:	4b22      	ldr	r3, [pc, #136]	; (80039bc <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003938:	635a      	str	r2, [r3, #52]	; 0x34
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003944:	e02b      	b.n	800399e <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 3:
			targetAngle = 85;
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe4>)
 800394a:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2232      	movs	r2, #50	; 0x32
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
 8003954:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003958:	f003 f9d6 	bl	8006d08 <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003964:	635a      	str	r2, [r3, #52]	; 0x34
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003970:	e015      	b.n	800399e <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 2:
		case 4:
		default:
	//		targetAngle = 85;
			targetAngle = 79;
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe8>)
 8003976:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 52);
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2234      	movs	r2, #52	; 0x34
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
 8003980:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003984:	f003 f9c0 	bl	8006d08 <HAL_Delay>
	//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
			__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f640 52ac 	movw	r2, #3500	; 0xdac
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800399c:	bf00      	nop
		}
		RobotTurnFastest(&targetAngle);
 800399e:	4804      	ldr	r0, [pc, #16]	; (80039b0 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 80039a0:	f7ff fe26 	bl	80035f0 <RobotTurnFastest>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40020000 	.word	0x40020000
 80039b0:	200004e8 	.word	0x200004e8
 80039b4:	42a60000 	.word	0x42a60000
 80039b8:	200002a0 	.word	0x200002a0
 80039bc:	200003c0 	.word	0x200003c0
 80039c0:	42aa0000 	.word	0x42aa0000
 80039c4:	429e0000 	.word	0x429e0000

080039c8 <FASTESTPATH_TURN_RIGHT_180X>:
//		break;
//	}
//	RobotTurnFastest(&targetAngle);
//}

void FASTESTPATH_TURN_RIGHT_180X(uint8_t * turnSize) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2104      	movs	r1, #4
 80039d4:	4825      	ldr	r0, [pc, #148]	; (8003a6c <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 80039d6:	f004 f8fb 	bl	8007bd0 <HAL_GPIO_WritePin>
 80039da:	2201      	movs	r2, #1
 80039dc:	2108      	movs	r1, #8
 80039de:	4823      	ldr	r0, [pc, #140]	; (8003a6c <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 80039e0:	f004 f8f6 	bl	8007bd0 <HAL_GPIO_WritePin>
 80039e4:	2200      	movs	r2, #0
 80039e6:	2120      	movs	r1, #32
 80039e8:	4820      	ldr	r0, [pc, #128]	; (8003a6c <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 80039ea:	f004 f8f1 	bl	8007bd0 <HAL_GPIO_WritePin>
 80039ee:	2201      	movs	r2, #1
 80039f0:	2110      	movs	r1, #16
 80039f2:	481e      	ldr	r0, [pc, #120]	; (8003a6c <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 80039f4:	f004 f8ec 	bl	8007bd0 <HAL_GPIO_WritePin>
	switch (*turnSize) {
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d001      	beq.n	8003a04 <FASTESTPATH_TURN_RIGHT_180X+0x3c>
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d115      	bne.n	8003a30 <FASTESTPATH_TURN_RIGHT_180X+0x68>
	case 1:
	case 3:
		targetAngle = -172;
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <FASTESTPATH_TURN_RIGHT_180X+0xac>)
 8003a08:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 115);
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2273      	movs	r2, #115	; 0x73
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
 8003a12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a16:	f003 f977 	bl	8006d08 <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 3500, 2000);
 8003a1a:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003a2e:	e015      	b.n	8003a5c <FASTESTPATH_TURN_RIGHT_180X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = -176;
		targetAngle = -170;
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <FASTESTPATH_TURN_RIGHT_180X+0xb8>)
 8003a34:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 98);
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2262      	movs	r2, #98	; 0x62
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a42:	f003 f961 	bl	8006d08 <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2700, 2500);
		__SET_MOTOR_DUTY(&htim8, 3500, 3240);
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f640 42a8 	movw	r2, #3240	; 0xca8
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003a5a:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 8003a5c:	4804      	ldr	r0, [pc, #16]	; (8003a70 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003a5e:	f7ff fdc7 	bl	80035f0 <RobotTurnFastest>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	200004e8 	.word	0x200004e8
 8003a74:	c32c0000 	.word	0xc32c0000
 8003a78:	200002a0 	.word	0x200002a0
 8003a7c:	200003c0 	.word	0x200003c0
 8003a80:	c32a0000 	.word	0xc32a0000
 8003a84:	00000000 	.word	0x00000000

08003a88 <RobotMoveUntilIROvershoot>:

void RobotMoveUntilIROvershoot() {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	obsDist_IR = 0;
 8003a8c:	4b46      	ldr	r3, [pc, #280]	; (8003ba8 <RobotMoveUntilIROvershoot+0x120>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003a94:	4b45      	ldr	r3, [pc, #276]	; (8003bac <RobotMoveUntilIROvershoot+0x124>)
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <RobotMoveUntilIROvershoot+0x128>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003aa2:	f003 f925 	bl	8006cf0 <HAL_GetTick>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <RobotMoveUntilIROvershoot+0x12c>)
 8003aaa:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003aac:	4842      	ldr	r0, [pc, #264]	; (8003bb8 <RobotMoveUntilIROvershoot+0x130>)
 8003aae:	f003 f993 	bl	8006dd8 <HAL_ADC_Start>
 8003ab2:	2114      	movs	r1, #20
 8003ab4:	4840      	ldr	r0, [pc, #256]	; (8003bb8 <RobotMoveUntilIROvershoot+0x130>)
 8003ab6:	f003 fa94 	bl	8006fe2 <HAL_ADC_PollForConversion>
 8003aba:	483f      	ldr	r0, [pc, #252]	; (8003bb8 <RobotMoveUntilIROvershoot+0x130>)
 8003abc:	f003 fb1c 	bl	80070f8 <HAL_ADC_GetValue>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <RobotMoveUntilIROvershoot+0x134>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <RobotMoveUntilIROvershoot+0x134>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b3c      	ldr	r3, [pc, #240]	; (8003bc0 <RobotMoveUntilIROvershoot+0x138>)
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	4a3c      	ldr	r2, [pc, #240]	; (8003bc4 <RobotMoveUntilIROvershoot+0x13c>)
 8003ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad8:	1151      	asrs	r1, r2, #5
 8003ada:	17da      	asrs	r2, r3, #31
 8003adc:	1a8a      	subs	r2, r1, r2
 8003ade:	2164      	movs	r1, #100	; 0x64
 8003ae0:	fb01 f202 	mul.w	r2, r1, r2
 8003ae4:	1a9a      	subs	r2, r3, r2
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <RobotMoveUntilIROvershoot+0x138>)
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	4b34      	ldr	r3, [pc, #208]	; (8003bc0 <RobotMoveUntilIROvershoot+0x138>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	2b63      	cmp	r3, #99	; 0x63
 8003af2:	d129      	bne.n	8003b48 <RobotMoveUntilIROvershoot+0xc0>
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <RobotMoveUntilIROvershoot+0x134>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a31      	ldr	r2, [pc, #196]	; (8003bc0 <RobotMoveUntilIROvershoot+0x138>)
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fc fcf7 	bl	80004f4 <__aeabi_ui2d>
 8003b06:	a324      	add	r3, pc, #144	; (adr r3, 8003b98 <RobotMoveUntilIROvershoot+0x110>)
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f7fc fbb4 	bl	8000278 <__aeabi_dsub>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	a122      	add	r1, pc, #136	; (adr r1, 8003ba0 <RobotMoveUntilIROvershoot+0x118>)
 8003b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b1a:	f7fc fe8f 	bl	800083c <__aeabi_ddiv>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fd f819 	bl	8000b5c <__aeabi_d2f>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <RobotMoveUntilIROvershoot+0x120>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <RobotMoveUntilIROvershoot+0x134>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <RobotMoveUntilIROvershoot+0x138>)
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <RobotMoveUntilIROvershoot+0x140>)
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <RobotMoveUntilIROvershoot+0x134>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR > 40) break;
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <RobotMoveUntilIROvershoot+0x120>)
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003bcc <RobotMoveUntilIROvershoot+0x144>
 8003b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	dc10      	bgt.n	8003b7e <RobotMoveUntilIROvershoot+0xf6>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003b5c:	f003 f8c8 	bl	8006cf0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RobotMoveUntilIROvershoot+0x12c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	d99f      	bls.n	8003aac <RobotMoveUntilIROvershoot+0x24>
			  StraightLineMove(SPEED_MODE_2);
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7fe fd09 	bl	8002584 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003b72:	f003 f8bd 	bl	8006cf0 <HAL_GetTick>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <RobotMoveUntilIROvershoot+0x12c>)
 8003b7a:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003b7c:	e796      	b.n	8003aac <RobotMoveUntilIROvershoot+0x24>
		  if (obsDist_IR > 40) break;
 8003b7e:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <RobotMoveUntilIROvershoot+0x148>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	635a      	str	r2, [r3, #52]	; 0x34
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <RobotMoveUntilIROvershoot+0x148>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	f3af 8000 	nop.w
 8003b98:	fb5723d3 	.word	0xfb5723d3
 8003b9c:	407046c5 	.word	0x407046c5
 8003ba0:	324c8366 	.word	0x324c8366
 8003ba4:	40d90b34 	.word	0x40d90b34
 8003ba8:	20000548 	.word	0x20000548
 8003bac:	200004ec 	.word	0x200004ec
 8003bb0:	200004f2 	.word	0x200004f2
 8003bb4:	200004f8 	.word	0x200004f8
 8003bb8:	200001bc 	.word	0x200001bc
 8003bbc:	20000554 	.word	0x20000554
 8003bc0:	20000550 	.word	0x20000550
 8003bc4:	51eb851f 	.word	0x51eb851f
 8003bc8:	20000544 	.word	0x20000544
 8003bcc:	42200000 	.word	0x42200000
 8003bd0:	200003c0 	.word	0x200003c0
 8003bd4:	00000000 	.word	0x00000000

08003bd8 <RobotMoveUntilIRHit>:

void RobotMoveUntilIRHit() {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	obsDist_IR = 1000;
 8003bdc:	4b46      	ldr	r3, [pc, #280]	; (8003cf8 <RobotMoveUntilIRHit+0x120>)
 8003bde:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <RobotMoveUntilIRHit+0x124>)
 8003be0:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <RobotMoveUntilIRHit+0x128>)
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <RobotMoveUntilIRHit+0x12c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003bf0:	f003 f87e 	bl	8006cf0 <HAL_GetTick>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4a44      	ldr	r2, [pc, #272]	; (8003d08 <RobotMoveUntilIRHit+0x130>)
 8003bf8:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003bfa:	4844      	ldr	r0, [pc, #272]	; (8003d0c <RobotMoveUntilIRHit+0x134>)
 8003bfc:	f003 f8ec 	bl	8006dd8 <HAL_ADC_Start>
 8003c00:	2114      	movs	r1, #20
 8003c02:	4842      	ldr	r0, [pc, #264]	; (8003d0c <RobotMoveUntilIRHit+0x134>)
 8003c04:	f003 f9ed 	bl	8006fe2 <HAL_ADC_PollForConversion>
 8003c08:	4840      	ldr	r0, [pc, #256]	; (8003d0c <RobotMoveUntilIRHit+0x134>)
 8003c0a:	f003 fa75 	bl	80070f8 <HAL_ADC_GetValue>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <RobotMoveUntilIRHit+0x138>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	4a3e      	ldr	r2, [pc, #248]	; (8003d10 <RobotMoveUntilIRHit+0x138>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <RobotMoveUntilIRHit+0x13c>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <RobotMoveUntilIRHit+0x140>)
 8003c22:	fb82 1203 	smull	r1, r2, r2, r3
 8003c26:	1151      	asrs	r1, r2, #5
 8003c28:	17da      	asrs	r2, r3, #31
 8003c2a:	1a8a      	subs	r2, r1, r2
 8003c2c:	2164      	movs	r1, #100	; 0x64
 8003c2e:	fb01 f202 	mul.w	r2, r1, r2
 8003c32:	1a9a      	subs	r2, r3, r2
 8003c34:	b292      	uxth	r2, r2
 8003c36:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <RobotMoveUntilIRHit+0x13c>)
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <RobotMoveUntilIRHit+0x13c>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	2b63      	cmp	r3, #99	; 0x63
 8003c40:	d129      	bne.n	8003c96 <RobotMoveUntilIRHit+0xbe>
 8003c42:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <RobotMoveUntilIRHit+0x138>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a33      	ldr	r2, [pc, #204]	; (8003d14 <RobotMoveUntilIRHit+0x13c>)
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fc50 	bl	80004f4 <__aeabi_ui2d>
 8003c54:	a324      	add	r3, pc, #144	; (adr r3, 8003ce8 <RobotMoveUntilIRHit+0x110>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fb0d 	bl	8000278 <__aeabi_dsub>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	a123      	add	r1, pc, #140	; (adr r1, 8003cf0 <RobotMoveUntilIRHit+0x118>)
 8003c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c68:	f7fc fde8 	bl	800083c <__aeabi_ddiv>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fc ff72 	bl	8000b5c <__aeabi_d2f>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <RobotMoveUntilIRHit+0x120>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <RobotMoveUntilIRHit+0x138>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <RobotMoveUntilIRHit+0x13c>)
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <RobotMoveUntilIRHit+0x144>)
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <RobotMoveUntilIRHit+0x138>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR < 40) break;
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <RobotMoveUntilIRHit+0x120>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003d20 <RobotMoveUntilIRHit+0x148>
 8003ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca8:	d410      	bmi.n	8003ccc <RobotMoveUntilIRHit+0xf4>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003caa:	f003 f821 	bl	8006cf0 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <RobotMoveUntilIRHit+0x130>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	d99f      	bls.n	8003bfa <RobotMoveUntilIRHit+0x22>
			  StraightLineMove(SPEED_MODE_2);
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f7fe fc62 	bl	8002584 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003cc0:	f003 f816 	bl	8006cf0 <HAL_GetTick>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <RobotMoveUntilIRHit+0x130>)
 8003cc8:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003cca:	e796      	b.n	8003bfa <RobotMoveUntilIRHit+0x22>
		  if (obsDist_IR < 40) break;
 8003ccc:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <RobotMoveUntilIRHit+0x14c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <RobotMoveUntilIRHit+0x14c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	fb5723d3 	.word	0xfb5723d3
 8003cec:	407046c5 	.word	0x407046c5
 8003cf0:	324c8366 	.word	0x324c8366
 8003cf4:	40d90b34 	.word	0x40d90b34
 8003cf8:	20000548 	.word	0x20000548
 8003cfc:	447a0000 	.word	0x447a0000
 8003d00:	200004ec 	.word	0x200004ec
 8003d04:	200004f2 	.word	0x200004f2
 8003d08:	200004f8 	.word	0x200004f8
 8003d0c:	200001bc 	.word	0x200001bc
 8003d10:	20000554 	.word	0x20000554
 8003d14:	20000550 	.word	0x20000550
 8003d18:	51eb851f 	.word	0x51eb851f
 8003d1c:	20000544 	.word	0x20000544
 8003d20:	42200000 	.word	0x42200000
 8003d24:	200003c0 	.word	0x200003c0

08003d28 <runOledTask>:
  * @retval None
  */
/* USER CODE END Header_runOledTask */
float angleTemp;
void runOledTask(void *argument)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	snprintf(ch, sizeof(ch), "%-3d%%", (int)batteryVal);
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <runOledTask+0x98>)
 8003d32:	edd3 7a00 	vldr	s15, [r3]
 8003d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d3a:	ee17 3a90 	vmov	r3, s15
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <runOledTask+0x9c>)
 8003d40:	2110      	movs	r1, #16
 8003d42:	4821      	ldr	r0, [pc, #132]	; (8003dc8 <runOledTask+0xa0>)
 8003d44:	f00a ff32 	bl	800ebac <sniprintf>
//	OLED_ShowString(0, 0, (char *) ch);
	angleTemp = angleNow / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <runOledTask+0xa4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fbf3 	bl	8000538 <__aeabi_f2d>
 8003d52:	a317      	add	r3, pc, #92	; (adr r3, 8003db0 <runOledTask+0x88>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f7fc fd70 	bl	800083c <__aeabi_ddiv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	a314      	add	r3, pc, #80	; (adr r3, 8003db8 <runOledTask+0x90>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fc3d 	bl	80005e8 <__aeabi_dmul>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7fc fef1 	bl	8000b5c <__aeabi_d2f>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <runOledTask+0xa8>)
 8003d7e:	6013      	str	r3, [r2, #0]
	snprintf(ch, sizeof(ch), "angle:%-4d", (int) angleTemp);
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <runOledTask+0xa8>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d8a:	ee17 3a90 	vmov	r3, s15
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <runOledTask+0xac>)
 8003d90:	2110      	movs	r1, #16
 8003d92:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <runOledTask+0xa0>)
 8003d94:	f00a ff0a 	bl	800ebac <sniprintf>
	OLED_ShowString(0, 8, (char *) ch);
 8003d98:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <runOledTask+0xa0>)
 8003d9a:	2108      	movs	r1, #8
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f002 faf3 	bl	8006388 <OLED_ShowString>
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "obs_a:%-4d|x:%-4d", (int)obs_a, (int) x);
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "US:%-4d|IR:%-4d", (int)obsDist_US, (int)obsDist_IR);
//	OLED_ShowString(0, 48, (char *) ch);
	OLED_Refresh_Gram();
 8003da2:	f002 f989 	bl	80060b8 <OLED_Refresh_Gram>

	osDelay(250);
 8003da6:	20fa      	movs	r0, #250	; 0xfa
 8003da8:	f008 fa88 	bl	800c2bc <osDelay>
	snprintf(ch, sizeof(ch), "%-3d%%", (int)batteryVal);
 8003dac:	e7c0      	b.n	8003d30 <runOledTask+0x8>
 8003dae:	bf00      	nop
 8003db0:	66666666 	.word	0x66666666
 8003db4:	40306666 	.word	0x40306666
 8003db8:	47ae147b 	.word	0x47ae147b
 8003dbc:	3f847ae1 	.word	0x3f847ae1
 8003dc0:	20000558 	.word	0x20000558
 8003dc4:	08010284 	.word	0x08010284
 8003dc8:	200004d4 	.word	0x200004d4
 8003dcc:	200004ec 	.word	0x200004ec
 8003dd0:	20000584 	.word	0x20000584
 8003dd4:	0801028c 	.word	0x0801028c

08003dd8 <runCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for(;;)
  {
	  switch(curCmd.index) {
 8003de0:	4bc6      	ldr	r3, [pc, #792]	; (80040fc <runCmdTask+0x324>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	2b63      	cmp	r3, #99	; 0x63
 8003de8:	f200 827a 	bhi.w	80042e0 <runCmdTask+0x508>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <runCmdTask+0x1c>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003f85 	.word	0x08003f85
 8003df8:	08003f85 	.word	0x08003f85
 8003dfc:	08003fa1 	.word	0x08003fa1
 8003e00:	08003fa1 	.word	0x08003fa1
 8003e04:	08003fa1 	.word	0x08003fa1
 8003e08:	08003fa1 	.word	0x08003fa1
 8003e0c:	08004171 	.word	0x08004171
 8003e10:	0800417f 	.word	0x0800417f
 8003e14:	0800418d 	.word	0x0800418d
 8003e18:	0800419b 	.word	0x0800419b
 8003e1c:	080041a9 	.word	0x080041a9
 8003e20:	080041a9 	.word	0x080041a9
 8003e24:	080041f1 	.word	0x080041f1
 8003e28:	080041f9 	.word	0x080041f9
 8003e2c:	08004207 	.word	0x08004207
 8003e30:	08004215 	.word	0x08004215
 8003e34:	08004223 	.word	0x08004223
 8003e38:	080042e1 	.word	0x080042e1
 8003e3c:	080042e1 	.word	0x080042e1
 8003e40:	080042e1 	.word	0x080042e1
 8003e44:	080042e1 	.word	0x080042e1
 8003e48:	080042e1 	.word	0x080042e1
 8003e4c:	080042e1 	.word	0x080042e1
 8003e50:	080042e1 	.word	0x080042e1
 8003e54:	080042e1 	.word	0x080042e1
 8003e58:	080042e1 	.word	0x080042e1
 8003e5c:	080042e1 	.word	0x080042e1
 8003e60:	080042e1 	.word	0x080042e1
 8003e64:	080042e1 	.word	0x080042e1
 8003e68:	080042e1 	.word	0x080042e1
 8003e6c:	080042e1 	.word	0x080042e1
 8003e70:	080042e1 	.word	0x080042e1
 8003e74:	080042e1 	.word	0x080042e1
 8003e78:	080042e1 	.word	0x080042e1
 8003e7c:	080042e1 	.word	0x080042e1
 8003e80:	080042e1 	.word	0x080042e1
 8003e84:	080042e1 	.word	0x080042e1
 8003e88:	080042e1 	.word	0x080042e1
 8003e8c:	080042e1 	.word	0x080042e1
 8003e90:	080042e1 	.word	0x080042e1
 8003e94:	080042e1 	.word	0x080042e1
 8003e98:	080042e1 	.word	0x080042e1
 8003e9c:	080042e1 	.word	0x080042e1
 8003ea0:	080042e1 	.word	0x080042e1
 8003ea4:	080042e1 	.word	0x080042e1
 8003ea8:	080042e1 	.word	0x080042e1
 8003eac:	080042e1 	.word	0x080042e1
 8003eb0:	080042e1 	.word	0x080042e1
 8003eb4:	080042e1 	.word	0x080042e1
 8003eb8:	080042e1 	.word	0x080042e1
 8003ebc:	080042e1 	.word	0x080042e1
 8003ec0:	080042e1 	.word	0x080042e1
 8003ec4:	080042e1 	.word	0x080042e1
 8003ec8:	080042e1 	.word	0x080042e1
 8003ecc:	080042e1 	.word	0x080042e1
 8003ed0:	080042e1 	.word	0x080042e1
 8003ed4:	080042e1 	.word	0x080042e1
 8003ed8:	080042e1 	.word	0x080042e1
 8003edc:	080042e1 	.word	0x080042e1
 8003ee0:	080042e1 	.word	0x080042e1
 8003ee4:	080042e1 	.word	0x080042e1
 8003ee8:	080042e1 	.word	0x080042e1
 8003eec:	080042e1 	.word	0x080042e1
 8003ef0:	080042e1 	.word	0x080042e1
 8003ef4:	080042e1 	.word	0x080042e1
 8003ef8:	080042e1 	.word	0x080042e1
 8003efc:	080042e1 	.word	0x080042e1
 8003f00:	080042e1 	.word	0x080042e1
 8003f04:	080042e1 	.word	0x080042e1
 8003f08:	080042e1 	.word	0x080042e1
 8003f0c:	080042e1 	.word	0x080042e1
 8003f10:	080042e1 	.word	0x080042e1
 8003f14:	080042e1 	.word	0x080042e1
 8003f18:	080042e1 	.word	0x080042e1
 8003f1c:	080042e1 	.word	0x080042e1
 8003f20:	080042e1 	.word	0x080042e1
 8003f24:	080042e1 	.word	0x080042e1
 8003f28:	080042e1 	.word	0x080042e1
 8003f2c:	080042e1 	.word	0x080042e1
 8003f30:	080042e1 	.word	0x080042e1
 8003f34:	080042e1 	.word	0x080042e1
 8003f38:	080042e1 	.word	0x080042e1
 8003f3c:	080042e1 	.word	0x080042e1
 8003f40:	080042e1 	.word	0x080042e1
 8003f44:	080042e1 	.word	0x080042e1
 8003f48:	080042e1 	.word	0x080042e1
 8003f4c:	080042e1 	.word	0x080042e1
 8003f50:	08004231 	.word	0x08004231
 8003f54:	08004231 	.word	0x08004231
 8003f58:	080042e1 	.word	0x080042e1
 8003f5c:	080042e1 	.word	0x080042e1
 8003f60:	080042e1 	.word	0x080042e1
 8003f64:	080042e1 	.word	0x080042e1
 8003f68:	080042e1 	.word	0x080042e1
 8003f6c:	080042e1 	.word	0x080042e1
 8003f70:	080042e1 	.word	0x080042e1
 8003f74:	080042e1 	.word	0x080042e1
 8003f78:	080042e1 	.word	0x080042e1
 8003f7c:	080042e1 	.word	0x080042e1
 8003f80:	080042e1 	.word	0x080042e1
//	  	 case 0: // STOP handled in UART IRQ directly
//	  	  	  break;
	  	 case 1: //FW
	  	 case 2: //BW
	  		curTask = curCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 8003f84:	4b5d      	ldr	r3, [pc, #372]	; (80040fc <runCmdTask+0x324>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <runCmdTask+0x328>)
 8003f96:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003f98:	4b58      	ldr	r3, [pc, #352]	; (80040fc <runCmdTask+0x324>)
 8003f9a:	2263      	movs	r2, #99	; 0x63
 8003f9c:	701a      	strb	r2, [r3, #0]
	  		 break;
 8003f9e:	e1a0      	b.n	80042e2 <runCmdTask+0x50a>
	  	case 3: //FL manual
		case 4: //FR manual
		case 5: //BL manual
		case 6: //BR manual
			__SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8003fa0:	4b56      	ldr	r3, [pc, #344]	; (80040fc <runCmdTask+0x324>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4a57      	ldr	r2, [pc, #348]	; (8004104 <runCmdTask+0x32c>)
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004108 <runCmdTask+0x330>
 8003fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbc:	dd01      	ble.n	8003fc2 <runCmdTask+0x1ea>
 8003fbe:	2373      	movs	r3, #115	; 0x73
 8003fc0:	e01c      	b.n	8003ffc <runCmdTask+0x224>
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <runCmdTask+0x324>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4a4f      	ldr	r2, [pc, #316]	; (8004104 <runCmdTask+0x32c>)
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	edd3 7a00 	vldr	s15, [r3]
 8003fd2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800410c <runCmdTask+0x334>
 8003fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fde:	d501      	bpl.n	8003fe4 <runCmdTask+0x20c>
 8003fe0:	2332      	movs	r3, #50	; 0x32
 8003fe2:	e00b      	b.n	8003ffc <runCmdTask+0x224>
 8003fe4:	4b45      	ldr	r3, [pc, #276]	; (80040fc <runCmdTask+0x324>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4a46      	ldr	r2, [pc, #280]	; (8004104 <runCmdTask+0x32c>)
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff8:	ee17 3a90 	vmov	r3, s15
 8003ffc:	4a44      	ldr	r2, [pc, #272]	; (8004110 <runCmdTask+0x338>)
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004006:	f002 fe7f 	bl	8006d08 <HAL_Delay>
 800400a:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <runCmdTask+0x324>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <runCmdTask+0x32c>)
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	4413      	add	r3, r2
 8004014:	3308      	adds	r3, #8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <runCmdTask+0x33c>)
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b37      	ldr	r3, [pc, #220]	; (80040fc <runCmdTask+0x324>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4a38      	ldr	r2, [pc, #224]	; (8004104 <runCmdTask+0x32c>)
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	4413      	add	r3, r2
 8004026:	330c      	adds	r3, #12
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	2104      	movs	r1, #4
 8004038:	4837      	ldr	r0, [pc, #220]	; (8004118 <runCmdTask+0x340>)
 800403a:	f003 fdc9 	bl	8007bd0 <HAL_GPIO_WritePin>
 800403e:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <runCmdTask+0x324>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <runCmdTask+0x32c>)
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	4413      	add	r3, r2
 8004048:	330c      	adds	r3, #12
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	2108      	movs	r1, #8
 800405a:	482f      	ldr	r0, [pc, #188]	; (8004118 <runCmdTask+0x340>)
 800405c:	f003 fdb8 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <runCmdTask+0x324>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <runCmdTask+0x32c>)
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	4413      	add	r3, r2
 800406a:	330c      	adds	r3, #12
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	2120      	movs	r1, #32
 800407c:	4826      	ldr	r0, [pc, #152]	; (8004118 <runCmdTask+0x340>)
 800407e:	f003 fda7 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <runCmdTask+0x324>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <runCmdTask+0x32c>)
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4413      	add	r3, r2
 800408c:	330c      	adds	r3, #12
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	2110      	movs	r1, #16
 800409e:	481e      	ldr	r0, [pc, #120]	; (8004118 <runCmdTask+0x340>)
 80040a0:	f003 fd96 	bl	8007bd0 <HAL_GPIO_WritePin>
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <runCmdTask+0x324>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4a16      	ldr	r2, [pc, #88]	; (8004104 <runCmdTask+0x32c>)
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	4413      	add	r3, r2
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <runCmdTask+0x344>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <runCmdTask+0x324>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <runCmdTask+0x32c>)
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	3302      	adds	r3, #2
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <runCmdTask+0x344>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
			if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <runCmdTask+0x348>)
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <runCmdTask+0x348>)
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d12e      	bne.n	8004134 <runCmdTask+0x35c>
				__CLEAR_CURCMD(curCmd);
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <runCmdTask+0x324>)
 80040d8:	2264      	movs	r2, #100	; 0x64
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <runCmdTask+0x324>)
 80040de:	2200      	movs	r2, #0
 80040e0:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <runCmdTask+0x34c>)
 80040e4:	210f      	movs	r1, #15
 80040e6:	4810      	ldr	r0, [pc, #64]	; (8004128 <runCmdTask+0x350>)
 80040e8:	f00a fd60 	bl	800ebac <sniprintf>
 80040ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f0:	2206      	movs	r2, #6
 80040f2:	490e      	ldr	r1, [pc, #56]	; (800412c <runCmdTask+0x354>)
 80040f4:	480e      	ldr	r0, [pc, #56]	; (8004130 <runCmdTask+0x358>)
 80040f6:	f006 ffaa 	bl	800b04e <HAL_UART_Transmit>
 80040fa:	e035      	b.n	8004168 <runCmdTask+0x390>
 80040fc:	200004c0 	.word	0x200004c0
 8004100:	20000134 	.word	0x20000134
 8004104:	20000004 	.word	0x20000004
 8004108:	42e60000 	.word	0x42e60000
 800410c:	42480000 	.word	0x42480000
 8004110:	200002a0 	.word	0x200002a0
 8004114:	200004e8 	.word	0x200004e8
 8004118:	40020000 	.word	0x40020000
 800411c:	200003c0 	.word	0x200003c0
 8004120:	2000048c 	.word	0x2000048c
 8004124:	0801026c 	.word	0x0801026c
 8004128:	200004c4 	.word	0x200004c4
 800412c:	08010274 	.word	0x08010274
 8004130:	20000408 	.word	0x20000408
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004134:	4b6d      	ldr	r3, [pc, #436]	; (80042ec <runCmdTask+0x514>)
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	4a6d      	ldr	r2, [pc, #436]	; (80042f0 <runCmdTask+0x518>)
 800413a:	496c      	ldr	r1, [pc, #432]	; (80042ec <runCmdTask+0x514>)
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b69      	ldr	r3, [pc, #420]	; (80042ec <runCmdTask+0x514>)
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	3301      	adds	r3, #1
 800414a:	4a68      	ldr	r2, [pc, #416]	; (80042ec <runCmdTask+0x514>)
 800414c:	7892      	ldrb	r2, [r2, #2]
 800414e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004152:	fb01 f202 	mul.w	r2, r1, r2
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4b64      	ldr	r3, [pc, #400]	; (80042ec <runCmdTask+0x514>)
 800415c:	705a      	strb	r2, [r3, #1]
 800415e:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <runCmdTask+0x51c>)
 8004160:	210f      	movs	r1, #15
 8004162:	4865      	ldr	r0, [pc, #404]	; (80042f8 <runCmdTask+0x520>)
 8004164:	f00a fd22 	bl	800ebac <sniprintf>
			__PEND_CURCMD(curCmd);
 8004168:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <runCmdTask+0x518>)
 800416a:	2263      	movs	r2, #99	; 0x63
 800416c:	701a      	strb	r2, [r3, #0]
			 break;
 800416e:	e0b8      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 7: // FL
	  		 curTask = TASK_FL;
 8004170:	4b62      	ldr	r3, [pc, #392]	; (80042fc <runCmdTask+0x524>)
 8004172:	2202      	movs	r2, #2
 8004174:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004176:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <runCmdTask+0x518>)
 8004178:	2263      	movs	r2, #99	; 0x63
 800417a:	701a      	strb	r2, [r3, #0]
	  		 break;
 800417c:	e0b1      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 8: // FR
	  		curTask = TASK_FR;
 800417e:	4b5f      	ldr	r3, [pc, #380]	; (80042fc <runCmdTask+0x524>)
 8004180:	2203      	movs	r2, #3
 8004182:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004184:	4b5a      	ldr	r3, [pc, #360]	; (80042f0 <runCmdTask+0x518>)
 8004186:	2263      	movs	r2, #99	; 0x63
 8004188:	701a      	strb	r2, [r3, #0]
	  		break;
 800418a:	e0aa      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 9: // BL
	  		curTask = TASK_BL;
 800418c:	4b5b      	ldr	r3, [pc, #364]	; (80042fc <runCmdTask+0x524>)
 800418e:	2204      	movs	r2, #4
 8004190:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004192:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <runCmdTask+0x518>)
 8004194:	2263      	movs	r2, #99	; 0x63
 8004196:	701a      	strb	r2, [r3, #0]
	  		break;
 8004198:	e0a3      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 10: //BR
	  		curTask = TASK_BR;
 800419a:	4b58      	ldr	r3, [pc, #352]	; (80042fc <runCmdTask+0x524>)
 800419c:	2205      	movs	r2, #5
 800419e:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <runCmdTask+0x518>)
 80041a2:	2263      	movs	r2, #99	; 0x63
 80041a4:	701a      	strb	r2, [r3, #0]
	  		break;
 80041a6:	e09c      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 11: // TL
	  	 case 12: // TR
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 80041a8:	4b51      	ldr	r3, [pc, #324]	; (80042f0 <runCmdTask+0x518>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b0b      	cmp	r3, #11
 80041ae:	d004      	beq.n	80041ba <runCmdTask+0x3e2>
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <runCmdTask+0x528>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2273      	movs	r2, #115	; 0x73
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
 80041b8:	e003      	b.n	80041c2 <runCmdTask+0x3ea>
 80041ba:	4b51      	ldr	r3, [pc, #324]	; (8004300 <runCmdTask+0x528>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2232      	movs	r2, #50	; 0x32
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
 80041c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80041c6:	f002 fd9f 	bl	8006d08 <HAL_Delay>
	  		__CLEAR_CURCMD(curCmd);
 80041ca:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <runCmdTask+0x518>)
 80041cc:	2264      	movs	r2, #100	; 0x64
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <runCmdTask+0x518>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 80041d6:	4a4b      	ldr	r2, [pc, #300]	; (8004304 <runCmdTask+0x52c>)
 80041d8:	210f      	movs	r1, #15
 80041da:	4847      	ldr	r0, [pc, #284]	; (80042f8 <runCmdTask+0x520>)
 80041dc:	f00a fce6 	bl	800ebac <sniprintf>
 80041e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041e4:	2206      	movs	r2, #6
 80041e6:	4948      	ldr	r1, [pc, #288]	; (8004308 <runCmdTask+0x530>)
 80041e8:	4848      	ldr	r0, [pc, #288]	; (800430c <runCmdTask+0x534>)
 80041ea:	f006 ff30 	bl	800b04e <HAL_UART_Transmit>
	  		 break;
 80041ee:	e078      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 13: // debug IR sensor
	  		 curTask = TASK_ADC;
 80041f0:	4b42      	ldr	r3, [pc, #264]	; (80042fc <runCmdTask+0x524>)
 80041f2:	2206      	movs	r2, #6
 80041f4:	701a      	strb	r2, [r3, #0]
	  		 break;
 80041f6:	e074      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 14: // DT move until specified distance from obstacle
	  		  curTask = TASK_MOVE_OBS;
 80041f8:	4b40      	ldr	r3, [pc, #256]	; (80042fc <runCmdTask+0x524>)
 80041fa:	2207      	movs	r2, #7
 80041fc:	701a      	strb	r2, [r3, #0]
	  		  __PEND_CURCMD(curCmd);
 80041fe:	4b3c      	ldr	r3, [pc, #240]	; (80042f0 <runCmdTask+0x518>)
 8004200:	2263      	movs	r2, #99	; 0x63
 8004202:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004204:	e06d      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 15:
	  		 curTask = TASK_BUZZER;
 8004206:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <runCmdTask+0x524>)
 8004208:	220a      	movs	r2, #10
 800420a:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800420c:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <runCmdTask+0x518>)
 800420e:	2263      	movs	r2, #99	; 0x63
 8004210:	701a      	strb	r2, [r3, #0]
	  		break;
 8004212:	e066      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 16:
	  		 curTask = TASK_FASTESTPATH;
 8004214:	4b39      	ldr	r3, [pc, #228]	; (80042fc <runCmdTask+0x524>)
 8004216:	2208      	movs	r2, #8
 8004218:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800421a:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <runCmdTask+0x518>)
 800421c:	2263      	movs	r2, #99	; 0x63
 800421e:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004220:	e05f      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 17:
	  		 curTask = TASK_FASTESTPATH_V2;
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <runCmdTask+0x524>)
 8004224:	2209      	movs	r2, #9
 8004226:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004228:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <runCmdTask+0x518>)
 800422a:	2263      	movs	r2, #99	; 0x63
 800422c:	701a      	strb	r2, [r3, #0]
	  		 break;
 800422e:	e058      	b.n	80042e2 <runCmdTask+0x50a>
	  	 case 88: // Axxx, rotate left by xxx degree
	  	 case 89: // Cxxx, rotate right by xxx degree
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <runCmdTask+0x518>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b58      	cmp	r3, #88	; 0x58
 8004236:	d004      	beq.n	8004242 <runCmdTask+0x46a>
 8004238:	4b31      	ldr	r3, [pc, #196]	; (8004300 <runCmdTask+0x528>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2273      	movs	r2, #115	; 0x73
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
 8004240:	e003      	b.n	800424a <runCmdTask+0x472>
 8004242:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <runCmdTask+0x528>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2232      	movs	r2, #50	; 0x32
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
 800424a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800424e:	f002 fd5b 	bl	8006d08 <HAL_Delay>
	  		 __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004252:	2200      	movs	r2, #0
 8004254:	2104      	movs	r1, #4
 8004256:	482e      	ldr	r0, [pc, #184]	; (8004310 <runCmdTask+0x538>)
 8004258:	f003 fcba 	bl	8007bd0 <HAL_GPIO_WritePin>
 800425c:	2201      	movs	r2, #1
 800425e:	2108      	movs	r1, #8
 8004260:	482b      	ldr	r0, [pc, #172]	; (8004310 <runCmdTask+0x538>)
 8004262:	f003 fcb5 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004266:	2200      	movs	r2, #0
 8004268:	2120      	movs	r1, #32
 800426a:	4829      	ldr	r0, [pc, #164]	; (8004310 <runCmdTask+0x538>)
 800426c:	f003 fcb0 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004270:	2201      	movs	r2, #1
 8004272:	2110      	movs	r1, #16
 8004274:	4826      	ldr	r0, [pc, #152]	; (8004310 <runCmdTask+0x538>)
 8004276:	f003 fcab 	bl	8007bd0 <HAL_GPIO_WritePin>
	  		 if (curCmd.index == 88) {
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <runCmdTask+0x518>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b58      	cmp	r3, #88	; 0x58
 8004280:	d113      	bne.n	80042aa <runCmdTask+0x4d2>
	  			 targetAngle = curCmd.val;
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <runCmdTask+0x518>)
 8004284:	885b      	ldrh	r3, [r3, #2]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	4b21      	ldr	r3, [pc, #132]	; (8004314 <runCmdTask+0x53c>)
 8004290:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 800, 1200);
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <runCmdTask+0x540>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f44f 7248 	mov.w	r2, #800	; 0x320
 800429c:	635a      	str	r2, [r3, #52]	; 0x34
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <runCmdTask+0x540>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
 80042a8:	e013      	b.n	80042d2 <runCmdTask+0x4fa>
	  		 } else {
	  			targetAngle = -curCmd.val;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <runCmdTask+0x518>)
 80042ac:	885b      	ldrh	r3, [r3, #2]
 80042ae:	425b      	negs	r3, r3
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <runCmdTask+0x53c>)
 80042ba:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 1200, 800);
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <runCmdTask+0x540>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80042c6:	635a      	str	r2, [r3, #52]	; 0x34
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <runCmdTask+0x540>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
	  		 }
	  		__PEND_CURCMD(curCmd);
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <runCmdTask+0x518>)
 80042d4:	2263      	movs	r2, #99	; 0x63
 80042d6:	701a      	strb	r2, [r3, #0]
	  		 RobotTurn(&targetAngle);
 80042d8:	480e      	ldr	r0, [pc, #56]	; (8004314 <runCmdTask+0x53c>)
 80042da:	f7ff f8dd 	bl	8003498 <RobotTurn>
	  		 break;
 80042de:	e000      	b.n	80042e2 <runCmdTask+0x50a>
	  		 break;
	  	 case 100:
	  		 break;
	  	 default:
	  //		 curCmd.index = 99;
	  		 break;
 80042e0:	bf00      	nop
	  	 }

	  osDelay(100);
 80042e2:	2064      	movs	r0, #100	; 0x64
 80042e4:	f007 ffea 	bl	800c2bc <osDelay>
	  switch(curCmd.index) {
 80042e8:	e57a      	b.n	8003de0 <runCmdTask+0x8>
 80042ea:	bf00      	nop
 80042ec:	2000048c 	.word	0x2000048c
 80042f0:	200004c0 	.word	0x200004c0
 80042f4:	0801027c 	.word	0x0801027c
 80042f8:	200004c4 	.word	0x200004c4
 80042fc:	20000134 	.word	0x20000134
 8004300:	200002a0 	.word	0x200002a0
 8004304:	0801026c 	.word	0x0801026c
 8004308:	08010274 	.word	0x08010274
 800430c:	20000408 	.word	0x20000408
 8004310:	40020000 	.word	0x40020000
 8004314:	200004e8 	.word	0x200004e8
 8004318:	200003c0 	.word	0x200003c0

0800431c <runADCTask>:
* Greedy Task (can only preempted by UART IRQ or EXTI)
* When activate (curTask == TASK_ADC), function executes in 1MHz
*/
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
	uint16_t dataPoint = 0; uint32_t IR_data_raw_acc = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	81fb      	strh	r3, [r7, #14]
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_ADC) osDelay(1000);
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <runADCTask+0xb0>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d004      	beq.n	800433e <runADCTask+0x22>
 8004334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004338:	f007 ffc0 	bl	800c2bc <osDelay>
 800433c:	e7f6      	b.n	800432c <runADCTask+0x10>
	  else {
//			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
//			last_curTask_tick = HAL_GetTick();
			__PEND_CURCMD(curCmd);
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <runADCTask+0xb4>)
 8004340:	2263      	movs	r2, #99	; 0x63
 8004342:	701a      	strb	r2, [r3, #0]
			targetDist = 40;
 8004344:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <runADCTask+0xb8>)
 8004346:	4a24      	ldr	r2, [pc, #144]	; (80043d8 <runADCTask+0xbc>)
 8004348:	601a      	str	r2, [r3, #0]
			RobotMoveDistObstacle_IR(&targetDist);
 800434a:	4822      	ldr	r0, [pc, #136]	; (80043d4 <runADCTask+0xb8>)
 800434c:	f7fe ff40 	bl	80031d0 <RobotMoveDistObstacle_IR>
//			  osDelay(5);
//			} while (1);
//
//		  __ON_TASK_END(&htim8, prevTask, curTask);
//		  HAL_ADC_Stop(&hadc1);
		  clickOnce = 0;
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <runADCTask+0xc0>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <runADCTask+0xb0>)
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <runADCTask+0xc4>)
 800435c:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 800435e:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <runADCTask+0xb0>)
 8004360:	220b      	movs	r2, #11
 8004362:	701a      	strb	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004364:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <runADCTask+0xc8>)
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <runADCTask+0xc8>)
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	429a      	cmp	r2, r3
 800436e:	d112      	bne.n	8004396 <runADCTask+0x7a>
			__CLEAR_CURCMD(curCmd);
 8004370:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <runADCTask+0xb4>)
 8004372:	2264      	movs	r2, #100	; 0x64
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <runADCTask+0xb4>)
 8004378:	2200      	movs	r2, #0
 800437a:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800437c:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <runADCTask+0xcc>)
 800437e:	210f      	movs	r1, #15
 8004380:	481a      	ldr	r0, [pc, #104]	; (80043ec <runADCTask+0xd0>)
 8004382:	f00a fc13 	bl	800ebac <sniprintf>
 8004386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800438a:	2206      	movs	r2, #6
 800438c:	4918      	ldr	r1, [pc, #96]	; (80043f0 <runADCTask+0xd4>)
 800438e:	4819      	ldr	r0, [pc, #100]	; (80043f4 <runADCTask+0xd8>)
 8004390:	f006 fe5d 	bl	800b04e <HAL_UART_Transmit>
 8004394:	e7ca      	b.n	800432c <runADCTask+0x10>

		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <runADCTask+0xc8>)
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <runADCTask+0xb4>)
 800439c:	4911      	ldr	r1, [pc, #68]	; (80043e4 <runADCTask+0xc8>)
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <runADCTask+0xc8>)
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <runADCTask+0xc8>)
 80043ae:	7892      	ldrb	r2, [r2, #2]
 80043b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80043b4:	fb01 f202 	mul.w	r2, r1, r2
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <runADCTask+0xc8>)
 80043be:	705a      	strb	r2, [r3, #1]
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <runADCTask+0xdc>)
 80043c2:	210f      	movs	r1, #15
 80043c4:	4809      	ldr	r0, [pc, #36]	; (80043ec <runADCTask+0xd0>)
 80043c6:	f00a fbf1 	bl	800ebac <sniprintf>
	  if (curTask != TASK_ADC) osDelay(1000);
 80043ca:	e7af      	b.n	800432c <runADCTask+0x10>
 80043cc:	20000134 	.word	0x20000134
 80043d0:	200004c0 	.word	0x200004c0
 80043d4:	200004fc 	.word	0x200004fc
 80043d8:	42200000 	.word	0x42200000
 80043dc:	20000578 	.word	0x20000578
 80043e0:	20000135 	.word	0x20000135
 80043e4:	2000048c 	.word	0x2000048c
 80043e8:	0801026c 	.word	0x0801026c
 80043ec:	200004c4 	.word	0x200004c4
 80043f0:	08010274 	.word	0x08010274
 80043f4:	20000408 	.word	0x20000408
 80043f8:	0801027c 	.word	0x0801027c

080043fc <runMoveDistTask>:
* @retval None
* Greedy Task (can only preempted by UART IRQ or EXTI)
*/
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 8004404:	4b85      	ldr	r3, [pc, #532]	; (800461c <runMoveDistTask+0x220>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <runMoveDistTask+0x22>
 800440c:	4b83      	ldr	r3, [pc, #524]	; (800461c <runMoveDistTask+0x220>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d004      	beq.n	800441e <runMoveDistTask+0x22>
 8004414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004418:	f007 ff50 	bl	800c2bc <osDelay>
 800441c:	e0fc      	b.n	8004618 <runMoveDistTask+0x21c>
	  else {
		  if (manualMode) {
 800441e:	4b80      	ldr	r3, [pc, #512]	; (8004620 <runMoveDistTask+0x224>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07e      	beq.n	8004524 <runMoveDistTask+0x128>
			  angleNow = 0; gyroZ = 0; // reset angle for PID
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <runMoveDistTask+0x228>)
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <runMoveDistTask+0x22c>)
 8004430:	2200      	movs	r2, #0
 8004432:	801a      	strh	r2, [r3, #0]
			PIDConfigReset(&pidTSlow);
 8004434:	487d      	ldr	r0, [pc, #500]	; (800462c <runMoveDistTask+0x230>)
 8004436:	f7fe f892 	bl	800255e <PIDConfigReset>
			PIDConfigReset(&pidSlow);
 800443a:	487d      	ldr	r0, [pc, #500]	; (8004630 <runMoveDistTask+0x234>)
 800443c:	f7fe f88f 	bl	800255e <PIDConfigReset>
			PIDConfigReset(&pidFast);
 8004440:	487c      	ldr	r0, [pc, #496]	; (8004634 <runMoveDistTask+0x238>)
 8004442:	f7fe f88c 	bl	800255e <PIDConfigReset>

			__SET_MOTOR_DIRECTION(curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD);
 8004446:	4b75      	ldr	r3, [pc, #468]	; (800461c <runMoveDistTask+0x220>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	2104      	movs	r1, #4
 8004458:	4877      	ldr	r0, [pc, #476]	; (8004638 <runMoveDistTask+0x23c>)
 800445a:	f003 fbb9 	bl	8007bd0 <HAL_GPIO_WritePin>
 800445e:	4b6f      	ldr	r3, [pc, #444]	; (800461c <runMoveDistTask+0x220>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	2108      	movs	r1, #8
 8004470:	4871      	ldr	r0, [pc, #452]	; (8004638 <runMoveDistTask+0x23c>)
 8004472:	f003 fbad 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004476:	4b69      	ldr	r3, [pc, #420]	; (800461c <runMoveDistTask+0x220>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	2120      	movs	r1, #32
 8004488:	486b      	ldr	r0, [pc, #428]	; (8004638 <runMoveDistTask+0x23c>)
 800448a:	f003 fba1 	bl	8007bd0 <HAL_GPIO_WritePin>
 800448e:	4b63      	ldr	r3, [pc, #396]	; (800461c <runMoveDistTask+0x220>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	2110      	movs	r1, #16
 80044a0:	4865      	ldr	r0, [pc, #404]	; (8004638 <runMoveDistTask+0x23c>)
 80044a2:	f003 fb95 	bl	8007bd0 <HAL_GPIO_WritePin>

			  __ON_TASK_END(&htim8, prevTask, curTask);
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <runMoveDistTask+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34
 80044ae:	4b63      	ldr	r3, [pc, #396]	; (800463c <runMoveDistTask+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
 80044b6:	4b59      	ldr	r3, [pc, #356]	; (800461c <runMoveDistTask+0x220>)
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	4b61      	ldr	r3, [pc, #388]	; (8004640 <runMoveDistTask+0x244>)
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	4b57      	ldr	r3, [pc, #348]	; (800461c <runMoveDistTask+0x220>)
 80044c0:	220b      	movs	r2, #11
 80044c2:	701a      	strb	r2, [r3, #0]
			  clickOnce = 0;
 80044c4:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <runMoveDistTask+0x248>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

			  __CLEAR_CURCMD(curCmd);
 80044ca:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <runMoveDistTask+0x24c>)
 80044cc:	2264      	movs	r2, #100	; 0x64
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <runMoveDistTask+0x24c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 80044d6:	4a5d      	ldr	r2, [pc, #372]	; (800464c <runMoveDistTask+0x250>)
 80044d8:	210f      	movs	r1, #15
 80044da:	485d      	ldr	r0, [pc, #372]	; (8004650 <runMoveDistTask+0x254>)
 80044dc:	f00a fb66 	bl	800ebac <sniprintf>
 80044e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044e4:	2206      	movs	r2, #6
 80044e6:	495b      	ldr	r1, [pc, #364]	; (8004654 <runMoveDistTask+0x258>)
 80044e8:	485b      	ldr	r0, [pc, #364]	; (8004658 <runMoveDistTask+0x25c>)
 80044ea:	f006 fdb0 	bl	800b04e <HAL_UART_Transmit>

			last_curTask_tick = HAL_GetTick();
 80044ee:	f002 fbff 	bl	8006cf0 <HAL_GetTick>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a59      	ldr	r2, [pc, #356]	; (800465c <runMoveDistTask+0x260>)
 80044f6:	6013      	str	r3, [r2, #0]
			do {
				if (!manualMode) break;
 80044f8:	4b49      	ldr	r3, [pc, #292]	; (8004620 <runMoveDistTask+0x224>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 808a 	beq.w	8004616 <runMoveDistTask+0x21a>
				if (HAL_GetTick() - last_curTask_tick >= 10) {
 8004502:	f002 fbf5 	bl	8006cf0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	4b54      	ldr	r3, [pc, #336]	; (800465c <runMoveDistTask+0x260>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b09      	cmp	r3, #9
 8004510:	d9f2      	bls.n	80044f8 <runMoveDistTask+0xfc>
					StraightLineMove(SPEED_MODE_T);
 8004512:	2000      	movs	r0, #0
 8004514:	f7fe f836 	bl	8002584 <StraightLineMove>
					last_curTask_tick = HAL_GetTick();
 8004518:	f002 fbea 	bl	8006cf0 <HAL_GetTick>
 800451c:	4603      	mov	r3, r0
 800451e:	4a4f      	ldr	r2, [pc, #316]	; (800465c <runMoveDistTask+0x260>)
 8004520:	6013      	str	r3, [r2, #0]
				if (!manualMode) break;
 8004522:	e7e9      	b.n	80044f8 <runMoveDistTask+0xfc>
//				osDelay(5); // for video demo only, give OLED chances to update
			} while (1);

		  } else {
//			  osDelay(5000); // for video demo only
			  targetDist = (float) curCmd.val;
 8004524:	4b48      	ldr	r3, [pc, #288]	; (8004648 <runMoveDistTask+0x24c>)
 8004526:	885b      	ldrh	r3, [r3, #2]
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <runMoveDistTask+0x264>)
 8004532:	edc3 7a00 	vstr	s15, [r3]
			  // for target distance lesser than 15, move mode must be forced to SLOW
			  if (targetDist <= 15) moveMode = SLOW;
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <runMoveDistTask+0x264>)
 8004538:	edd3 7a00 	vldr	s15, [r3]
 800453c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	d802      	bhi.n	8004550 <runMoveDistTask+0x154>
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <runMoveDistTask+0x268>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]

			  if (moveMode == SLOW) {
 8004550:	4b44      	ldr	r3, [pc, #272]	; (8004664 <runMoveDistTask+0x268>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10c      	bne.n	8004572 <runMoveDistTask+0x176>
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_1);
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <runMoveDistTask+0x220>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2201      	movs	r2, #1
 8004568:	4619      	mov	r1, r3
 800456a:	483d      	ldr	r0, [pc, #244]	; (8004660 <runMoveDistTask+0x264>)
 800456c:	f7fe fb20 	bl	8002bb0 <RobotMoveDist>
 8004570:	e00b      	b.n	800458a <runMoveDistTask+0x18e>
			  } else {
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_2);
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <runMoveDistTask+0x220>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf0c      	ite	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	2300      	movne	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2202      	movs	r2, #2
 8004582:	4619      	mov	r1, r3
 8004584:	4836      	ldr	r0, [pc, #216]	; (8004660 <runMoveDistTask+0x264>)
 8004586:	f7fe fb13 	bl	8002bb0 <RobotMoveDist>
			  }

			  __ON_TASK_END(&htim8, prevTask, curTask);
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <runMoveDistTask+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
 8004592:	4b2a      	ldr	r3, [pc, #168]	; (800463c <runMoveDistTask+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <runMoveDistTask+0x220>)
 800459c:	781a      	ldrb	r2, [r3, #0]
 800459e:	4b28      	ldr	r3, [pc, #160]	; (8004640 <runMoveDistTask+0x244>)
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <runMoveDistTask+0x220>)
 80045a4:	220b      	movs	r2, #11
 80045a6:	701a      	strb	r2, [r3, #0]
				  clickOnce = 0;
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <runMoveDistTask+0x248>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

				if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80045ae:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <runMoveDistTask+0x26c>)
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <runMoveDistTask+0x26c>)
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d112      	bne.n	80045e0 <runMoveDistTask+0x1e4>
					__CLEAR_CURCMD(curCmd);
 80045ba:	4b23      	ldr	r3, [pc, #140]	; (8004648 <runMoveDistTask+0x24c>)
 80045bc:	2264      	movs	r2, #100	; 0x64
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <runMoveDistTask+0x24c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	805a      	strh	r2, [r3, #2]
					__ACK_TASK_DONE(&huart3, rxMsg);
 80045c6:	4a21      	ldr	r2, [pc, #132]	; (800464c <runMoveDistTask+0x250>)
 80045c8:	210f      	movs	r1, #15
 80045ca:	4821      	ldr	r0, [pc, #132]	; (8004650 <runMoveDistTask+0x254>)
 80045cc:	f00a faee 	bl	800ebac <sniprintf>
 80045d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045d4:	2206      	movs	r2, #6
 80045d6:	491f      	ldr	r1, [pc, #124]	; (8004654 <runMoveDistTask+0x258>)
 80045d8:	481f      	ldr	r0, [pc, #124]	; (8004658 <runMoveDistTask+0x25c>)
 80045da:	f006 fd38 	bl	800b04e <HAL_UART_Transmit>
 80045de:	e711      	b.n	8004404 <runMoveDistTask+0x8>
				} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80045e0:	4b21      	ldr	r3, [pc, #132]	; (8004668 <runMoveDistTask+0x26c>)
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	4a18      	ldr	r2, [pc, #96]	; (8004648 <runMoveDistTask+0x24c>)
 80045e6:	4920      	ldr	r1, [pc, #128]	; (8004668 <runMoveDistTask+0x26c>)
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <runMoveDistTask+0x26c>)
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <runMoveDistTask+0x26c>)
 80045f8:	7892      	ldrb	r2, [r2, #2]
 80045fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80045fe:	fb01 f202 	mul.w	r2, r1, r2
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <runMoveDistTask+0x26c>)
 8004608:	705a      	strb	r2, [r3, #1]
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <runMoveDistTask+0x270>)
 800460c:	210f      	movs	r1, #15
 800460e:	4810      	ldr	r0, [pc, #64]	; (8004650 <runMoveDistTask+0x254>)
 8004610:	f00a facc 	bl	800ebac <sniprintf>
 8004614:	e6f6      	b.n	8004404 <runMoveDistTask+0x8>
				if (!manualMode) break;
 8004616:	bf00      	nop
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 8004618:	e6f4      	b.n	8004404 <runMoveDistTask+0x8>
 800461a:	bf00      	nop
 800461c:	20000134 	.word	0x20000134
 8004620:	200004e4 	.word	0x200004e4
 8004624:	200004ec 	.word	0x200004ec
 8004628:	200004f2 	.word	0x200004f2
 800462c:	2000051c 	.word	0x2000051c
 8004630:	20000508 	.word	0x20000508
 8004634:	20000530 	.word	0x20000530
 8004638:	40020000 	.word	0x40020000
 800463c:	200003c0 	.word	0x200003c0
 8004640:	20000135 	.word	0x20000135
 8004644:	20000578 	.word	0x20000578
 8004648:	200004c0 	.word	0x200004c0
 800464c:	0801026c 	.word	0x0801026c
 8004650:	200004c4 	.word	0x200004c4
 8004654:	08010274 	.word	0x08010274
 8004658:	20000408 	.word	0x20000408
 800465c:	200004f8 	.word	0x200004f8
 8004660:	200004fc 	.word	0x200004fc
 8004664:	20000136 	.word	0x20000136
 8004668:	2000048c 	.word	0x2000048c
 800466c:	0801027c 	.word	0x0801027c

08004670 <runFastestPathTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask */
void runFastestPathTask(void *argument)
{
 8004670:	b5b0      	push	{r4, r5, r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af04      	add	r7, sp, #16
 8004676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask */
	uint8_t hadOvershoot = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 800467c:	4b84      	ldr	r3, [pc, #528]	; (8004890 <runFastestPathTask+0x220>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d004      	beq.n	800468e <runFastestPathTask+0x1e>
 8004684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004688:	f007 fe18 	bl	800c2bc <osDelay>
 800468c:	e7f6      	b.n	800467c <runFastestPathTask+0xc>
	  else {
		  if (step == 0) {
 800468e:	4b81      	ldr	r3, [pc, #516]	; (8004894 <runFastestPathTask+0x224>)
 8004690:	f993 3000 	ldrsb.w	r3, [r3]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <runFastestPathTask+0x38>
			  targetDist = 30;
 8004698:	4b7f      	ldr	r3, [pc, #508]	; (8004898 <runFastestPathTask+0x228>)
 800469a:	4a80      	ldr	r2, [pc, #512]	; (800489c <runFastestPathTask+0x22c>)
 800469c:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 800469e:	2102      	movs	r1, #2
 80046a0:	487d      	ldr	r0, [pc, #500]	; (8004898 <runFastestPathTask+0x228>)
 80046a2:	f7fe fc19 	bl	8002ed8 <RobotMoveDistObstacle>
 80046a6:	e23c      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  } else if (step == 1) {
 80046a8:	4b7a      	ldr	r3, [pc, #488]	; (8004894 <runFastestPathTask+0x224>)
 80046aa:	f993 3000 	ldrsb.w	r3, [r3]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 8198 	bne.w	80049e4 <runFastestPathTask+0x374>
			  //2:  turn left by 90 degree, record down angle when US sensor overshoot
			  hadOvershoot = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
			  angleNow = 0; gyroZ = 0;
 80046b8:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <runFastestPathTask+0x230>)
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	4b78      	ldr	r3, [pc, #480]	; (80048a4 <runFastestPathTask+0x234>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	801a      	strh	r2, [r3, #0]
			  angle_left = 0;
 80046c6:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <runFastestPathTask+0x238>)
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
			  targetAngle = 90;
 80046ce:	4b77      	ldr	r3, [pc, #476]	; (80048ac <runFastestPathTask+0x23c>)
 80046d0:	4a77      	ldr	r2, [pc, #476]	; (80048b0 <runFastestPathTask+0x240>)
 80046d2:	601a      	str	r2, [r3, #0]
			  obsDist_US = 0;
 80046d4:	4b77      	ldr	r3, [pc, #476]	; (80048b4 <runFastestPathTask+0x244>)
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 80046dc:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <runFastestPathTask+0x248>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2232      	movs	r2, #50	; 0x32
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
 80046e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80046e8:	f002 fb0e 	bl	8006d08 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 600, 1000);
 80046ec:	4b73      	ldr	r3, [pc, #460]	; (80048bc <runFastestPathTask+0x24c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34
 80046f6:	4b71      	ldr	r3, [pc, #452]	; (80048bc <runFastestPathTask+0x24c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
			  __SET_MOTOR_DIRECTION(1);
 8004700:	2200      	movs	r2, #0
 8004702:	2104      	movs	r1, #4
 8004704:	486e      	ldr	r0, [pc, #440]	; (80048c0 <runFastestPathTask+0x250>)
 8004706:	f003 fa63 	bl	8007bd0 <HAL_GPIO_WritePin>
 800470a:	2201      	movs	r2, #1
 800470c:	2108      	movs	r1, #8
 800470e:	486c      	ldr	r0, [pc, #432]	; (80048c0 <runFastestPathTask+0x250>)
 8004710:	f003 fa5e 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004714:	2200      	movs	r2, #0
 8004716:	2120      	movs	r1, #32
 8004718:	4869      	ldr	r0, [pc, #420]	; (80048c0 <runFastestPathTask+0x250>)
 800471a:	f003 fa59 	bl	8007bd0 <HAL_GPIO_WritePin>
 800471e:	2201      	movs	r2, #1
 8004720:	2110      	movs	r1, #16
 8004722:	4867      	ldr	r0, [pc, #412]	; (80048c0 <runFastestPathTask+0x250>)
 8004724:	f003 fa54 	bl	8007bd0 <HAL_GPIO_WritePin>
			  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8004728:	2104      	movs	r1, #4
 800472a:	4866      	ldr	r0, [pc, #408]	; (80048c4 <runFastestPathTask+0x254>)
 800472c:	f005 f882 	bl	8009834 <HAL_TIM_IC_Start_IT>
			  last_curTask_tick = HAL_GetTick();
 8004730:	f002 fade 	bl	8006cf0 <HAL_GetTick>
 8004734:	4603      	mov	r3, r0
 8004736:	4a64      	ldr	r2, [pc, #400]	; (80048c8 <runFastestPathTask+0x258>)
 8004738:	6013      	str	r3, [r2, #0]
			  do {
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 800473a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800473e:	9302      	str	r3, [sp, #8]
 8004740:	2302      	movs	r3, #2
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <runFastestPathTask+0x25c>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2301      	movs	r3, #1
 800474a:	2237      	movs	r2, #55	; 0x37
 800474c:	21d0      	movs	r1, #208	; 0xd0
 800474e:	4860      	ldr	r0, [pc, #384]	; (80048d0 <runFastestPathTask+0x260>)
 8004750:	f003 fcae 	bl	80080b0 <HAL_I2C_Mem_Read>
 8004754:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <runFastestPathTask+0x25c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	b21a      	sxth	r2, r3
 800475c:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <runFastestPathTask+0x25c>)
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	b21b      	sxth	r3, r3
 8004762:	4313      	orrs	r3, r2
 8004764:	b21a      	sxth	r2, r3
 8004766:	4b4f      	ldr	r3, [pc, #316]	; (80048a4 <runFastestPathTask+0x234>)
 8004768:	801a      	strh	r2, [r3, #0]
				  if (!hadOvershoot) {
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11d      	bne.n	80047ac <runFastestPathTask+0x13c>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004770:	2201      	movs	r2, #1
 8004772:	2110      	movs	r1, #16
 8004774:	4857      	ldr	r0, [pc, #348]	; (80048d4 <runFastestPathTask+0x264>)
 8004776:	f003 fa2b 	bl	8007bd0 <HAL_GPIO_WritePin>
					  __delay_us(&htim4, 10); // wait for 10us
 800477a:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <runFastestPathTask+0x254>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	625a      	str	r2, [r3, #36]	; 0x24
 8004782:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <runFastestPathTask+0x254>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	2b09      	cmp	r3, #9
 800478a:	d9fa      	bls.n	8004782 <runFastestPathTask+0x112>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800478c:	2200      	movs	r2, #0
 800478e:	2110      	movs	r1, #16
 8004790:	4850      	ldr	r0, [pc, #320]	; (80048d4 <runFastestPathTask+0x264>)
 8004792:	f003 fa1d 	bl	8007bd0 <HAL_GPIO_WritePin>
					  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8004796:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <runFastestPathTask+0x254>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <runFastestPathTask+0x254>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0204 	orr.w	r2, r2, #4
 80047a4:	60da      	str	r2, [r3, #12]
					  osDelay(5); // give timer interrupt chance to update obsDist_US value
 80047a6:	2005      	movs	r0, #5
 80047a8:	f007 fd88 	bl	800c2bc <osDelay>
				  }


				  if (HAL_GetTick() - last_curTask_tick >=10) {
 80047ac:	f002 faa0 	bl	8006cf0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b45      	ldr	r3, [pc, #276]	; (80048c8 <runFastestPathTask+0x258>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b09      	cmp	r3, #9
 80047ba:	d9be      	bls.n	800473a <runFastestPathTask+0xca>
//					  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
					  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80047bc:	4b38      	ldr	r3, [pc, #224]	; (80048a0 <runFastestPathTask+0x230>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fb feb9 	bl	8000538 <__aeabi_f2d>
 80047c6:	4604      	mov	r4, r0
 80047c8:	460d      	mov	r5, r1
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <runFastestPathTask+0x234>)
 80047cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fb fe9f 	bl	8000514 <__aeabi_i2d>
 80047d6:	a32a      	add	r3, pc, #168	; (adr r3, 8004880 <runFastestPathTask+0x210>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fc f82e 	bl	800083c <__aeabi_ddiv>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	a327      	add	r3, pc, #156	; (adr r3, 8004888 <runFastestPathTask+0x218>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb fefb 	bl	80005e8 <__aeabi_dmul>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fb fd3f 	bl	800027c <__adddf3>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	f7fc f9a9 	bl	8000b5c <__aeabi_d2f>
 800480a:	4603      	mov	r3, r0
 800480c:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <runFastestPathTask+0x230>)
 800480e:	6013      	str	r3, [r2, #0]
					  if (obsDist_US > 55 && !hadOvershoot) {
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <runFastestPathTask+0x244>)
 8004812:	edd3 7a00 	vldr	s15, [r3]
 8004816:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80048d8 <runFastestPathTask+0x268>
 800481a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	dd08      	ble.n	8004836 <runFastestPathTask+0x1c6>
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <runFastestPathTask+0x1c6>
						  angle_left = angleNow;
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <runFastestPathTask+0x230>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <runFastestPathTask+0x238>)
 8004830:	6013      	str	r3, [r2, #0]
						  hadOvershoot = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
					  }

					  if (abs(targetAngle - angleNow) < 0.01) break;
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <runFastestPathTask+0x23c>)
 8004838:	ed93 7a00 	vldr	s14, [r3]
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <runFastestPathTask+0x230>)
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800484a:	ee17 3a90 	vmov	r3, s15
 800484e:	2b00      	cmp	r3, #0
 8004850:	db0d      	blt.n	800486e <runFastestPathTask+0x1fe>
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <runFastestPathTask+0x23c>)
 8004854:	ed93 7a00 	vldr	s14, [r3]
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <runFastestPathTask+0x230>)
 800485a:	edd3 7a00 	vldr	s15, [r3]
 800485e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004866:	ee17 3a90 	vmov	r3, s15
 800486a:	2b00      	cmp	r3, #0
 800486c:	dd36      	ble.n	80048dc <runFastestPathTask+0x26c>
					  last_curTask_tick = HAL_GetTick();
 800486e:	f002 fa3f 	bl	8006cf0 <HAL_GetTick>
 8004872:	4603      	mov	r3, r0
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <runFastestPathTask+0x258>)
 8004876:	6013      	str	r3, [r2, #0]
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8004878:	e75f      	b.n	800473a <runFastestPathTask+0xca>
 800487a:	bf00      	nop
 800487c:	f3af 8000 	nop.w
 8004880:	66666666 	.word	0x66666666
 8004884:	40306666 	.word	0x40306666
 8004888:	47ae147b 	.word	0x47ae147b
 800488c:	3f847ae1 	.word	0x3f847ae1
 8004890:	20000134 	.word	0x20000134
 8004894:	2000057c 	.word	0x2000057c
 8004898:	200004fc 	.word	0x200004fc
 800489c:	41f00000 	.word	0x41f00000
 80048a0:	200004ec 	.word	0x200004ec
 80048a4:	200004f2 	.word	0x200004f2
 80048a8:	20000564 	.word	0x20000564
 80048ac:	200004e8 	.word	0x200004e8
 80048b0:	42b40000 	.word	0x42b40000
 80048b4:	2000054c 	.word	0x2000054c
 80048b8:	200002a0 	.word	0x200002a0
 80048bc:	200003c0 	.word	0x200003c0
 80048c0:	40020000 	.word	0x40020000
 80048c4:	20000378 	.word	0x20000378
 80048c8:	200004f8 	.word	0x200004f8
 80048cc:	200004f0 	.word	0x200004f0
 80048d0:	2000024c 	.word	0x2000024c
 80048d4:	40020400 	.word	0x40020400
 80048d8:	425c0000 	.word	0x425c0000
					  if (abs(targetAngle - angleNow) < 0.01) break;
 80048dc:	bf00      	nop
				  }

				} while (1);
			  __SET_MOTOR_DUTY(&htim8, 0, 0);
 80048de:	4ba2      	ldr	r3, [pc, #648]	; (8004b68 <runFastestPathTask+0x4f8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	635a      	str	r2, [r3, #52]	; 0x34
 80048e6:	4ba0      	ldr	r3, [pc, #640]	; (8004b68 <runFastestPathTask+0x4f8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
			  __RESET_SERVO_TURN(&htim1);
 80048ee:	4b9f      	ldr	r3, [pc, #636]	; (8004b6c <runFastestPathTask+0x4fc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	224a      	movs	r2, #74	; 0x4a
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
 80048f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048fa:	f002 fa05 	bl	8006d08 <HAL_Delay>
			  osDelay(10);
 80048fe:	200a      	movs	r0, #10
 8004900:	f007 fcdc 	bl	800c2bc <osDelay>

			  obs_a = 30 * tanf(angle_left * PI / 180);
 8004904:	4b9a      	ldr	r3, [pc, #616]	; (8004b70 <runFastestPathTask+0x500>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fe15 	bl	8000538 <__aeabi_f2d>
 800490e:	a394      	add	r3, pc, #592	; (adr r3, 8004b60 <runFastestPathTask+0x4f0>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fe68 	bl	80005e8 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	4b93      	ldr	r3, [pc, #588]	; (8004b74 <runFastestPathTask+0x504>)
 8004926:	f7fb ff89 	bl	800083c <__aeabi_ddiv>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	f7fc f913 	bl	8000b5c <__aeabi_d2f>
 8004936:	4603      	mov	r3, r0
 8004938:	ee00 3a10 	vmov	s0, r3
 800493c:	f00a fee8 	bl	800f710 <tanf>
 8004940:	eef0 7a40 	vmov.f32	s15, s0
 8004944:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800494c:	4b8a      	ldr	r3, [pc, #552]	; (8004b78 <runFastestPathTask+0x508>)
 800494e:	edc3 7a00 	vstr	s15, [r3]
			  angle_right = atanf((60 - obs_a) / 30) * 180 / PI;
 8004952:	4b89      	ldr	r3, [pc, #548]	; (8004b78 <runFastestPathTask+0x508>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004b7c <runFastestPathTask+0x50c>
 800495c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004960:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8004964:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004968:	eeb0 0a47 	vmov.f32	s0, s14
 800496c:	f00a fdf4 	bl	800f558 <atanf>
 8004970:	eef0 7a40 	vmov.f32	s15, s0
 8004974:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004b80 <runFastestPathTask+0x510>
 8004978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800497c:	ee17 0a90 	vmov	r0, s15
 8004980:	f7fb fdda 	bl	8000538 <__aeabi_f2d>
 8004984:	a376      	add	r3, pc, #472	; (adr r3, 8004b60 <runFastestPathTask+0x4f0>)
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f7fb ff57 	bl	800083c <__aeabi_ddiv>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	f7fc f8e1 	bl	8000b5c <__aeabi_d2f>
 800499a:	4603      	mov	r3, r0
 800499c:	4a79      	ldr	r2, [pc, #484]	; (8004b84 <runFastestPathTask+0x514>)
 800499e:	6013      	str	r3, [r2, #0]
			  x = sqrtf((60 - obs_a) * (60 - obs_a) + 900) - 23; // 23 robot length offset
 80049a0:	4b75      	ldr	r3, [pc, #468]	; (8004b78 <runFastestPathTask+0x508>)
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004b7c <runFastestPathTask+0x50c>
 80049aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ae:	4b72      	ldr	r3, [pc, #456]	; (8004b78 <runFastestPathTask+0x508>)
 80049b0:	edd3 7a00 	vldr	s15, [r3]
 80049b4:	eddf 6a71 	vldr	s13, [pc, #452]	; 8004b7c <runFastestPathTask+0x50c>
 80049b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004b88 <runFastestPathTask+0x518>
 80049c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049c8:	eeb0 0a67 	vmov.f32	s0, s15
 80049cc:	f00a fda6 	bl	800f51c <sqrtf>
 80049d0:	eef0 7a40 	vmov.f32	s15, s0
 80049d4:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80049d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049dc:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <runFastestPathTask+0x51c>)
 80049de:	edc3 7a00 	vstr	s15, [r3]
 80049e2:	e09e      	b.n	8004b22 <runFastestPathTask+0x4b2>

		  } else if (step == 2) {
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <runFastestPathTask+0x520>)
 80049e6:	f993 3000 	ldrsb.w	r3, [r3]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d105      	bne.n	80049fa <runFastestPathTask+0x38a>
			  // 3: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 80049ee:	f7ff f84b 	bl	8003a88 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 80049f2:	200a      	movs	r0, #10
 80049f4:	f007 fc62 	bl	800c2bc <osDelay>
 80049f8:	e093      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 3) {
 80049fa:	4b65      	ldr	r3, [pc, #404]	; (8004b90 <runFastestPathTask+0x520>)
 80049fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d105      	bne.n	8004a10 <runFastestPathTask+0x3a0>
			  // 4: Turn right by 180 degree
			  FASTESTPATH_TURN_RIGHT_180();
 8004a04:	f7fe fed4 	bl	80037b0 <FASTESTPATH_TURN_RIGHT_180>
			  osDelay(10);
 8004a08:	200a      	movs	r0, #10
 8004a0a:	f007 fc57 	bl	800c2bc <osDelay>
 8004a0e:	e088      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  } else if (step == 4){
 8004a10:	4b5f      	ldr	r3, [pc, #380]	; (8004b90 <runFastestPathTask+0x520>)
 8004a12:	f993 3000 	ldrsb.w	r3, [r3]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d105      	bne.n	8004a26 <runFastestPathTask+0x3b6>
			  // 5: move forward until right beside obstacle
			  RobotMoveUntilIRHit();
 8004a1a:	f7ff f8dd 	bl	8003bd8 <RobotMoveUntilIRHit>
			  osDelay(10);
 8004a1e:	200a      	movs	r0, #10
 8004a20:	f007 fc4c 	bl	800c2bc <osDelay>
 8004a24:	e07d      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 5) {
 8004a26:	4b5a      	ldr	r3, [pc, #360]	; (8004b90 <runFastestPathTask+0x520>)
 8004a28:	f993 3000 	ldrsb.w	r3, [r3]
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d105      	bne.n	8004a3c <runFastestPathTask+0x3cc>
			  // 6: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004a30:	f7ff f82a 	bl	8003a88 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004a34:	200a      	movs	r0, #10
 8004a36:	f007 fc41 	bl	800c2bc <osDelay>
 8004a3a:	e072      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 6) {
 8004a3c:	4b54      	ldr	r3, [pc, #336]	; (8004b90 <runFastestPathTask+0x520>)
 8004a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d105      	bne.n	8004a52 <runFastestPathTask+0x3e2>
			  // 7: Turn right by 90 degree
			  FASTESTPATH_TURN_RIGHT_90();
 8004a46:	f7fe fe79 	bl	800373c <FASTESTPATH_TURN_RIGHT_90>
			  osDelay(10);
 8004a4a:	200a      	movs	r0, #10
 8004a4c:	f007 fc36 	bl	800c2bc <osDelay>
 8004a50:	e067      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 7) {
 8004a52:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <runFastestPathTask+0x520>)
 8004a54:	f993 3000 	ldrsb.w	r3, [r3]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d105      	bne.n	8004a68 <runFastestPathTask+0x3f8>
			  // 8: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004a5c:	f7ff f814 	bl	8003a88 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004a60:	200a      	movs	r0, #10
 8004a62:	f007 fc2b 	bl	800c2bc <osDelay>
 8004a66:	e05c      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 8) {
 8004a68:	4b49      	ldr	r3, [pc, #292]	; (8004b90 <runFastestPathTask+0x520>)
 8004a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d11d      	bne.n	8004aae <runFastestPathTask+0x43e>
			  // 9: turn right by angle_right
			  __SET_SERVO_TURN_MAX(&htim1, 1);
 8004a72:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <runFastestPathTask+0x4fc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2273      	movs	r2, #115	; 0x73
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
 8004a7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004a7e:	f002 f943 	bl	8006d08 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 2000, 1000);
 8004a82:	4b39      	ldr	r3, [pc, #228]	; (8004b68 <runFastestPathTask+0x4f8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a8c:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <runFastestPathTask+0x4f8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
			  targetAngle = angle_right *-1;
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <runFastestPathTask+0x514>)
 8004a98:	edd3 7a00 	vldr	s15, [r3]
 8004a9c:	eef1 7a67 	vneg.f32	s15, s15
 8004aa0:	4b3c      	ldr	r3, [pc, #240]	; (8004b94 <runFastestPathTask+0x524>)
 8004aa2:	edc3 7a00 	vstr	s15, [r3]
			  RobotTurn(&targetAngle);
 8004aa6:	483b      	ldr	r0, [pc, #236]	; (8004b94 <runFastestPathTask+0x524>)
 8004aa8:	f7fe fcf6 	bl	8003498 <RobotTurn>
 8004aac:	e039      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 9) {
 8004aae:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <runFastestPathTask+0x520>)
 8004ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	d109      	bne.n	8004acc <runFastestPathTask+0x45c>
			  //10: move until center of the original path
			  targetDist = x;
 8004ab8:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <runFastestPathTask+0x51c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a36      	ldr	r2, [pc, #216]	; (8004b98 <runFastestPathTask+0x528>)
 8004abe:	6013      	str	r3, [r2, #0]
			  RobotMoveDist(&targetDist, 1, SPEED_MODE_T);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4834      	ldr	r0, [pc, #208]	; (8004b98 <runFastestPathTask+0x528>)
 8004ac6:	f7fe f873 	bl	8002bb0 <RobotMoveDist>
 8004aca:	e02a      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  }else if (step == 10) {
 8004acc:	4b30      	ldr	r3, [pc, #192]	; (8004b90 <runFastestPathTask+0x520>)
 8004ace:	f993 3000 	ldrsb.w	r3, [r3]
 8004ad2:	2b0a      	cmp	r3, #10
 8004ad4:	d119      	bne.n	8004b0a <runFastestPathTask+0x49a>
			  //11: turn left to face the carpark
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 8004ad6:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <runFastestPathTask+0x4fc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2232      	movs	r2, #50	; 0x32
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004ae2:	f002 f911 	bl	8006d08 <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 1000, 2000);
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <runFastestPathTask+0x4f8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34
 8004af0:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <runFastestPathTask+0x4f8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
			  targetAngle = angle_right;
 8004afa:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <runFastestPathTask+0x514>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <runFastestPathTask+0x524>)
 8004b00:	6013      	str	r3, [r2, #0]
			  RobotTurn(&targetAngle);
 8004b02:	4824      	ldr	r0, [pc, #144]	; (8004b94 <runFastestPathTask+0x524>)
 8004b04:	f7fe fcc8 	bl	8003498 <RobotTurn>
 8004b08:	e00b      	b.n	8004b22 <runFastestPathTask+0x4b2>
		  } else if (step == 11) {
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <runFastestPathTask+0x520>)
 8004b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8004b10:	2b0b      	cmp	r3, #11
 8004b12:	d106      	bne.n	8004b22 <runFastestPathTask+0x4b2>
			  //12: back to the carpark
			  targetDist = 15;
 8004b14:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <runFastestPathTask+0x528>)
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <runFastestPathTask+0x52c>)
 8004b18:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	481e      	ldr	r0, [pc, #120]	; (8004b98 <runFastestPathTask+0x528>)
 8004b1e:	f7fe f9db 	bl	8002ed8 <RobotMoveDistObstacle>
		  }

		  clickOnce = 0;
 8004b22:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <runFastestPathTask+0x530>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <runFastestPathTask+0x534>)
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <runFastestPathTask+0x538>)
 8004b2e:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004b30:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <runFastestPathTask+0x534>)
 8004b32:	220b      	movs	r2, #11
 8004b34:	701a      	strb	r2, [r3, #0]
		  __CLEAR_CURCMD(curCmd);
 8004b36:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <runFastestPathTask+0x53c>)
 8004b38:	2264      	movs	r2, #100	; 0x64
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <runFastestPathTask+0x53c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	805a      	strh	r2, [r3, #2]
		  __ACK_TASK_DONE(&huart3, rxMsg);
 8004b42:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <runFastestPathTask+0x540>)
 8004b44:	210f      	movs	r1, #15
 8004b46:	481b      	ldr	r0, [pc, #108]	; (8004bb4 <runFastestPathTask+0x544>)
 8004b48:	f00a f830 	bl	800ebac <sniprintf>
 8004b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b50:	2206      	movs	r2, #6
 8004b52:	4919      	ldr	r1, [pc, #100]	; (8004bb8 <runFastestPathTask+0x548>)
 8004b54:	4819      	ldr	r0, [pc, #100]	; (8004bbc <runFastestPathTask+0x54c>)
 8004b56:	f006 fa7a 	bl	800b04e <HAL_UART_Transmit>
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 8004b5a:	e58f      	b.n	800467c <runFastestPathTask+0xc>
 8004b5c:	f3af 8000 	nop.w
 8004b60:	54524550 	.word	0x54524550
 8004b64:	400921fb 	.word	0x400921fb
 8004b68:	200003c0 	.word	0x200003c0
 8004b6c:	200002a0 	.word	0x200002a0
 8004b70:	20000564 	.word	0x20000564
 8004b74:	40668000 	.word	0x40668000
 8004b78:	2000055c 	.word	0x2000055c
 8004b7c:	42700000 	.word	0x42700000
 8004b80:	43340000 	.word	0x43340000
 8004b84:	20000568 	.word	0x20000568
 8004b88:	44610000 	.word	0x44610000
 8004b8c:	20000560 	.word	0x20000560
 8004b90:	2000057c 	.word	0x2000057c
 8004b94:	200004e8 	.word	0x200004e8
 8004b98:	200004fc 	.word	0x200004fc
 8004b9c:	41700000 	.word	0x41700000
 8004ba0:	20000578 	.word	0x20000578
 8004ba4:	20000134 	.word	0x20000134
 8004ba8:	20000135 	.word	0x20000135
 8004bac:	200004c0 	.word	0x200004c0
 8004bb0:	0801026c 	.word	0x0801026c
 8004bb4:	200004c4 	.word	0x200004c4
 8004bb8:	08010274 	.word	0x08010274
 8004bbc:	20000408 	.word	0x20000408

08004bc0 <runBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBuzzerTask */
void runBuzzerTask(void *argument)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBuzzerTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <runBuzzerTask+0xd0>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b0a      	cmp	r3, #10
 8004bce:	d01c      	beq.n	8004c0a <runBuzzerTask+0x4a>
 8004bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bd4:	f007 fb72 	bl	800c2bc <osDelay>
 8004bd8:	e7f6      	b.n	8004bc8 <runBuzzerTask+0x8>
	  else {
		  while (curCmd.val > 0) {
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004be0:	482c      	ldr	r0, [pc, #176]	; (8004c94 <runBuzzerTask+0xd4>)
 8004be2:	f002 fff5 	bl	8007bd0 <HAL_GPIO_WritePin>
			  osDelay(100);
 8004be6:	2064      	movs	r0, #100	; 0x64
 8004be8:	f007 fb68 	bl	800c2bc <osDelay>
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004bec:	2200      	movs	r2, #0
 8004bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bf2:	4828      	ldr	r0, [pc, #160]	; (8004c94 <runBuzzerTask+0xd4>)
 8004bf4:	f002 ffec 	bl	8007bd0 <HAL_GPIO_WritePin>
			  osDelay(100);
 8004bf8:	2064      	movs	r0, #100	; 0x64
 8004bfa:	f007 fb5f 	bl	800c2bc <osDelay>
			  curCmd.val--;
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <runBuzzerTask+0xd8>)
 8004c00:	885b      	ldrh	r3, [r3, #2]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <runBuzzerTask+0xd8>)
 8004c08:	805a      	strh	r2, [r3, #2]
		  while (curCmd.val > 0) {
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <runBuzzerTask+0xd8>)
 8004c0c:	885b      	ldrh	r3, [r3, #2]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e3      	bne.n	8004bda <runBuzzerTask+0x1a>
		  }
		  prevTask = curTask;
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <runBuzzerTask+0xd0>)
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <runBuzzerTask+0xdc>)
 8004c18:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <runBuzzerTask+0xd0>)
 8004c1c:	220b      	movs	r2, #11
 8004c1e:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <runBuzzerTask+0xe0>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]


		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004c26:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d112      	bne.n	8004c58 <runBuzzerTask+0x98>
				__CLEAR_CURCMD(curCmd);
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <runBuzzerTask+0xd8>)
 8004c34:	2264      	movs	r2, #100	; 0x64
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <runBuzzerTask+0xd8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004c3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <runBuzzerTask+0xe8>)
 8004c40:	210f      	movs	r1, #15
 8004c42:	481a      	ldr	r0, [pc, #104]	; (8004cac <runBuzzerTask+0xec>)
 8004c44:	f009 ffb2 	bl	800ebac <sniprintf>
 8004c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c4c:	2206      	movs	r2, #6
 8004c4e:	4918      	ldr	r1, [pc, #96]	; (8004cb0 <runBuzzerTask+0xf0>)
 8004c50:	4818      	ldr	r0, [pc, #96]	; (8004cb4 <runBuzzerTask+0xf4>)
 8004c52:	f006 f9fc 	bl	800b04e <HAL_UART_Transmit>
 8004c56:	e7b7      	b.n	8004bc8 <runBuzzerTask+0x8>
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	4a0e      	ldr	r2, [pc, #56]	; (8004c98 <runBuzzerTask+0xd8>)
 8004c5e:	4911      	ldr	r1, [pc, #68]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c70:	7892      	ldrb	r2, [r2, #2]
 8004c72:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c76:	fb01 f202 	mul.w	r2, r1, r2
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <runBuzzerTask+0xe4>)
 8004c80:	705a      	strb	r2, [r3, #1]
 8004c82:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <runBuzzerTask+0xf8>)
 8004c84:	210f      	movs	r1, #15
 8004c86:	4809      	ldr	r0, [pc, #36]	; (8004cac <runBuzzerTask+0xec>)
 8004c88:	f009 ff90 	bl	800ebac <sniprintf>
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004c8c:	e79c      	b.n	8004bc8 <runBuzzerTask+0x8>
 8004c8e:	bf00      	nop
 8004c90:	20000134 	.word	0x20000134
 8004c94:	40020400 	.word	0x40020400
 8004c98:	200004c0 	.word	0x200004c0
 8004c9c:	20000135 	.word	0x20000135
 8004ca0:	20000578 	.word	0x20000578
 8004ca4:	2000048c 	.word	0x2000048c
 8004ca8:	0801026c 	.word	0x0801026c
 8004cac:	200004c4 	.word	0x200004c4
 8004cb0:	08010274 	.word	0x08010274
 8004cb4:	20000408 	.word	0x20000408
 8004cb8:	0801027c 	.word	0x0801027c

08004cbc <runFLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FL) osDelay(1000);
 8004cc4:	4b9d      	ldr	r3, [pc, #628]	; (8004f3c <runFLTask+0x280>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d004      	beq.n	8004cd6 <runFLTask+0x1a>
 8004ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cd0:	f007 faf4 	bl	800c2bc <osDelay>
 8004cd4:	e7f6      	b.n	8004cc4 <runFLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8004cd6:	4b9a      	ldr	r3, [pc, #616]	; (8004f40 <runFLTask+0x284>)
 8004cd8:	885b      	ldrh	r3, [r3, #2]
 8004cda:	2b14      	cmp	r3, #20
 8004cdc:	f000 8081 	beq.w	8004de2 <runFLTask+0x126>
 8004ce0:	2b1e      	cmp	r3, #30
 8004ce2:	f040 8107 	bne.w	8004ef4 <runFLTask+0x238>
		  case 30: // FL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004ce6:	4b97      	ldr	r3, [pc, #604]	; (8004f44 <runFLTask+0x288>)
 8004ce8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004cec:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8004f48 <runFLTask+0x28c>
 8004cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	dd01      	ble.n	8004cfe <runFLTask+0x42>
 8004cfa:	2373      	movs	r3, #115	; 0x73
 8004cfc:	e012      	b.n	8004d24 <runFLTask+0x68>
 8004cfe:	4b91      	ldr	r3, [pc, #580]	; (8004f44 <runFLTask+0x288>)
 8004d00:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004d04:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004f4c <runFLTask+0x290>
 8004d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d10:	d501      	bpl.n	8004d16 <runFLTask+0x5a>
 8004d12:	2332      	movs	r3, #50	; 0x32
 8004d14:	e006      	b.n	8004d24 <runFLTask+0x68>
 8004d16:	4b8b      	ldr	r3, [pc, #556]	; (8004f44 <runFLTask+0x288>)
 8004d18:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d20:	ee17 3a90 	vmov	r3, s15
 8004d24:	4a8a      	ldr	r2, [pc, #552]	; (8004f50 <runFLTask+0x294>)
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d2e:	f001 ffeb 	bl	8006d08 <HAL_Delay>
 8004d32:	4b84      	ldr	r3, [pc, #528]	; (8004f44 <runFLTask+0x288>)
 8004d34:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004d38:	4a86      	ldr	r2, [pc, #536]	; (8004f54 <runFLTask+0x298>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b81      	ldr	r3, [pc, #516]	; (8004f44 <runFLTask+0x288>)
 8004d3e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2104      	movs	r1, #4
 8004d50:	4881      	ldr	r0, [pc, #516]	; (8004f58 <runFLTask+0x29c>)
 8004d52:	f002 ff3d 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004d56:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <runFLTask+0x288>)
 8004d58:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	2108      	movs	r1, #8
 8004d6a:	487b      	ldr	r0, [pc, #492]	; (8004f58 <runFLTask+0x29c>)
 8004d6c:	f002 ff30 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004d70:	4b74      	ldr	r3, [pc, #464]	; (8004f44 <runFLTask+0x288>)
 8004d72:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	2120      	movs	r1, #32
 8004d84:	4874      	ldr	r0, [pc, #464]	; (8004f58 <runFLTask+0x29c>)
 8004d86:	f002 ff23 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004d8a:	4b6e      	ldr	r3, [pc, #440]	; (8004f44 <runFLTask+0x288>)
 8004d8c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	486e      	ldr	r0, [pc, #440]	; (8004f58 <runFLTask+0x29c>)
 8004da0:	f002 ff16 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004da4:	4b67      	ldr	r3, [pc, #412]	; (8004f44 <runFLTask+0x288>)
 8004da6:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8004daa:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <runFLTask+0x2a0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	635a      	str	r2, [r3, #52]	; 0x34
 8004db0:	4b64      	ldr	r3, [pc, #400]	; (8004f44 <runFLTask+0x288>)
 8004db2:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8004db6:	4b69      	ldr	r3, [pc, #420]	; (8004f5c <runFLTask+0x2a0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004dbc:	4865      	ldr	r0, [pc, #404]	; (8004f54 <runFLTask+0x298>)
 8004dbe:	f7fe fb6b 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8004dc2:	200a      	movs	r0, #10
 8004dc4:	f007 fa7a 	bl	800c2bc <osDelay>
			  targetDist = 4;
 8004dc8:	4b65      	ldr	r3, [pc, #404]	; (8004f60 <runFLTask+0x2a4>)
 8004dca:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004dce:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4862      	ldr	r0, [pc, #392]	; (8004f60 <runFLTask+0x2a4>)
 8004dd6:	f7fd feeb 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8004dda:	200a      	movs	r0, #10
 8004ddc:	f007 fa6e 	bl	800c2bc <osDelay>
			  break;
 8004de0:	e126      	b.n	8005030 <runFLTask+0x374>
		  case 20: // FL20 (outdoor 3x1)
			  targetDist = 4;
 8004de2:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <runFLTask+0x2a4>)
 8004de4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004de8:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004dea:	2200      	movs	r2, #0
 8004dec:	2100      	movs	r1, #0
 8004dee:	485c      	ldr	r0, [pc, #368]	; (8004f60 <runFLTask+0x2a4>)
 8004df0:	f7fd fede 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8004df4:	200a      	movs	r0, #10
 8004df6:	f007 fa61 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 8004dfa:	4b52      	ldr	r3, [pc, #328]	; (8004f44 <runFLTask+0x288>)
 8004dfc:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004e00:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004f48 <runFLTask+0x28c>
 8004e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0c:	dd01      	ble.n	8004e12 <runFLTask+0x156>
 8004e0e:	2373      	movs	r3, #115	; 0x73
 8004e10:	e012      	b.n	8004e38 <runFLTask+0x17c>
 8004e12:	4b4c      	ldr	r3, [pc, #304]	; (8004f44 <runFLTask+0x288>)
 8004e14:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004e18:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004f4c <runFLTask+0x290>
 8004e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e24:	d501      	bpl.n	8004e2a <runFLTask+0x16e>
 8004e26:	2332      	movs	r3, #50	; 0x32
 8004e28:	e006      	b.n	8004e38 <runFLTask+0x17c>
 8004e2a:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <runFLTask+0x288>)
 8004e2c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e34:	ee17 3a90 	vmov	r3, s15
 8004e38:	4a45      	ldr	r2, [pc, #276]	; (8004f50 <runFLTask+0x294>)
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004e42:	f001 ff61 	bl	8006d08 <HAL_Delay>
 8004e46:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <runFLTask+0x288>)
 8004e48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e4c:	4a41      	ldr	r2, [pc, #260]	; (8004f54 <runFLTask+0x298>)
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b3c      	ldr	r3, [pc, #240]	; (8004f44 <runFLTask+0x288>)
 8004e52:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	2104      	movs	r1, #4
 8004e64:	483c      	ldr	r0, [pc, #240]	; (8004f58 <runFLTask+0x29c>)
 8004e66:	f002 feb3 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004e6a:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <runFLTask+0x288>)
 8004e6c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2108      	movs	r1, #8
 8004e7e:	4836      	ldr	r0, [pc, #216]	; (8004f58 <runFLTask+0x29c>)
 8004e80:	f002 fea6 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004e84:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <runFLTask+0x288>)
 8004e86:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	2120      	movs	r1, #32
 8004e98:	482f      	ldr	r0, [pc, #188]	; (8004f58 <runFLTask+0x29c>)
 8004e9a:	f002 fe99 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004e9e:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <runFLTask+0x288>)
 8004ea0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	4829      	ldr	r0, [pc, #164]	; (8004f58 <runFLTask+0x29c>)
 8004eb4:	f002 fe8c 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004eb8:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <runFLTask+0x288>)
 8004eba:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8004ebe:	4b27      	ldr	r3, [pc, #156]	; (8004f5c <runFLTask+0x2a0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <runFLTask+0x288>)
 8004ec6:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <runFLTask+0x2a0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004ed0:	4820      	ldr	r0, [pc, #128]	; (8004f54 <runFLTask+0x298>)
 8004ed2:	f7fe fae1 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8004ed6:	200a      	movs	r0, #10
 8004ed8:	f007 f9f0 	bl	800c2bc <osDelay>
			  targetDist = 7;
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <runFLTask+0x2a4>)
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <runFLTask+0x2a8>)
 8004ee0:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	481e      	ldr	r0, [pc, #120]	; (8004f60 <runFLTask+0x2a4>)
 8004ee8:	f7fd fe62 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8004eec:	200a      	movs	r0, #10
 8004eee:	f007 f9e5 	bl	800c2bc <osDelay>
			  break;
 8004ef2:	e09d      	b.n	8005030 <runFLTask+0x374>
		  default: // FL00 (indoor 3x1)
			  targetDist = 8;
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <runFLTask+0x2a4>)
 8004ef6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004efa:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004efc:	2200      	movs	r2, #0
 8004efe:	2101      	movs	r1, #1
 8004f00:	4817      	ldr	r0, [pc, #92]	; (8004f60 <runFLTask+0x2a4>)
 8004f02:	f7fd fe55 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8004f06:	200a      	movs	r0, #10
 8004f08:	f007 f9d8 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <runFLTask+0x288>)
 8004f0e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004f12:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004f48 <runFLTask+0x28c>
 8004f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1e:	dd01      	ble.n	8004f24 <runFLTask+0x268>
 8004f20:	2373      	movs	r3, #115	; 0x73
 8004f22:	e028      	b.n	8004f76 <runFLTask+0x2ba>
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <runFLTask+0x288>)
 8004f26:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004f2a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004f4c <runFLTask+0x290>
 8004f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	d517      	bpl.n	8004f68 <runFLTask+0x2ac>
 8004f38:	2332      	movs	r3, #50	; 0x32
 8004f3a:	e01c      	b.n	8004f76 <runFLTask+0x2ba>
 8004f3c:	20000134 	.word	0x20000134
 8004f40:	200004c0 	.word	0x200004c0
 8004f44:	20000004 	.word	0x20000004
 8004f48:	42e60000 	.word	0x42e60000
 8004f4c:	42480000 	.word	0x42480000
 8004f50:	200002a0 	.word	0x200002a0
 8004f54:	200004e8 	.word	0x200004e8
 8004f58:	40020000 	.word	0x40020000
 8004f5c:	200003c0 	.word	0x200003c0
 8004f60:	200004fc 	.word	0x200004fc
 8004f64:	40e00000 	.word	0x40e00000
 8004f68:	4b50      	ldr	r3, [pc, #320]	; (80050ac <runFLTask+0x3f0>)
 8004f6a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f72:	ee17 3a90 	vmov	r3, s15
 8004f76:	4a4e      	ldr	r2, [pc, #312]	; (80050b0 <runFLTask+0x3f4>)
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f80:	f001 fec2 	bl	8006d08 <HAL_Delay>
 8004f84:	4b49      	ldr	r3, [pc, #292]	; (80050ac <runFLTask+0x3f0>)
 8004f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f88:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <runFLTask+0x3f8>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b47      	ldr	r3, [pc, #284]	; (80050ac <runFLTask+0x3f0>)
 8004f8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	4845      	ldr	r0, [pc, #276]	; (80050b8 <runFLTask+0x3fc>)
 8004fa2:	f002 fe15 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004fa6:	4b41      	ldr	r3, [pc, #260]	; (80050ac <runFLTask+0x3f0>)
 8004fa8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2108      	movs	r1, #8
 8004fba:	483f      	ldr	r0, [pc, #252]	; (80050b8 <runFLTask+0x3fc>)
 8004fbc:	f002 fe08 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004fc0:	4b3a      	ldr	r3, [pc, #232]	; (80050ac <runFLTask+0x3f0>)
 8004fc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	4838      	ldr	r0, [pc, #224]	; (80050b8 <runFLTask+0x3fc>)
 8004fd6:	f002 fdfb 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004fda:	4b34      	ldr	r3, [pc, #208]	; (80050ac <runFLTask+0x3f0>)
 8004fdc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf14      	ite	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	2300      	moveq	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	2110      	movs	r1, #16
 8004fee:	4832      	ldr	r0, [pc, #200]	; (80050b8 <runFLTask+0x3fc>)
 8004ff0:	f002 fdee 	bl	8007bd0 <HAL_GPIO_WritePin>
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <runFLTask+0x3f0>)
 8004ff6:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8004ffa:	4b30      	ldr	r3, [pc, #192]	; (80050bc <runFLTask+0x400>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <runFLTask+0x3f0>)
 8005002:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8005006:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <runFLTask+0x400>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 800500c:	4829      	ldr	r0, [pc, #164]	; (80050b4 <runFLTask+0x3f8>)
 800500e:	f7fe fa43 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005012:	200a      	movs	r0, #10
 8005014:	f007 f952 	bl	800c2bc <osDelay>
			  targetDist = 5.5;
 8005018:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <runFLTask+0x404>)
 800501a:	4a2a      	ldr	r2, [pc, #168]	; (80050c4 <runFLTask+0x408>)
 800501c:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800501e:	2200      	movs	r2, #0
 8005020:	2100      	movs	r1, #0
 8005022:	4827      	ldr	r0, [pc, #156]	; (80050c0 <runFLTask+0x404>)
 8005024:	f7fd fdc4 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005028:	200a      	movs	r0, #10
 800502a:	f007 f947 	bl	800c2bc <osDelay>
			  break;
 800502e:	bf00      	nop
		  }


		  clickOnce = 0;
 8005030:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <runFLTask+0x40c>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005036:	4b25      	ldr	r3, [pc, #148]	; (80050cc <runFLTask+0x410>)
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <runFLTask+0x414>)
 800503c:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 800503e:	4b23      	ldr	r3, [pc, #140]	; (80050cc <runFLTask+0x410>)
 8005040:	220b      	movs	r2, #11
 8005042:	701a      	strb	r2, [r3, #0]

		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005044:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <runFLTask+0x418>)
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	4b22      	ldr	r3, [pc, #136]	; (80050d4 <runFLTask+0x418>)
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	429a      	cmp	r2, r3
 800504e:	d112      	bne.n	8005076 <runFLTask+0x3ba>
				__CLEAR_CURCMD(curCmd);
 8005050:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <runFLTask+0x41c>)
 8005052:	2264      	movs	r2, #100	; 0x64
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <runFLTask+0x41c>)
 8005058:	2200      	movs	r2, #0
 800505a:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 800505c:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <runFLTask+0x420>)
 800505e:	210f      	movs	r1, #15
 8005060:	481f      	ldr	r0, [pc, #124]	; (80050e0 <runFLTask+0x424>)
 8005062:	f009 fda3 	bl	800ebac <sniprintf>
 8005066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800506a:	2206      	movs	r2, #6
 800506c:	491d      	ldr	r1, [pc, #116]	; (80050e4 <runFLTask+0x428>)
 800506e:	481e      	ldr	r0, [pc, #120]	; (80050e8 <runFLTask+0x42c>)
 8005070:	f005 ffed 	bl	800b04e <HAL_UART_Transmit>
 8005074:	e626      	b.n	8004cc4 <runFLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <runFLTask+0x418>)
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <runFLTask+0x41c>)
 800507c:	4915      	ldr	r1, [pc, #84]	; (80050d4 <runFLTask+0x418>)
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <runFLTask+0x418>)
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	3301      	adds	r3, #1
 800508c:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <runFLTask+0x418>)
 800508e:	7892      	ldrb	r2, [r2, #2]
 8005090:	fb93 f1f2 	sdiv	r1, r3, r2
 8005094:	fb01 f202 	mul.w	r2, r1, r2
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	b2da      	uxtb	r2, r3
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <runFLTask+0x418>)
 800509e:	705a      	strb	r2, [r3, #1]
 80050a0:	4a12      	ldr	r2, [pc, #72]	; (80050ec <runFLTask+0x430>)
 80050a2:	210f      	movs	r1, #15
 80050a4:	480e      	ldr	r0, [pc, #56]	; (80050e0 <runFLTask+0x424>)
 80050a6:	f009 fd81 	bl	800ebac <sniprintf>
	  if (curTask != TASK_FL) osDelay(1000);
 80050aa:	e60b      	b.n	8004cc4 <runFLTask+0x8>
 80050ac:	20000004 	.word	0x20000004
 80050b0:	200002a0 	.word	0x200002a0
 80050b4:	200004e8 	.word	0x200004e8
 80050b8:	40020000 	.word	0x40020000
 80050bc:	200003c0 	.word	0x200003c0
 80050c0:	200004fc 	.word	0x200004fc
 80050c4:	40b00000 	.word	0x40b00000
 80050c8:	20000578 	.word	0x20000578
 80050cc:	20000134 	.word	0x20000134
 80050d0:	20000135 	.word	0x20000135
 80050d4:	2000048c 	.word	0x2000048c
 80050d8:	200004c0 	.word	0x200004c0
 80050dc:	0801026c 	.word	0x0801026c
 80050e0:	200004c4 	.word	0x200004c4
 80050e4:	08010274 	.word	0x08010274
 80050e8:	20000408 	.word	0x20000408
 80050ec:	0801027c 	.word	0x0801027c

080050f0 <runFRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FR) osDelay(1000);
 80050f8:	4b9d      	ldr	r3, [pc, #628]	; (8005370 <runFRTask+0x280>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d004      	beq.n	800510a <runFRTask+0x1a>
 8005100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005104:	f007 f8da 	bl	800c2bc <osDelay>
 8005108:	e7f6      	b.n	80050f8 <runFRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 800510a:	4b9a      	ldr	r3, [pc, #616]	; (8005374 <runFRTask+0x284>)
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	2b14      	cmp	r3, #20
 8005110:	f000 8081 	beq.w	8005216 <runFRTask+0x126>
 8005114:	2b1e      	cmp	r3, #30
 8005116:	f040 8108 	bne.w	800532a <runFRTask+0x23a>
		  case 30: // FR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 800511a:	4b97      	ldr	r3, [pc, #604]	; (8005378 <runFRTask+0x288>)
 800511c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8005120:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800537c <runFRTask+0x28c>
 8005124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512c:	dd01      	ble.n	8005132 <runFRTask+0x42>
 800512e:	2373      	movs	r3, #115	; 0x73
 8005130:	e012      	b.n	8005158 <runFRTask+0x68>
 8005132:	4b91      	ldr	r3, [pc, #580]	; (8005378 <runFRTask+0x288>)
 8005134:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8005138:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005380 <runFRTask+0x290>
 800513c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005144:	d501      	bpl.n	800514a <runFRTask+0x5a>
 8005146:	2332      	movs	r3, #50	; 0x32
 8005148:	e006      	b.n	8005158 <runFRTask+0x68>
 800514a:	4b8b      	ldr	r3, [pc, #556]	; (8005378 <runFRTask+0x288>)
 800514c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8005150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005154:	ee17 3a90 	vmov	r3, s15
 8005158:	4a8a      	ldr	r2, [pc, #552]	; (8005384 <runFRTask+0x294>)
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
 800515e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005162:	f001 fdd1 	bl	8006d08 <HAL_Delay>
 8005166:	4b84      	ldr	r3, [pc, #528]	; (8005378 <runFRTask+0x288>)
 8005168:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800516c:	4a86      	ldr	r2, [pc, #536]	; (8005388 <runFRTask+0x298>)
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b81      	ldr	r3, [pc, #516]	; (8005378 <runFRTask+0x288>)
 8005172:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005176:	2b00      	cmp	r3, #0
 8005178:	bf0c      	ite	eq
 800517a:	2301      	moveq	r3, #1
 800517c:	2300      	movne	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	2104      	movs	r1, #4
 8005184:	4881      	ldr	r0, [pc, #516]	; (800538c <runFRTask+0x29c>)
 8005186:	f002 fd23 	bl	8007bd0 <HAL_GPIO_WritePin>
 800518a:	4b7b      	ldr	r3, [pc, #492]	; (8005378 <runFRTask+0x288>)
 800518c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	2108      	movs	r1, #8
 800519e:	487b      	ldr	r0, [pc, #492]	; (800538c <runFRTask+0x29c>)
 80051a0:	f002 fd16 	bl	8007bd0 <HAL_GPIO_WritePin>
 80051a4:	4b74      	ldr	r3, [pc, #464]	; (8005378 <runFRTask+0x288>)
 80051a6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	2120      	movs	r1, #32
 80051b8:	4874      	ldr	r0, [pc, #464]	; (800538c <runFRTask+0x29c>)
 80051ba:	f002 fd09 	bl	8007bd0 <HAL_GPIO_WritePin>
 80051be:	4b6e      	ldr	r3, [pc, #440]	; (8005378 <runFRTask+0x288>)
 80051c0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	2110      	movs	r1, #16
 80051d2:	486e      	ldr	r0, [pc, #440]	; (800538c <runFRTask+0x29c>)
 80051d4:	f002 fcfc 	bl	8007bd0 <HAL_GPIO_WritePin>
 80051d8:	4b67      	ldr	r3, [pc, #412]	; (8005378 <runFRTask+0x288>)
 80051da:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80051de:	4b6c      	ldr	r3, [pc, #432]	; (8005390 <runFRTask+0x2a0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	635a      	str	r2, [r3, #52]	; 0x34
 80051e4:	4b64      	ldr	r3, [pc, #400]	; (8005378 <runFRTask+0x288>)
 80051e6:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80051ea:	4b69      	ldr	r3, [pc, #420]	; (8005390 <runFRTask+0x2a0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80051f0:	4865      	ldr	r0, [pc, #404]	; (8005388 <runFRTask+0x298>)
 80051f2:	f7fe f951 	bl	8003498 <RobotTurn>
			  osDelay(10);
 80051f6:	200a      	movs	r0, #10
 80051f8:	f007 f860 	bl	800c2bc <osDelay>
			  targetDist = 4;
 80051fc:	4b65      	ldr	r3, [pc, #404]	; (8005394 <runFRTask+0x2a4>)
 80051fe:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8005202:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	4862      	ldr	r0, [pc, #392]	; (8005394 <runFRTask+0x2a4>)
 800520a:	f7fd fcd1 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 800520e:	200a      	movs	r0, #10
 8005210:	f007 f854 	bl	800c2bc <osDelay>
			  break;
 8005214:	e128      	b.n	8005468 <runFRTask+0x378>
		  case 20: // FR20 (outdoor 3x1)
			  targetDist = 4;
 8005216:	4b5f      	ldr	r3, [pc, #380]	; (8005394 <runFRTask+0x2a4>)
 8005218:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800521c:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800521e:	2200      	movs	r2, #0
 8005220:	2100      	movs	r1, #0
 8005222:	485c      	ldr	r0, [pc, #368]	; (8005394 <runFRTask+0x2a4>)
 8005224:	f7fd fcc4 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005228:	200a      	movs	r0, #10
 800522a:	f007 f847 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 800522e:	4b52      	ldr	r3, [pc, #328]	; (8005378 <runFRTask+0x288>)
 8005230:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005234:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800537c <runFRTask+0x28c>
 8005238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005240:	dd01      	ble.n	8005246 <runFRTask+0x156>
 8005242:	2373      	movs	r3, #115	; 0x73
 8005244:	e012      	b.n	800526c <runFRTask+0x17c>
 8005246:	4b4c      	ldr	r3, [pc, #304]	; (8005378 <runFRTask+0x288>)
 8005248:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800524c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005380 <runFRTask+0x290>
 8005250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	d501      	bpl.n	800525e <runFRTask+0x16e>
 800525a:	2332      	movs	r3, #50	; 0x32
 800525c:	e006      	b.n	800526c <runFRTask+0x17c>
 800525e:	4b46      	ldr	r3, [pc, #280]	; (8005378 <runFRTask+0x288>)
 8005260:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005268:	ee17 3a90 	vmov	r3, s15
 800526c:	4a45      	ldr	r2, [pc, #276]	; (8005384 <runFRTask+0x294>)
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005276:	f001 fd47 	bl	8006d08 <HAL_Delay>
 800527a:	4b3f      	ldr	r3, [pc, #252]	; (8005378 <runFRTask+0x288>)
 800527c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005280:	4a41      	ldr	r2, [pc, #260]	; (8005388 <runFRTask+0x298>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b3c      	ldr	r3, [pc, #240]	; (8005378 <runFRTask+0x288>)
 8005286:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800528a:	2b00      	cmp	r3, #0
 800528c:	bf0c      	ite	eq
 800528e:	2301      	moveq	r3, #1
 8005290:	2300      	movne	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	2104      	movs	r1, #4
 8005298:	483c      	ldr	r0, [pc, #240]	; (800538c <runFRTask+0x29c>)
 800529a:	f002 fc99 	bl	8007bd0 <HAL_GPIO_WritePin>
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <runFRTask+0x288>)
 80052a0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	2108      	movs	r1, #8
 80052b2:	4836      	ldr	r0, [pc, #216]	; (800538c <runFRTask+0x29c>)
 80052b4:	f002 fc8c 	bl	8007bd0 <HAL_GPIO_WritePin>
 80052b8:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <runFRTask+0x288>)
 80052ba:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	2120      	movs	r1, #32
 80052cc:	482f      	ldr	r0, [pc, #188]	; (800538c <runFRTask+0x29c>)
 80052ce:	f002 fc7f 	bl	8007bd0 <HAL_GPIO_WritePin>
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <runFRTask+0x288>)
 80052d4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	2110      	movs	r1, #16
 80052e6:	4829      	ldr	r0, [pc, #164]	; (800538c <runFRTask+0x29c>)
 80052e8:	f002 fc72 	bl	8007bd0 <HAL_GPIO_WritePin>
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <runFRTask+0x288>)
 80052ee:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80052f2:	4b27      	ldr	r3, [pc, #156]	; (8005390 <runFRTask+0x2a0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34
 80052f8:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <runFRTask+0x288>)
 80052fa:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <runFRTask+0x2a0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005304:	4820      	ldr	r0, [pc, #128]	; (8005388 <runFRTask+0x298>)
 8005306:	f7fe f8c7 	bl	8003498 <RobotTurn>
			  osDelay(10);
 800530a:	200a      	movs	r0, #10
 800530c:	f006 ffd6 	bl	800c2bc <osDelay>
			  targetDist = 8;
 8005310:	4b20      	ldr	r3, [pc, #128]	; (8005394 <runFRTask+0x2a4>)
 8005312:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8005316:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005318:	2200      	movs	r2, #0
 800531a:	2100      	movs	r1, #0
 800531c:	481d      	ldr	r0, [pc, #116]	; (8005394 <runFRTask+0x2a4>)
 800531e:	f7fd fc47 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005322:	200a      	movs	r0, #10
 8005324:	f006 ffca 	bl	800c2bc <osDelay>
			  break;
 8005328:	e09e      	b.n	8005468 <runFRTask+0x378>
		  default: // FR00 (indoor 3x1)
			  targetDist = 12;
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <runFRTask+0x2a4>)
 800532c:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <runFRTask+0x2a8>)
 800532e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005330:	2200      	movs	r2, #0
 8005332:	2101      	movs	r1, #1
 8005334:	4817      	ldr	r0, [pc, #92]	; (8005394 <runFRTask+0x2a4>)
 8005336:	f7fd fc3b 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 800533a:	200a      	movs	r0, #10
 800533c:	f006 ffbe 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8005340:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <runFRTask+0x288>)
 8005342:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800537c <runFRTask+0x28c>
 800534a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800534e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005352:	dd01      	ble.n	8005358 <runFRTask+0x268>
 8005354:	2373      	movs	r3, #115	; 0x73
 8005356:	e028      	b.n	80053aa <runFRTask+0x2ba>
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <runFRTask+0x288>)
 800535a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800535e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005380 <runFRTask+0x290>
 8005362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d517      	bpl.n	800539c <runFRTask+0x2ac>
 800536c:	2332      	movs	r3, #50	; 0x32
 800536e:	e01c      	b.n	80053aa <runFRTask+0x2ba>
 8005370:	20000134 	.word	0x20000134
 8005374:	200004c0 	.word	0x200004c0
 8005378:	20000004 	.word	0x20000004
 800537c:	42e60000 	.word	0x42e60000
 8005380:	42480000 	.word	0x42480000
 8005384:	200002a0 	.word	0x200002a0
 8005388:	200004e8 	.word	0x200004e8
 800538c:	40020000 	.word	0x40020000
 8005390:	200003c0 	.word	0x200003c0
 8005394:	200004fc 	.word	0x200004fc
 8005398:	41400000 	.word	0x41400000
 800539c:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <runFRTask+0x3f4>)
 800539e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80053a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a6:	ee17 3a90 	vmov	r3, s15
 80053aa:	4a4f      	ldr	r2, [pc, #316]	; (80054e8 <runFRTask+0x3f8>)
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	6413      	str	r3, [r2, #64]	; 0x40
 80053b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80053b4:	f001 fca8 	bl	8006d08 <HAL_Delay>
 80053b8:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <runFRTask+0x3f4>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	4a4b      	ldr	r2, [pc, #300]	; (80054ec <runFRTask+0x3fc>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <runFRTask+0x3f4>)
 80053c4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	2104      	movs	r1, #4
 80053d6:	4846      	ldr	r0, [pc, #280]	; (80054f0 <runFRTask+0x400>)
 80053d8:	f002 fbfa 	bl	8007bd0 <HAL_GPIO_WritePin>
 80053dc:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <runFRTask+0x3f4>)
 80053de:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf14      	ite	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	2300      	moveq	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	2108      	movs	r1, #8
 80053f0:	483f      	ldr	r0, [pc, #252]	; (80054f0 <runFRTask+0x400>)
 80053f2:	f002 fbed 	bl	8007bd0 <HAL_GPIO_WritePin>
 80053f6:	4b3b      	ldr	r3, [pc, #236]	; (80054e4 <runFRTask+0x3f4>)
 80053f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	2120      	movs	r1, #32
 800540a:	4839      	ldr	r0, [pc, #228]	; (80054f0 <runFRTask+0x400>)
 800540c:	f002 fbe0 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005410:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <runFRTask+0x3f4>)
 8005412:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	2110      	movs	r1, #16
 8005424:	4832      	ldr	r0, [pc, #200]	; (80054f0 <runFRTask+0x400>)
 8005426:	f002 fbd3 	bl	8007bd0 <HAL_GPIO_WritePin>
 800542a:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <runFRTask+0x3f4>)
 800542c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8005430:	4b30      	ldr	r3, [pc, #192]	; (80054f4 <runFRTask+0x404>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	635a      	str	r2, [r3, #52]	; 0x34
 8005436:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <runFRTask+0x3f4>)
 8005438:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800543c:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <runFRTask+0x404>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005442:	482a      	ldr	r0, [pc, #168]	; (80054ec <runFRTask+0x3fc>)
 8005444:	f7fe f828 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005448:	200a      	movs	r0, #10
 800544a:	f006 ff37 	bl	800c2bc <osDelay>
			  targetDist = 0;
 800544e:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <runFRTask+0x408>)
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005456:	2200      	movs	r2, #0
 8005458:	2101      	movs	r1, #1
 800545a:	4827      	ldr	r0, [pc, #156]	; (80054f8 <runFRTask+0x408>)
 800545c:	f7fd fba8 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005460:	200a      	movs	r0, #10
 8005462:	f006 ff2b 	bl	800c2bc <osDelay>
			  break;
 8005466:	bf00      	nop
		  }


		  clickOnce = 0;
 8005468:	4b24      	ldr	r3, [pc, #144]	; (80054fc <runFRTask+0x40c>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <runFRTask+0x410>)
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <runFRTask+0x414>)
 8005474:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005476:	4b22      	ldr	r3, [pc, #136]	; (8005500 <runFRTask+0x410>)
 8005478:	220b      	movs	r2, #11
 800547a:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <runFRTask+0x418>)
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	4b21      	ldr	r3, [pc, #132]	; (8005508 <runFRTask+0x418>)
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	429a      	cmp	r2, r3
 8005486:	d112      	bne.n	80054ae <runFRTask+0x3be>
				__CLEAR_CURCMD(curCmd);
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <runFRTask+0x41c>)
 800548a:	2264      	movs	r2, #100	; 0x64
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	4b1f      	ldr	r3, [pc, #124]	; (800550c <runFRTask+0x41c>)
 8005490:	2200      	movs	r2, #0
 8005492:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005494:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <runFRTask+0x420>)
 8005496:	210f      	movs	r1, #15
 8005498:	481e      	ldr	r0, [pc, #120]	; (8005514 <runFRTask+0x424>)
 800549a:	f009 fb87 	bl	800ebac <sniprintf>
 800549e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a2:	2206      	movs	r2, #6
 80054a4:	491c      	ldr	r1, [pc, #112]	; (8005518 <runFRTask+0x428>)
 80054a6:	481d      	ldr	r0, [pc, #116]	; (800551c <runFRTask+0x42c>)
 80054a8:	f005 fdd1 	bl	800b04e <HAL_UART_Transmit>
 80054ac:	e624      	b.n	80050f8 <runFRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <runFRTask+0x418>)
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	4a16      	ldr	r2, [pc, #88]	; (800550c <runFRTask+0x41c>)
 80054b4:	4914      	ldr	r1, [pc, #80]	; (8005508 <runFRTask+0x418>)
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <runFRTask+0x418>)
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a10      	ldr	r2, [pc, #64]	; (8005508 <runFRTask+0x418>)
 80054c6:	7892      	ldrb	r2, [r2, #2]
 80054c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80054cc:	fb01 f202 	mul.w	r2, r1, r2
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <runFRTask+0x418>)
 80054d6:	705a      	strb	r2, [r3, #1]
 80054d8:	4a11      	ldr	r2, [pc, #68]	; (8005520 <runFRTask+0x430>)
 80054da:	210f      	movs	r1, #15
 80054dc:	480d      	ldr	r0, [pc, #52]	; (8005514 <runFRTask+0x424>)
 80054de:	f009 fb65 	bl	800ebac <sniprintf>
	  if (curTask != TASK_FR) osDelay(1000);
 80054e2:	e609      	b.n	80050f8 <runFRTask+0x8>
 80054e4:	20000004 	.word	0x20000004
 80054e8:	200002a0 	.word	0x200002a0
 80054ec:	200004e8 	.word	0x200004e8
 80054f0:	40020000 	.word	0x40020000
 80054f4:	200003c0 	.word	0x200003c0
 80054f8:	200004fc 	.word	0x200004fc
 80054fc:	20000578 	.word	0x20000578
 8005500:	20000134 	.word	0x20000134
 8005504:	20000135 	.word	0x20000135
 8005508:	2000048c 	.word	0x2000048c
 800550c:	200004c0 	.word	0x200004c0
 8005510:	0801026c 	.word	0x0801026c
 8005514:	200004c4 	.word	0x200004c4
 8005518:	08010274 	.word	0x08010274
 800551c:	20000408 	.word	0x20000408
 8005520:	0801027c 	.word	0x0801027c

08005524 <runBLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BL) osDelay(1000);
 800552c:	4b9c      	ldr	r3, [pc, #624]	; (80057a0 <runBLTask+0x27c>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d004      	beq.n	800553e <runBLTask+0x1a>
 8005534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005538:	f006 fec0 	bl	800c2bc <osDelay>
 800553c:	e7f6      	b.n	800552c <runBLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 800553e:	4b99      	ldr	r3, [pc, #612]	; (80057a4 <runBLTask+0x280>)
 8005540:	885b      	ldrh	r3, [r3, #2]
 8005542:	2b14      	cmp	r3, #20
 8005544:	d07f      	beq.n	8005646 <runBLTask+0x122>
 8005546:	2b1e      	cmp	r3, #30
 8005548:	f040 8106 	bne.w	8005758 <runBLTask+0x234>
		  case 30: // BL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 800554c:	4b96      	ldr	r3, [pc, #600]	; (80057a8 <runBLTask+0x284>)
 800554e:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8005552:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80057ac <runBLTask+0x288>
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	dd01      	ble.n	8005564 <runBLTask+0x40>
 8005560:	2373      	movs	r3, #115	; 0x73
 8005562:	e012      	b.n	800558a <runBLTask+0x66>
 8005564:	4b90      	ldr	r3, [pc, #576]	; (80057a8 <runBLTask+0x284>)
 8005566:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800556a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80057b0 <runBLTask+0x28c>
 800556e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005576:	d501      	bpl.n	800557c <runBLTask+0x58>
 8005578:	2332      	movs	r3, #50	; 0x32
 800557a:	e006      	b.n	800558a <runBLTask+0x66>
 800557c:	4b8a      	ldr	r3, [pc, #552]	; (80057a8 <runBLTask+0x284>)
 800557e:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8005582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005586:	ee17 3a90 	vmov	r3, s15
 800558a:	4a8a      	ldr	r2, [pc, #552]	; (80057b4 <runBLTask+0x290>)
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6413      	str	r3, [r2, #64]	; 0x40
 8005590:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005594:	f001 fbb8 	bl	8006d08 <HAL_Delay>
 8005598:	4b83      	ldr	r3, [pc, #524]	; (80057a8 <runBLTask+0x284>)
 800559a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800559e:	4a86      	ldr	r2, [pc, #536]	; (80057b8 <runBLTask+0x294>)
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b81      	ldr	r3, [pc, #516]	; (80057a8 <runBLTask+0x284>)
 80055a4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	2104      	movs	r1, #4
 80055b6:	4881      	ldr	r0, [pc, #516]	; (80057bc <runBLTask+0x298>)
 80055b8:	f002 fb0a 	bl	8007bd0 <HAL_GPIO_WritePin>
 80055bc:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <runBLTask+0x284>)
 80055be:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	2108      	movs	r1, #8
 80055d0:	487a      	ldr	r0, [pc, #488]	; (80057bc <runBLTask+0x298>)
 80055d2:	f002 fafd 	bl	8007bd0 <HAL_GPIO_WritePin>
 80055d6:	4b74      	ldr	r3, [pc, #464]	; (80057a8 <runBLTask+0x284>)
 80055d8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	2120      	movs	r1, #32
 80055ea:	4874      	ldr	r0, [pc, #464]	; (80057bc <runBLTask+0x298>)
 80055ec:	f002 faf0 	bl	8007bd0 <HAL_GPIO_WritePin>
 80055f0:	4b6d      	ldr	r3, [pc, #436]	; (80057a8 <runBLTask+0x284>)
 80055f2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	2110      	movs	r1, #16
 8005604:	486d      	ldr	r0, [pc, #436]	; (80057bc <runBLTask+0x298>)
 8005606:	f002 fae3 	bl	8007bd0 <HAL_GPIO_WritePin>
 800560a:	4b67      	ldr	r3, [pc, #412]	; (80057a8 <runBLTask+0x284>)
 800560c:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8005610:	4b6b      	ldr	r3, [pc, #428]	; (80057c0 <runBLTask+0x29c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	635a      	str	r2, [r3, #52]	; 0x34
 8005616:	4b64      	ldr	r3, [pc, #400]	; (80057a8 <runBLTask+0x284>)
 8005618:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800561c:	4b68      	ldr	r3, [pc, #416]	; (80057c0 <runBLTask+0x29c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005622:	4865      	ldr	r0, [pc, #404]	; (80057b8 <runBLTask+0x294>)
 8005624:	f7fd ff38 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005628:	200a      	movs	r0, #10
 800562a:	f006 fe47 	bl	800c2bc <osDelay>
			  targetDist = 4.5;
 800562e:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <runBLTask+0x2a0>)
 8005630:	4a65      	ldr	r2, [pc, #404]	; (80057c8 <runBLTask+0x2a4>)
 8005632:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	4862      	ldr	r0, [pc, #392]	; (80057c4 <runBLTask+0x2a0>)
 800563a:	f7fd fab9 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 800563e:	200a      	movs	r0, #10
 8005640:	f006 fe3c 	bl	800c2bc <osDelay>
			  break;
 8005644:	e129      	b.n	800589a <runBLTask+0x376>
		  case 20: // BL20 (outdoor 3x1)
			  targetDist = 6;
 8005646:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <runBLTask+0x2a0>)
 8005648:	4a60      	ldr	r2, [pc, #384]	; (80057cc <runBLTask+0x2a8>)
 800564a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800564c:	2200      	movs	r2, #0
 800564e:	2101      	movs	r1, #1
 8005650:	485c      	ldr	r0, [pc, #368]	; (80057c4 <runBLTask+0x2a0>)
 8005652:	f7fd faad 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005656:	200a      	movs	r0, #10
 8005658:	f006 fe30 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 800565c:	4b52      	ldr	r3, [pc, #328]	; (80057a8 <runBLTask+0x284>)
 800565e:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8005662:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80057ac <runBLTask+0x288>
 8005666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	dd01      	ble.n	8005674 <runBLTask+0x150>
 8005670:	2373      	movs	r3, #115	; 0x73
 8005672:	e012      	b.n	800569a <runBLTask+0x176>
 8005674:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <runBLTask+0x284>)
 8005676:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800567a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80057b0 <runBLTask+0x28c>
 800567e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005686:	d501      	bpl.n	800568c <runBLTask+0x168>
 8005688:	2332      	movs	r3, #50	; 0x32
 800568a:	e006      	b.n	800569a <runBLTask+0x176>
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <runBLTask+0x284>)
 800568e:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 3a90 	vmov	r3, s15
 800569a:	4a46      	ldr	r2, [pc, #280]	; (80057b4 <runBLTask+0x290>)
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	6413      	str	r3, [r2, #64]	; 0x40
 80056a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80056a4:	f001 fb30 	bl	8006d08 <HAL_Delay>
 80056a8:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <runBLTask+0x284>)
 80056aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056ae:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <runBLTask+0x294>)
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <runBLTask+0x284>)
 80056b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	2104      	movs	r1, #4
 80056c6:	483d      	ldr	r0, [pc, #244]	; (80057bc <runBLTask+0x298>)
 80056c8:	f002 fa82 	bl	8007bd0 <HAL_GPIO_WritePin>
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <runBLTask+0x284>)
 80056ce:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	2108      	movs	r1, #8
 80056e0:	4836      	ldr	r0, [pc, #216]	; (80057bc <runBLTask+0x298>)
 80056e2:	f002 fa75 	bl	8007bd0 <HAL_GPIO_WritePin>
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <runBLTask+0x284>)
 80056e8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	2120      	movs	r1, #32
 80056fa:	4830      	ldr	r0, [pc, #192]	; (80057bc <runBLTask+0x298>)
 80056fc:	f002 fa68 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005700:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <runBLTask+0x284>)
 8005702:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005706:	2b00      	cmp	r3, #0
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	2110      	movs	r1, #16
 8005714:	4829      	ldr	r0, [pc, #164]	; (80057bc <runBLTask+0x298>)
 8005716:	f002 fa5b 	bl	8007bd0 <HAL_GPIO_WritePin>
 800571a:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <runBLTask+0x284>)
 800571c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <runBLTask+0x29c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	635a      	str	r2, [r3, #52]	; 0x34
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <runBLTask+0x284>)
 8005728:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <runBLTask+0x29c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005732:	4821      	ldr	r0, [pc, #132]	; (80057b8 <runBLTask+0x294>)
 8005734:	f7fd feb0 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005738:	200a      	movs	r0, #10
 800573a:	f006 fdbf 	bl	800c2bc <osDelay>
			  targetDist = 2;
 800573e:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <runBLTask+0x2a0>)
 8005740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005744:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005746:	2200      	movs	r2, #0
 8005748:	2101      	movs	r1, #1
 800574a:	481e      	ldr	r0, [pc, #120]	; (80057c4 <runBLTask+0x2a0>)
 800574c:	f7fd fa30 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005750:	200a      	movs	r0, #10
 8005752:	f006 fdb3 	bl	800c2bc <osDelay>
			  break;
 8005756:	e0a0      	b.n	800589a <runBLTask+0x376>
		  default: // BL00 (indoor 3x1)
			  targetDist = 4;
 8005758:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <runBLTask+0x2a0>)
 800575a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800575e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005760:	2200      	movs	r2, #0
 8005762:	2101      	movs	r1, #1
 8005764:	4817      	ldr	r0, [pc, #92]	; (80057c4 <runBLTask+0x2a0>)
 8005766:	f7fd fa23 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 800576a:	200a      	movs	r0, #10
 800576c:	f006 fda6 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <runBLTask+0x284>)
 8005772:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005776:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80057ac <runBLTask+0x288>
 800577a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005782:	dd01      	ble.n	8005788 <runBLTask+0x264>
 8005784:	2373      	movs	r3, #115	; 0x73
 8005786:	e02a      	b.n	80057de <runBLTask+0x2ba>
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <runBLTask+0x284>)
 800578a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800578e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80057b0 <runBLTask+0x28c>
 8005792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579a:	d519      	bpl.n	80057d0 <runBLTask+0x2ac>
 800579c:	2332      	movs	r3, #50	; 0x32
 800579e:	e01e      	b.n	80057de <runBLTask+0x2ba>
 80057a0:	20000134 	.word	0x20000134
 80057a4:	200004c0 	.word	0x200004c0
 80057a8:	20000004 	.word	0x20000004
 80057ac:	42e60000 	.word	0x42e60000
 80057b0:	42480000 	.word	0x42480000
 80057b4:	200002a0 	.word	0x200002a0
 80057b8:	200004e8 	.word	0x200004e8
 80057bc:	40020000 	.word	0x40020000
 80057c0:	200003c0 	.word	0x200003c0
 80057c4:	200004fc 	.word	0x200004fc
 80057c8:	40900000 	.word	0x40900000
 80057cc:	40c00000 	.word	0x40c00000
 80057d0:	4b51      	ldr	r3, [pc, #324]	; (8005918 <runBLTask+0x3f4>)
 80057d2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80057d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057da:	ee17 3a90 	vmov	r3, s15
 80057de:	4a4f      	ldr	r2, [pc, #316]	; (800591c <runBLTask+0x3f8>)
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6413      	str	r3, [r2, #64]	; 0x40
 80057e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80057e8:	f001 fa8e 	bl	8006d08 <HAL_Delay>
 80057ec:	4b4a      	ldr	r3, [pc, #296]	; (8005918 <runBLTask+0x3f4>)
 80057ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f2:	4a4b      	ldr	r2, [pc, #300]	; (8005920 <runBLTask+0x3fc>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b48      	ldr	r3, [pc, #288]	; (8005918 <runBLTask+0x3f4>)
 80057f8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	2104      	movs	r1, #4
 800580a:	4846      	ldr	r0, [pc, #280]	; (8005924 <runBLTask+0x400>)
 800580c:	f002 f9e0 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005810:	4b41      	ldr	r3, [pc, #260]	; (8005918 <runBLTask+0x3f4>)
 8005812:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005816:	2b00      	cmp	r3, #0
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	2108      	movs	r1, #8
 8005824:	483f      	ldr	r0, [pc, #252]	; (8005924 <runBLTask+0x400>)
 8005826:	f002 f9d3 	bl	8007bd0 <HAL_GPIO_WritePin>
 800582a:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <runBLTask+0x3f4>)
 800582c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	2120      	movs	r1, #32
 800583e:	4839      	ldr	r0, [pc, #228]	; (8005924 <runBLTask+0x400>)
 8005840:	f002 f9c6 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <runBLTask+0x3f4>)
 8005846:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	2110      	movs	r1, #16
 8005858:	4832      	ldr	r0, [pc, #200]	; (8005924 <runBLTask+0x400>)
 800585a:	f002 f9b9 	bl	8007bd0 <HAL_GPIO_WritePin>
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <runBLTask+0x3f4>)
 8005860:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8005864:	4b30      	ldr	r3, [pc, #192]	; (8005928 <runBLTask+0x404>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	635a      	str	r2, [r3, #52]	; 0x34
 800586a:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <runBLTask+0x3f4>)
 800586c:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <runBLTask+0x404>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005876:	482a      	ldr	r0, [pc, #168]	; (8005920 <runBLTask+0x3fc>)
 8005878:	f7fd fe0e 	bl	8003498 <RobotTurn>
			  osDelay(10);
 800587c:	200a      	movs	r0, #10
 800587e:	f006 fd1d 	bl	800c2bc <osDelay>
			  targetDist = 12;
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <runBLTask+0x408>)
 8005884:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <runBLTask+0x40c>)
 8005886:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005888:	2200      	movs	r2, #0
 800588a:	2100      	movs	r1, #0
 800588c:	4827      	ldr	r0, [pc, #156]	; (800592c <runBLTask+0x408>)
 800588e:	f7fd f98f 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005892:	200a      	movs	r0, #10
 8005894:	f006 fd12 	bl	800c2bc <osDelay>
			  break;
 8005898:	bf00      	nop
		  }


		  clickOnce = 0;
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <runBLTask+0x410>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <runBLTask+0x414>)
 80058a2:	781a      	ldrb	r2, [r3, #0]
 80058a4:	4b25      	ldr	r3, [pc, #148]	; (800593c <runBLTask+0x418>)
 80058a6:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 80058a8:	4b23      	ldr	r3, [pc, #140]	; (8005938 <runBLTask+0x414>)
 80058aa:	220b      	movs	r2, #11
 80058ac:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80058ae:	4b24      	ldr	r3, [pc, #144]	; (8005940 <runBLTask+0x41c>)
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <runBLTask+0x41c>)
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d112      	bne.n	80058e0 <runBLTask+0x3bc>
				__CLEAR_CURCMD(curCmd);
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <runBLTask+0x420>)
 80058bc:	2264      	movs	r2, #100	; 0x64
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	4b20      	ldr	r3, [pc, #128]	; (8005944 <runBLTask+0x420>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80058c6:	4a20      	ldr	r2, [pc, #128]	; (8005948 <runBLTask+0x424>)
 80058c8:	210f      	movs	r1, #15
 80058ca:	4820      	ldr	r0, [pc, #128]	; (800594c <runBLTask+0x428>)
 80058cc:	f009 f96e 	bl	800ebac <sniprintf>
 80058d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058d4:	2206      	movs	r2, #6
 80058d6:	491e      	ldr	r1, [pc, #120]	; (8005950 <runBLTask+0x42c>)
 80058d8:	481e      	ldr	r0, [pc, #120]	; (8005954 <runBLTask+0x430>)
 80058da:	f005 fbb8 	bl	800b04e <HAL_UART_Transmit>
 80058de:	e625      	b.n	800552c <runBLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <runBLTask+0x41c>)
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <runBLTask+0x420>)
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <runBLTask+0x41c>)
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b13      	ldr	r3, [pc, #76]	; (8005940 <runBLTask+0x41c>)
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	3301      	adds	r3, #1
 80058f6:	4a12      	ldr	r2, [pc, #72]	; (8005940 <runBLTask+0x41c>)
 80058f8:	7892      	ldrb	r2, [r2, #2]
 80058fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80058fe:	fb01 f202 	mul.w	r2, r1, r2
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	b2da      	uxtb	r2, r3
 8005906:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <runBLTask+0x41c>)
 8005908:	705a      	strb	r2, [r3, #1]
 800590a:	4a13      	ldr	r2, [pc, #76]	; (8005958 <runBLTask+0x434>)
 800590c:	210f      	movs	r1, #15
 800590e:	480f      	ldr	r0, [pc, #60]	; (800594c <runBLTask+0x428>)
 8005910:	f009 f94c 	bl	800ebac <sniprintf>
	  if (curTask != TASK_BL) osDelay(1000);
 8005914:	e60a      	b.n	800552c <runBLTask+0x8>
 8005916:	bf00      	nop
 8005918:	20000004 	.word	0x20000004
 800591c:	200002a0 	.word	0x200002a0
 8005920:	200004e8 	.word	0x200004e8
 8005924:	40020000 	.word	0x40020000
 8005928:	200003c0 	.word	0x200003c0
 800592c:	200004fc 	.word	0x200004fc
 8005930:	41400000 	.word	0x41400000
 8005934:	20000578 	.word	0x20000578
 8005938:	20000134 	.word	0x20000134
 800593c:	20000135 	.word	0x20000135
 8005940:	2000048c 	.word	0x2000048c
 8005944:	200004c0 	.word	0x200004c0
 8005948:	0801026c 	.word	0x0801026c
 800594c:	200004c4 	.word	0x200004c4
 8005950:	08010274 	.word	0x08010274
 8005954:	20000408 	.word	0x20000408
 8005958:	0801027c 	.word	0x0801027c

0800595c <runBRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BR) osDelay(1000);
 8005964:	4b9c      	ldr	r3, [pc, #624]	; (8005bd8 <runBRTask+0x27c>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b05      	cmp	r3, #5
 800596a:	d004      	beq.n	8005976 <runBRTask+0x1a>
 800596c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005970:	f006 fca4 	bl	800c2bc <osDelay>
 8005974:	e7f6      	b.n	8005964 <runBRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8005976:	4b99      	ldr	r3, [pc, #612]	; (8005bdc <runBRTask+0x280>)
 8005978:	885b      	ldrh	r3, [r3, #2]
 800597a:	2b14      	cmp	r3, #20
 800597c:	d07f      	beq.n	8005a7e <runBRTask+0x122>
 800597e:	2b1e      	cmp	r3, #30
 8005980:	f040 8105 	bne.w	8005b8e <runBRTask+0x232>
		  case 30: // BR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 8005984:	4b96      	ldr	r3, [pc, #600]	; (8005be0 <runBRTask+0x284>)
 8005986:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800598a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005be4 <runBRTask+0x288>
 800598e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	dd01      	ble.n	800599c <runBRTask+0x40>
 8005998:	2373      	movs	r3, #115	; 0x73
 800599a:	e012      	b.n	80059c2 <runBRTask+0x66>
 800599c:	4b90      	ldr	r3, [pc, #576]	; (8005be0 <runBRTask+0x284>)
 800599e:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80059a2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005be8 <runBRTask+0x28c>
 80059a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ae:	d501      	bpl.n	80059b4 <runBRTask+0x58>
 80059b0:	2332      	movs	r3, #50	; 0x32
 80059b2:	e006      	b.n	80059c2 <runBRTask+0x66>
 80059b4:	4b8a      	ldr	r3, [pc, #552]	; (8005be0 <runBRTask+0x284>)
 80059b6:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80059ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059be:	ee17 3a90 	vmov	r3, s15
 80059c2:	4a8a      	ldr	r2, [pc, #552]	; (8005bec <runBRTask+0x290>)
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	6413      	str	r3, [r2, #64]	; 0x40
 80059c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80059cc:	f001 f99c 	bl	8006d08 <HAL_Delay>
 80059d0:	4b83      	ldr	r3, [pc, #524]	; (8005be0 <runBRTask+0x284>)
 80059d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80059d6:	4a86      	ldr	r2, [pc, #536]	; (8005bf0 <runBRTask+0x294>)
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	4b81      	ldr	r3, [pc, #516]	; (8005be0 <runBRTask+0x284>)
 80059dc:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	2104      	movs	r1, #4
 80059ee:	4881      	ldr	r0, [pc, #516]	; (8005bf4 <runBRTask+0x298>)
 80059f0:	f002 f8ee 	bl	8007bd0 <HAL_GPIO_WritePin>
 80059f4:	4b7a      	ldr	r3, [pc, #488]	; (8005be0 <runBRTask+0x284>)
 80059f6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	2108      	movs	r1, #8
 8005a08:	487a      	ldr	r0, [pc, #488]	; (8005bf4 <runBRTask+0x298>)
 8005a0a:	f002 f8e1 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005a0e:	4b74      	ldr	r3, [pc, #464]	; (8005be0 <runBRTask+0x284>)
 8005a10:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2120      	movs	r1, #32
 8005a22:	4874      	ldr	r0, [pc, #464]	; (8005bf4 <runBRTask+0x298>)
 8005a24:	f002 f8d4 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005a28:	4b6d      	ldr	r3, [pc, #436]	; (8005be0 <runBRTask+0x284>)
 8005a2a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	2110      	movs	r1, #16
 8005a3c:	486d      	ldr	r0, [pc, #436]	; (8005bf4 <runBRTask+0x298>)
 8005a3e:	f002 f8c7 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005a42:	4b67      	ldr	r3, [pc, #412]	; (8005be0 <runBRTask+0x284>)
 8005a44:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 8005a48:	4b6b      	ldr	r3, [pc, #428]	; (8005bf8 <runBRTask+0x29c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a4e:	4b64      	ldr	r3, [pc, #400]	; (8005be0 <runBRTask+0x284>)
 8005a50:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 8005a54:	4b68      	ldr	r3, [pc, #416]	; (8005bf8 <runBRTask+0x29c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005a5a:	4865      	ldr	r0, [pc, #404]	; (8005bf0 <runBRTask+0x294>)
 8005a5c:	f7fd fd1c 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005a60:	200a      	movs	r0, #10
 8005a62:	f006 fc2b 	bl	800c2bc <osDelay>
			  targetDist = 5;
 8005a66:	4b65      	ldr	r3, [pc, #404]	; (8005bfc <runBRTask+0x2a0>)
 8005a68:	4a65      	ldr	r2, [pc, #404]	; (8005c00 <runBRTask+0x2a4>)
 8005a6a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4862      	ldr	r0, [pc, #392]	; (8005bfc <runBRTask+0x2a0>)
 8005a72:	f7fd f89d 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005a76:	200a      	movs	r0, #10
 8005a78:	f006 fc20 	bl	800c2bc <osDelay>
			  break;
 8005a7c:	e12b      	b.n	8005cd6 <runBRTask+0x37a>
		  case 20: // BR20 (outdoor 3x1)
			  targetDist = 7;
 8005a7e:	4b5f      	ldr	r3, [pc, #380]	; (8005bfc <runBRTask+0x2a0>)
 8005a80:	4a60      	ldr	r2, [pc, #384]	; (8005c04 <runBRTask+0x2a8>)
 8005a82:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005a84:	2200      	movs	r2, #0
 8005a86:	2101      	movs	r1, #1
 8005a88:	485c      	ldr	r0, [pc, #368]	; (8005bfc <runBRTask+0x2a0>)
 8005a8a:	f7fd f891 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005a8e:	200a      	movs	r0, #10
 8005a90:	f006 fc14 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8005a94:	4b52      	ldr	r3, [pc, #328]	; (8005be0 <runBRTask+0x284>)
 8005a96:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005a9a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005be4 <runBRTask+0x288>
 8005a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa6:	dd01      	ble.n	8005aac <runBRTask+0x150>
 8005aa8:	2373      	movs	r3, #115	; 0x73
 8005aaa:	e012      	b.n	8005ad2 <runBRTask+0x176>
 8005aac:	4b4c      	ldr	r3, [pc, #304]	; (8005be0 <runBRTask+0x284>)
 8005aae:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005ab2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005be8 <runBRTask+0x28c>
 8005ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abe:	d501      	bpl.n	8005ac4 <runBRTask+0x168>
 8005ac0:	2332      	movs	r3, #50	; 0x32
 8005ac2:	e006      	b.n	8005ad2 <runBRTask+0x176>
 8005ac4:	4b46      	ldr	r3, [pc, #280]	; (8005be0 <runBRTask+0x284>)
 8005ac6:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ace:	ee17 3a90 	vmov	r3, s15
 8005ad2:	4a46      	ldr	r2, [pc, #280]	; (8005bec <runBRTask+0x290>)
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005adc:	f001 f914 	bl	8006d08 <HAL_Delay>
 8005ae0:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <runBRTask+0x284>)
 8005ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ae6:	4a42      	ldr	r2, [pc, #264]	; (8005bf0 <runBRTask+0x294>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <runBRTask+0x284>)
 8005aec:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	2104      	movs	r1, #4
 8005afe:	483d      	ldr	r0, [pc, #244]	; (8005bf4 <runBRTask+0x298>)
 8005b00:	f002 f866 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005b04:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <runBRTask+0x284>)
 8005b06:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	2108      	movs	r1, #8
 8005b18:	4836      	ldr	r0, [pc, #216]	; (8005bf4 <runBRTask+0x298>)
 8005b1a:	f002 f859 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005b1e:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <runBRTask+0x284>)
 8005b20:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2120      	movs	r1, #32
 8005b32:	4830      	ldr	r0, [pc, #192]	; (8005bf4 <runBRTask+0x298>)
 8005b34:	f002 f84c 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005b38:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <runBRTask+0x284>)
 8005b3a:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2110      	movs	r1, #16
 8005b4c:	4829      	ldr	r0, [pc, #164]	; (8005bf4 <runBRTask+0x298>)
 8005b4e:	f002 f83f 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005b52:	4b23      	ldr	r3, [pc, #140]	; (8005be0 <runBRTask+0x284>)
 8005b54:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <runBRTask+0x29c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <runBRTask+0x284>)
 8005b60:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <runBRTask+0x29c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005b6a:	4821      	ldr	r0, [pc, #132]	; (8005bf0 <runBRTask+0x294>)
 8005b6c:	f7fd fc94 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005b70:	200a      	movs	r0, #10
 8005b72:	f006 fba3 	bl	800c2bc <osDelay>
			  targetDist = 3;
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <runBRTask+0x2a0>)
 8005b78:	4a23      	ldr	r2, [pc, #140]	; (8005c08 <runBRTask+0x2ac>)
 8005b7a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2101      	movs	r1, #1
 8005b80:	481e      	ldr	r0, [pc, #120]	; (8005bfc <runBRTask+0x2a0>)
 8005b82:	f7fd f815 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005b86:	200a      	movs	r0, #10
 8005b88:	f006 fb98 	bl	800c2bc <osDelay>
			  break;
 8005b8c:	e0a3      	b.n	8005cd6 <runBRTask+0x37a>
		  default: // BR00 (indoor 3x1)
			  targetDist = 4;
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <runBRTask+0x2a0>)
 8005b90:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8005b94:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4818      	ldr	r0, [pc, #96]	; (8005bfc <runBRTask+0x2a0>)
 8005b9c:	f7fd f808 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005ba0:	200a      	movs	r0, #10
 8005ba2:	f006 fb8b 	bl	800c2bc <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <runBRTask+0x284>)
 8005ba8:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005bac:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005be4 <runBRTask+0x288>
 8005bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	dd01      	ble.n	8005bbe <runBRTask+0x262>
 8005bba:	2373      	movs	r3, #115	; 0x73
 8005bbc:	e02d      	b.n	8005c1a <runBRTask+0x2be>
 8005bbe:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <runBRTask+0x284>)
 8005bc0:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005bc4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005be8 <runBRTask+0x28c>
 8005bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd0:	d51c      	bpl.n	8005c0c <runBRTask+0x2b0>
 8005bd2:	2332      	movs	r3, #50	; 0x32
 8005bd4:	e021      	b.n	8005c1a <runBRTask+0x2be>
 8005bd6:	bf00      	nop
 8005bd8:	20000134 	.word	0x20000134
 8005bdc:	200004c0 	.word	0x200004c0
 8005be0:	20000004 	.word	0x20000004
 8005be4:	42e60000 	.word	0x42e60000
 8005be8:	42480000 	.word	0x42480000
 8005bec:	200002a0 	.word	0x200002a0
 8005bf0:	200004e8 	.word	0x200004e8
 8005bf4:	40020000 	.word	0x40020000
 8005bf8:	200003c0 	.word	0x200003c0
 8005bfc:	200004fc 	.word	0x200004fc
 8005c00:	40a00000 	.word	0x40a00000
 8005c04:	40e00000 	.word	0x40e00000
 8005c08:	40400000 	.word	0x40400000
 8005c0c:	4b51      	ldr	r3, [pc, #324]	; (8005d54 <runBRTask+0x3f8>)
 8005c0e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c16:	ee17 3a90 	vmov	r3, s15
 8005c1a:	4a4f      	ldr	r2, [pc, #316]	; (8005d58 <runBRTask+0x3fc>)
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c24:	f001 f870 	bl	8006d08 <HAL_Delay>
 8005c28:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <runBRTask+0x3f8>)
 8005c2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c2e:	4a4b      	ldr	r2, [pc, #300]	; (8005d5c <runBRTask+0x400>)
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <runBRTask+0x3f8>)
 8005c34:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	2104      	movs	r1, #4
 8005c46:	4846      	ldr	r0, [pc, #280]	; (8005d60 <runBRTask+0x404>)
 8005c48:	f001 ffc2 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005c4c:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <runBRTask+0x3f8>)
 8005c4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2108      	movs	r1, #8
 8005c60:	483f      	ldr	r0, [pc, #252]	; (8005d60 <runBRTask+0x404>)
 8005c62:	f001 ffb5 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <runBRTask+0x3f8>)
 8005c68:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	2120      	movs	r1, #32
 8005c7a:	4839      	ldr	r0, [pc, #228]	; (8005d60 <runBRTask+0x404>)
 8005c7c:	f001 ffa8 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005c80:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <runBRTask+0x3f8>)
 8005c82:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bf14      	ite	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	2300      	moveq	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	2110      	movs	r1, #16
 8005c94:	4832      	ldr	r0, [pc, #200]	; (8005d60 <runBRTask+0x404>)
 8005c96:	f001 ff9b 	bl	8007bd0 <HAL_GPIO_WritePin>
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	; (8005d54 <runBRTask+0x3f8>)
 8005c9c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005ca0:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <runBRTask+0x408>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ca6:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <runBRTask+0x3f8>)
 8005ca8:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <runBRTask+0x408>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005cb2:	482a      	ldr	r0, [pc, #168]	; (8005d5c <runBRTask+0x400>)
 8005cb4:	f7fd fbf0 	bl	8003498 <RobotTurn>
			  osDelay(10);
 8005cb8:	200a      	movs	r0, #10
 8005cba:	f006 faff 	bl	800c2bc <osDelay>
			  targetDist = 12;
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <runBRTask+0x40c>)
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	; (8005d6c <runBRTask+0x410>)
 8005cc2:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4827      	ldr	r0, [pc, #156]	; (8005d68 <runBRTask+0x40c>)
 8005cca:	f7fc ff71 	bl	8002bb0 <RobotMoveDist>
			  osDelay(10);
 8005cce:	200a      	movs	r0, #10
 8005cd0:	f006 faf4 	bl	800c2bc <osDelay>
			  break;
 8005cd4:	bf00      	nop
		  }


		  clickOnce = 0;
 8005cd6:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <runBRTask+0x414>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005cdc:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <runBRTask+0x418>)
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <runBRTask+0x41c>)
 8005ce2:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <runBRTask+0x418>)
 8005ce6:	220b      	movs	r2, #11
 8005ce8:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <runBRTask+0x420>)
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <runBRTask+0x420>)
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d112      	bne.n	8005d1c <runBRTask+0x3c0>
				__CLEAR_CURCMD(curCmd);
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <runBRTask+0x424>)
 8005cf8:	2264      	movs	r2, #100	; 0x64
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <runBRTask+0x424>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005d02:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <runBRTask+0x428>)
 8005d04:	210f      	movs	r1, #15
 8005d06:	4820      	ldr	r0, [pc, #128]	; (8005d88 <runBRTask+0x42c>)
 8005d08:	f008 ff50 	bl	800ebac <sniprintf>
 8005d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d10:	2206      	movs	r2, #6
 8005d12:	491e      	ldr	r1, [pc, #120]	; (8005d8c <runBRTask+0x430>)
 8005d14:	481e      	ldr	r0, [pc, #120]	; (8005d90 <runBRTask+0x434>)
 8005d16:	f005 f99a 	bl	800b04e <HAL_UART_Transmit>
 8005d1a:	e623      	b.n	8005964 <runBRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <runBRTask+0x420>)
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <runBRTask+0x424>)
 8005d22:	4916      	ldr	r1, [pc, #88]	; (8005d7c <runBRTask+0x420>)
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <runBRTask+0x420>)
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <runBRTask+0x420>)
 8005d34:	7892      	ldrb	r2, [r2, #2]
 8005d36:	fb93 f1f2 	sdiv	r1, r3, r2
 8005d3a:	fb01 f202 	mul.w	r2, r1, r2
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <runBRTask+0x420>)
 8005d44:	705a      	strb	r2, [r3, #1]
 8005d46:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <runBRTask+0x438>)
 8005d48:	210f      	movs	r1, #15
 8005d4a:	480f      	ldr	r0, [pc, #60]	; (8005d88 <runBRTask+0x42c>)
 8005d4c:	f008 ff2e 	bl	800ebac <sniprintf>
	  if (curTask != TASK_BR) osDelay(1000);
 8005d50:	e608      	b.n	8005964 <runBRTask+0x8>
 8005d52:	bf00      	nop
 8005d54:	20000004 	.word	0x20000004
 8005d58:	200002a0 	.word	0x200002a0
 8005d5c:	200004e8 	.word	0x200004e8
 8005d60:	40020000 	.word	0x40020000
 8005d64:	200003c0 	.word	0x200003c0
 8005d68:	200004fc 	.word	0x200004fc
 8005d6c:	41400000 	.word	0x41400000
 8005d70:	20000578 	.word	0x20000578
 8005d74:	20000134 	.word	0x20000134
 8005d78:	20000135 	.word	0x20000135
 8005d7c:	2000048c 	.word	0x2000048c
 8005d80:	200004c0 	.word	0x200004c0
 8005d84:	0801026c 	.word	0x0801026c
 8005d88:	200004c4 	.word	0x200004c4
 8005d8c:	08010274 	.word	0x08010274
 8005d90:	20000408 	.word	0x20000408
 8005d94:	0801027c 	.word	0x0801027c

08005d98 <runFastestPathTask_V2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask_V2 */
void runFastestPathTask_V2(void *argument)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask_V2 */
	const float FL_Offset_Y = 1.5;
 8005da0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005da4:	60fb      	str	r3, [r7, #12]
	uint8_t turnSize = 2;
 8005da6:	2302      	movs	r3, #2
 8005da8:	72bb      	strb	r3, [r7, #10]
	uint8_t speedModeFP = SPEED_MODE_2;
 8005daa:	2302      	movs	r3, #2
 8005dac:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005dae:	4b56      	ldr	r3, [pc, #344]	; (8005f08 <runFastestPathTask_V2+0x170>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	d004      	beq.n	8005dc0 <runFastestPathTask_V2+0x28>
 8005db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dba:	f006 fa7f 	bl	800c2bc <osDelay>
 8005dbe:	e09f      	b.n	8005f00 <runFastestPathTask_V2+0x168>
	  else {
		  turnSize = curCmd.val;
 8005dc0:	4b52      	ldr	r3, [pc, #328]	; (8005f0c <runFastestPathTask_V2+0x174>)
 8005dc2:	885b      	ldrh	r3, [r3, #2]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	72bb      	strb	r3, [r7, #10]
		  speedModeFP = (turnSize == 1 || turnSize == 2) ? SPEED_MODE_2 : SPEED_MODE_1;
 8005dc8:	7abb      	ldrb	r3, [r7, #10]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d002      	beq.n	8005dd4 <runFastestPathTask_V2+0x3c>
 8005dce:	7abb      	ldrb	r3, [r7, #10]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d101      	bne.n	8005dd8 <runFastestPathTask_V2+0x40>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e000      	b.n	8005dda <runFastestPathTask_V2+0x42>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	72fb      	strb	r3, [r7, #11]
//		  if (turnSize == 3 || turnSize == 4) speedModeFP = SPEED_MODE_1;
//		   STEP 1: move forward until x cm behind the obstacle
//		  if (step == 0) {
			 targetDist = 70;
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005dde:	4a4d      	ldr	r2, [pc, #308]	; (8005f14 <runFastestPathTask_V2+0x17c>)
 8005de0:	601a      	str	r2, [r3, #0]
			 RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005de2:	7afb      	ldrb	r3, [r7, #11]
 8005de4:	461a      	mov	r2, r3
 8005de6:	2101      	movs	r1, #1
 8005de8:	4849      	ldr	r0, [pc, #292]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005dea:	f7fc fee1 	bl	8002bb0 <RobotMoveDist>
		  switch (turnSize) {
 8005dee:	7abb      	ldrb	r3, [r7, #10]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d81e      	bhi.n	8005e34 <runFastestPathTask_V2+0x9c>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <runFastestPathTask_V2+0x64>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e21 	.word	0x08005e21
 8005e04:	08005e0d 	.word	0x08005e0d
 8005e08:	08005e21 	.word	0x08005e21
		  case 1:
		  case 3:
			  targetDist = 20 + 7 + FL_Offset_Y;
 8005e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e10:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8005e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e18:	4b3d      	ldr	r3, [pc, #244]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005e1a:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005e1e:	e00a      	b.n	8005e36 <runFastestPathTask_V2+0x9e>
		  case 2:
		  case 4:
			  targetDist = 40 + 7 + FL_Offset_Y;
 8005e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e24:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005f18 <runFastestPathTask_V2+0x180>
 8005e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e2c:	4b38      	ldr	r3, [pc, #224]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005e2e:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005e32:	e000      	b.n	8005e36 <runFastestPathTask_V2+0x9e>
		  default:
			  break;
 8005e34:	bf00      	nop
		  }

			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4835      	ldr	r0, [pc, #212]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005e3c:	f7fd f84c 	bl	8002ed8 <RobotMoveDistObstacle>
//		  } else if (step == 1) {
			  // STEP 2: turn left
			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
 8005e40:	f107 030a 	add.w	r3, r7, #10
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd fced 	bl	8003824 <FASTESTPATH_TURN_LEFT_90X>
//		  } else if (step == 2) {
			  // STEP 3: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8005e4a:	f107 030a 	add.w	r3, r7, #10
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fd fdba 	bl	80039c8 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 3) {
			  // STEP 4: move right by 94cm
			  switch (turnSize) {
 8005e54:	7abb      	ldrb	r3, [r7, #10]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d813      	bhi.n	8005e84 <runFastestPathTask_V2+0xec>
 8005e5c:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <runFastestPathTask_V2+0xcc>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e7d 	.word	0x08005e7d
 8005e6c:	08005e75 	.word	0x08005e75
 8005e70:	08005e7d 	.word	0x08005e7d
			  case 1:
			  case 3:
				  targetDist = 52;
 8005e74:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005e76:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <runFastestPathTask_V2+0x184>)
 8005e78:	601a      	str	r2, [r3, #0]
				  break;
 8005e7a:	e004      	b.n	8005e86 <runFastestPathTask_V2+0xee>
			  case 2:
			  case 4:
				  targetDist = 70;
 8005e7c:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005e7e:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <runFastestPathTask_V2+0x17c>)
 8005e80:	601a      	str	r2, [r3, #0]
//				  targetDist = 60;
				  break;
 8005e82:	e000      	b.n	8005e86 <runFastestPathTask_V2+0xee>
			  default:
				  break;
 8005e84:	bf00      	nop
			  }
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4820      	ldr	r0, [pc, #128]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005e8e:	f7fc fe8f 	bl	8002bb0 <RobotMoveDist>
//		  } else if (step == 4) {
			  // STEP 5: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8005e92:	f107 030a 	add.w	r3, r7, #10
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd fd96 	bl	80039c8 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 5) {
			  // STEP 6: turn left (back to initial path)
//			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
			  FASTESTPATH_TURN_LEFT_90X_RETURN(&turnSize);
 8005e9c:	f107 030a 	add.w	r3, r7, #10
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fd fd1b 	bl	80038dc <FASTESTPATH_TURN_LEFT_90X_RETURN>
//		  } else if (step == 6) {
			  // STEP 7: move back to carpack
			  targetDist = 60;
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <runFastestPathTask_V2+0x188>)
 8005eaa:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005eac:	7afb      	ldrb	r3, [r7, #11]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	4817      	ldr	r0, [pc, #92]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005eb4:	f7fc fe7c 	bl	8002bb0 <RobotMoveDist>
			  targetDist = 15;
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005eba:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <runFastestPathTask_V2+0x18c>)
 8005ebc:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4813      	ldr	r0, [pc, #76]	; (8005f10 <runFastestPathTask_V2+0x178>)
 8005ec4:	f7fd f808 	bl	8002ed8 <RobotMoveDistObstacle>
//		  }

//		  step = (step + 1) % 7;

			// DONE.
			prevTask = curTask;
 8005ec8:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <runFastestPathTask_V2+0x170>)
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <runFastestPathTask_V2+0x190>)
 8005ece:	701a      	strb	r2, [r3, #0]
			curTask = TASK_NONE;
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <runFastestPathTask_V2+0x170>)
 8005ed2:	220b      	movs	r2, #11
 8005ed4:	701a      	strb	r2, [r3, #0]
//			__ACK_TASK_DONE(&huart3, rxMsg);
			snprintf((char *)rxMsg, sizeof(rxMsg) - 1, "done!"); \
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <runFastestPathTask_V2+0x194>)
 8005ed8:	210f      	movs	r1, #15
 8005eda:	4815      	ldr	r0, [pc, #84]	; (8005f30 <runFastestPathTask_V2+0x198>)
 8005edc:	f008 fe66 	bl	800ebac <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) "ACK|X\r\n", 7, 0xFFFF); \
 8005ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	4913      	ldr	r1, [pc, #76]	; (8005f34 <runFastestPathTask_V2+0x19c>)
 8005ee8:	4813      	ldr	r0, [pc, #76]	; (8005f38 <runFastestPathTask_V2+0x1a0>)
 8005eea:	f005 f8b0 	bl	800b04e <HAL_UART_Transmit>
			__CLEAR_CURCMD(curCmd);
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <runFastestPathTask_V2+0x174>)
 8005ef0:	2264      	movs	r2, #100	; 0x64
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <runFastestPathTask_V2+0x174>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	805a      	strh	r2, [r3, #2]
			clickOnce = 0;
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <runFastestPathTask_V2+0x1a4>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8005f00:	2001      	movs	r0, #1
 8005f02:	f006 f9db 	bl	800c2bc <osDelay>
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005f06:	e752      	b.n	8005dae <runFastestPathTask_V2+0x16>
 8005f08:	20000134 	.word	0x20000134
 8005f0c:	200004c0 	.word	0x200004c0
 8005f10:	200004fc 	.word	0x200004fc
 8005f14:	428c0000 	.word	0x428c0000
 8005f18:	423c0000 	.word	0x423c0000
 8005f1c:	42500000 	.word	0x42500000
 8005f20:	42700000 	.word	0x42700000
 8005f24:	41700000 	.word	0x41700000
 8005f28:	20000135 	.word	0x20000135
 8005f2c:	0801026c 	.word	0x0801026c
 8005f30:	200004c4 	.word	0x200004c4
 8005f34:	08010298 	.word	0x08010298
 8005f38:	20000408 	.word	0x20000408
 8005f3c:	20000578 	.word	0x20000578

08005f40 <runBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBatteryTask */
void runBatteryTask(void *argument)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBatteryTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc2);
 8005f48:	4819      	ldr	r0, [pc, #100]	; (8005fb0 <runBatteryTask+0x70>)
 8005f4a:	f000 ff45 	bl	8006dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,20);
 8005f4e:	2114      	movs	r1, #20
 8005f50:	4817      	ldr	r0, [pc, #92]	; (8005fb0 <runBatteryTask+0x70>)
 8005f52:	f001 f846 	bl	8006fe2 <HAL_ADC_PollForConversion>
	batteryVal = HAL_ADC_GetValue(&hadc2) / 1421.752066 * 100;
 8005f56:	4816      	ldr	r0, [pc, #88]	; (8005fb0 <runBatteryTask+0x70>)
 8005f58:	f001 f8ce 	bl	80070f8 <HAL_ADC_GetValue>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fa fac8 	bl	80004f4 <__aeabi_ui2d>
 8005f64:	a310      	add	r3, pc, #64	; (adr r3, 8005fa8 <runBatteryTask+0x68>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa fc67 	bl	800083c <__aeabi_ddiv>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4610      	mov	r0, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <runBatteryTask+0x74>)
 8005f7c:	f7fa fb34 	bl	80005e8 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	f7fa fde8 	bl	8000b5c <__aeabi_d2f>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <runBatteryTask+0x78>)
 8005f90:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 8005f92:	4807      	ldr	r0, [pc, #28]	; (8005fb0 <runBatteryTask+0x70>)
 8005f94:	f000 fff2 	bl	8006f7c <HAL_ADC_Stop>
    osDelay(30000); // check battery level every 30 seconds
 8005f98:	f247 5030 	movw	r0, #30000	; 0x7530
 8005f9c:	f006 f98e 	bl	800c2bc <osDelay>
	HAL_ADC_Start(&hadc2);
 8005fa0:	e7d2      	b.n	8005f48 <runBatteryTask+0x8>
 8005fa2:	bf00      	nop
 8005fa4:	f3af 8000 	nop.w
 8005fa8:	1d96e9bc 	.word	0x1d96e9bc
 8005fac:	40963702 	.word	0x40963702
 8005fb0:	20000204 	.word	0x20000204
 8005fb4:	40590000 	.word	0x40590000
 8005fb8:	20000558 	.word	0x20000558

08005fbc <runMoveDistObsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	; (800607c <runMoveDistObsTask+0xc0>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	d004      	beq.n	8005fd6 <runMoveDistObsTask+0x1a>
 8005fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fd0:	f006 f974 	bl	800c2bc <osDelay>
 8005fd4:	e7f6      	b.n	8005fc4 <runMoveDistObsTask+0x8>
	  else {
		  targetDist = (float) curCmd.val;
 8005fd6:	4b2a      	ldr	r3, [pc, #168]	; (8006080 <runMoveDistObsTask+0xc4>)
 8005fd8:	885b      	ldrh	r3, [r3, #2]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	4b28      	ldr	r3, [pc, #160]	; (8006084 <runMoveDistObsTask+0xc8>)
 8005fe4:	edc3 7a00 	vstr	s15, [r3]
		  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4826      	ldr	r0, [pc, #152]	; (8006084 <runMoveDistObsTask+0xc8>)
 8005fec:	f7fc ff74 	bl	8002ed8 <RobotMoveDistObstacle>

		  __ON_TASK_END(&htim8, prevTask, curTask);
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <runMoveDistObsTask+0xcc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8005ff8:	4b23      	ldr	r3, [pc, #140]	; (8006088 <runMoveDistObsTask+0xcc>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <runMoveDistObsTask+0xc0>)
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <runMoveDistObsTask+0xd0>)
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	4b1c      	ldr	r3, [pc, #112]	; (800607c <runMoveDistObsTask+0xc0>)
 800600a:	220b      	movs	r2, #11
 800600c:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 800600e:	4b20      	ldr	r3, [pc, #128]	; (8006090 <runMoveDistObsTask+0xd4>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8006014:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <runMoveDistObsTask+0xd8>)
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <runMoveDistObsTask+0xd8>)
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	429a      	cmp	r2, r3
 800601e:	d112      	bne.n	8006046 <runMoveDistObsTask+0x8a>
			__CLEAR_CURCMD(curCmd);
 8006020:	4b17      	ldr	r3, [pc, #92]	; (8006080 <runMoveDistObsTask+0xc4>)
 8006022:	2264      	movs	r2, #100	; 0x64
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <runMoveDistObsTask+0xc4>)
 8006028:	2200      	movs	r2, #0
 800602a:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 800602c:	4a1a      	ldr	r2, [pc, #104]	; (8006098 <runMoveDistObsTask+0xdc>)
 800602e:	210f      	movs	r1, #15
 8006030:	481a      	ldr	r0, [pc, #104]	; (800609c <runMoveDistObsTask+0xe0>)
 8006032:	f008 fdbb 	bl	800ebac <sniprintf>
 8006036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800603a:	2206      	movs	r2, #6
 800603c:	4918      	ldr	r1, [pc, #96]	; (80060a0 <runMoveDistObsTask+0xe4>)
 800603e:	4819      	ldr	r0, [pc, #100]	; (80060a4 <runMoveDistObsTask+0xe8>)
 8006040:	f005 f805 	bl	800b04e <HAL_UART_Transmit>
 8006044:	e7be      	b.n	8005fc4 <runMoveDistObsTask+0x8>
		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <runMoveDistObsTask+0xd8>)
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	4a0d      	ldr	r2, [pc, #52]	; (8006080 <runMoveDistObsTask+0xc4>)
 800604c:	4911      	ldr	r1, [pc, #68]	; (8006094 <runMoveDistObsTask+0xd8>)
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <runMoveDistObsTask+0xd8>)
 8006058:	785b      	ldrb	r3, [r3, #1]
 800605a:	3301      	adds	r3, #1
 800605c:	4a0d      	ldr	r2, [pc, #52]	; (8006094 <runMoveDistObsTask+0xd8>)
 800605e:	7892      	ldrb	r2, [r2, #2]
 8006060:	fb93 f1f2 	sdiv	r1, r3, r2
 8006064:	fb01 f202 	mul.w	r2, r1, r2
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	b2da      	uxtb	r2, r3
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <runMoveDistObsTask+0xd8>)
 800606e:	705a      	strb	r2, [r3, #1]
 8006070:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <runMoveDistObsTask+0xec>)
 8006072:	210f      	movs	r1, #15
 8006074:	4809      	ldr	r0, [pc, #36]	; (800609c <runMoveDistObsTask+0xe0>)
 8006076:	f008 fd99 	bl	800ebac <sniprintf>
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 800607a:	e7a3      	b.n	8005fc4 <runMoveDistObsTask+0x8>
 800607c:	20000134 	.word	0x20000134
 8006080:	200004c0 	.word	0x200004c0
 8006084:	200004fc 	.word	0x200004fc
 8006088:	200003c0 	.word	0x200003c0
 800608c:	20000135 	.word	0x20000135
 8006090:	20000578 	.word	0x20000578
 8006094:	2000048c 	.word	0x2000048c
 8006098:	0801026c 	.word	0x0801026c
 800609c:	200004c4 	.word	0x200004c4
 80060a0:	08010274 	.word	0x08010274
 80060a4:	20000408 	.word	0x20000408
 80060a8:	0801027c 	.word	0x0801027c

080060ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060b0:	b672      	cpsid	i
}
 80060b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060b4:	e7fe      	b.n	80060b4 <Error_Handler+0x8>
	...

080060b8 <OLED_Refresh_Gram>:
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];

void OLED_Refresh_Gram(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<CHAR_W;i++)
 80060be:	2300      	movs	r3, #0
 80060c0:	71fb      	strb	r3, [r7, #7]
 80060c2:	e026      	b.n	8006112 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	3b50      	subs	r3, #80	; 0x50
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2100      	movs	r1, #0
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f82b 	bl	8006128 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 80060d2:	2100      	movs	r1, #0
 80060d4:	2000      	movs	r0, #0
 80060d6:	f000 f827 	bl	8006128 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 80060da:	2100      	movs	r1, #0
 80060dc:	2010      	movs	r0, #16
 80060de:	f000 f823 	bl	8006128 <OLED_WR_Byte>
		for(n=0;n<SCREEN_W;n++) OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80060e2:	2300      	movs	r3, #0
 80060e4:	71bb      	strb	r3, [r7, #6]
 80060e6:	e00d      	b.n	8006104 <OLED_Refresh_Gram+0x4c>
 80060e8:	79ba      	ldrb	r2, [r7, #6]
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	490d      	ldr	r1, [pc, #52]	; (8006124 <OLED_Refresh_Gram+0x6c>)
 80060ee:	00d2      	lsls	r2, r2, #3
 80060f0:	440a      	add	r2, r1
 80060f2:	4413      	add	r3, r2
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2101      	movs	r1, #1
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f815 	bl	8006128 <OLED_WR_Byte>
 80060fe:	79bb      	ldrb	r3, [r7, #6]
 8006100:	3301      	adds	r3, #1
 8006102:	71bb      	strb	r3, [r7, #6]
 8006104:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006108:	2b00      	cmp	r3, #0
 800610a:	daed      	bge.n	80060e8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<CHAR_W;i++)
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	3301      	adds	r3, #1
 8006110:	71fb      	strb	r3, [r7, #7]
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	2b07      	cmp	r3, #7
 8006116:	d9d5      	bls.n	80060c4 <OLED_Refresh_Gram+0xc>
	}
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000588 	.word	0x20000588

08006128 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	460a      	mov	r2, r1
 8006132:	71fb      	strb	r3, [r7, #7]
 8006134:	4613      	mov	r3, r2
 8006136:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
    if(cmd)  OLED_RS_Set(); //CHANGE: OLED_RS_H
 8006138:	79bb      	ldrb	r3, [r7, #6]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <OLED_WR_Byte+0x24>
 800613e:	2201      	movs	r2, #1
 8006140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006144:	481c      	ldr	r0, [pc, #112]	; (80061b8 <OLED_WR_Byte+0x90>)
 8006146:	f001 fd43 	bl	8007bd0 <HAL_GPIO_WritePin>
 800614a:	e005      	b.n	8006158 <OLED_WR_Byte+0x30>
    else OLED_RS_Clr(); //CHANGE: OLED_RS_L
 800614c:	2200      	movs	r2, #0
 800614e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006152:	4819      	ldr	r0, [pc, #100]	; (80061b8 <OLED_WR_Byte+0x90>)
 8006154:	f001 fd3c 	bl	8007bd0 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]
 800615c:	e01e      	b.n	800619c <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();//CHANGE: OLED_SCLK_L
 800615e:	2200      	movs	r2, #0
 8006160:	2120      	movs	r1, #32
 8006162:	4815      	ldr	r0, [pc, #84]	; (80061b8 <OLED_WR_Byte+0x90>)
 8006164:	f001 fd34 	bl	8007bd0 <HAL_GPIO_WritePin>
		if(dat&0x80)OLED_SDIN_Set(); //CHANGE: OLED_SDIN_H
 8006168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da05      	bge.n	800617c <OLED_WR_Byte+0x54>
 8006170:	2201      	movs	r2, #1
 8006172:	2140      	movs	r1, #64	; 0x40
 8006174:	4810      	ldr	r0, [pc, #64]	; (80061b8 <OLED_WR_Byte+0x90>)
 8006176:	f001 fd2b 	bl	8007bd0 <HAL_GPIO_WritePin>
 800617a:	e004      	b.n	8006186 <OLED_WR_Byte+0x5e>
		else OLED_SDIN_Clr(); //CHANGE: OLED_SDIN_L
 800617c:	2200      	movs	r2, #0
 800617e:	2140      	movs	r1, #64	; 0x40
 8006180:	480d      	ldr	r0, [pc, #52]	; (80061b8 <OLED_WR_Byte+0x90>)
 8006182:	f001 fd25 	bl	8007bd0 <HAL_GPIO_WritePin>
		OLED_SCLK_Set(); //CHANGE: OLED_SCLK_H
 8006186:	2201      	movs	r2, #1
 8006188:	2120      	movs	r1, #32
 800618a:	480b      	ldr	r0, [pc, #44]	; (80061b8 <OLED_WR_Byte+0x90>)
 800618c:	f001 fd20 	bl	8007bd0 <HAL_GPIO_WritePin>
		dat<<=1;
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3301      	adds	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b07      	cmp	r3, #7
 80061a0:	d9dd      	bls.n	800615e <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();  //CHANGE: OLED_RS_H
 80061a2:	2201      	movs	r2, #1
 80061a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a8:	4803      	ldr	r0, [pc, #12]	; (80061b8 <OLED_WR_Byte+0x90>)
 80061aa:	f001 fd11 	bl	8007bd0 <HAL_GPIO_WritePin>
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40021000 	.word	0x40021000

080061bc <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);
	OLED_WR_Byte(0XAE,OLED_CMD);
}

void OLED_Clear(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<CHAR_W;i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	71fb      	strb	r3, [r7, #7]
 80061c6:	e014      	b.n	80061f2 <OLED_Clear+0x36>
	for(n=0;n<SCREEN_W;n++)
 80061c8:	2300      	movs	r3, #0
 80061ca:	71bb      	strb	r3, [r7, #6]
 80061cc:	e00a      	b.n	80061e4 <OLED_Clear+0x28>
	OLED_GRAM[n][i]=0x00;
 80061ce:	79ba      	ldrb	r2, [r7, #6]
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	490c      	ldr	r1, [pc, #48]	; (8006204 <OLED_Clear+0x48>)
 80061d4:	00d2      	lsls	r2, r2, #3
 80061d6:	440a      	add	r2, r1
 80061d8:	4413      	add	r3, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
	for(n=0;n<SCREEN_W;n++)
 80061de:	79bb      	ldrb	r3, [r7, #6]
 80061e0:	3301      	adds	r3, #1
 80061e2:	71bb      	strb	r3, [r7, #6]
 80061e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	daf0      	bge.n	80061ce <OLED_Clear+0x12>
	for(i=0;i<CHAR_W;i++)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	3301      	adds	r3, #1
 80061f0:	71fb      	strb	r3, [r7, #7]
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	2b07      	cmp	r3, #7
 80061f6:	d9e7      	bls.n	80061c8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();
 80061f8:	f7ff ff5e 	bl	80060b8 <OLED_Refresh_Gram>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000588 	.word	0x20000588

08006208 <OLED_DrawPoint>:

void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
 8006212:	460b      	mov	r3, r1
 8006214:	71bb      	strb	r3, [r7, #6]
 8006216:	4613      	mov	r3, r2
 8006218:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
	if(x>=SCREEN_W||y>=SCREEN_H)return;
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db41      	blt.n	80062aa <OLED_DrawPoint+0xa2>
 8006226:	79bb      	ldrb	r3, [r7, #6]
 8006228:	2b3b      	cmp	r3, #59	; 0x3b
 800622a:	d83e      	bhi.n	80062aa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800622c:	79bb      	ldrb	r3, [r7, #6]
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f1c3 0307 	rsb	r3, r3, #7
 8006236:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006238:	79bb      	ldrb	r3, [r7, #6]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006240:	7b7b      	ldrb	r3, [r7, #13]
 8006242:	f1c3 0307 	rsb	r3, r3, #7
 8006246:	2201      	movs	r2, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800624e:	797b      	ldrb	r3, [r7, #5]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <OLED_DrawPoint+0x72>
 8006254:	79fa      	ldrb	r2, [r7, #7]
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	4917      	ldr	r1, [pc, #92]	; (80062b8 <OLED_DrawPoint+0xb0>)
 800625a:	00d2      	lsls	r2, r2, #3
 800625c:	440a      	add	r2, r1
 800625e:	4413      	add	r3, r2
 8006260:	7818      	ldrb	r0, [r3, #0]
 8006262:	79fa      	ldrb	r2, [r7, #7]
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	7bf9      	ldrb	r1, [r7, #15]
 8006268:	4301      	orrs	r1, r0
 800626a:	b2c8      	uxtb	r0, r1
 800626c:	4912      	ldr	r1, [pc, #72]	; (80062b8 <OLED_DrawPoint+0xb0>)
 800626e:	00d2      	lsls	r2, r2, #3
 8006270:	440a      	add	r2, r1
 8006272:	4413      	add	r3, r2
 8006274:	4602      	mov	r2, r0
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e018      	b.n	80062ac <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 800627a:	79fa      	ldrb	r2, [r7, #7]
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	490e      	ldr	r1, [pc, #56]	; (80062b8 <OLED_DrawPoint+0xb0>)
 8006280:	00d2      	lsls	r2, r2, #3
 8006282:	440a      	add	r2, r1
 8006284:	4413      	add	r3, r2
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b25a      	sxtb	r2, r3
 800628a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628e:	43db      	mvns	r3, r3
 8006290:	b25b      	sxtb	r3, r3
 8006292:	4013      	ands	r3, r2
 8006294:	b259      	sxtb	r1, r3
 8006296:	79fa      	ldrb	r2, [r7, #7]
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	b2c8      	uxtb	r0, r1
 800629c:	4906      	ldr	r1, [pc, #24]	; (80062b8 <OLED_DrawPoint+0xb0>)
 800629e:	00d2      	lsls	r2, r2, #3
 80062a0:	440a      	add	r2, r1
 80062a2:	4413      	add	r3, r2
 80062a4:	4602      	mov	r2, r0
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e000      	b.n	80062ac <OLED_DrawPoint+0xa4>
	if(x>=SCREEN_W||y>=SCREEN_H)return;
 80062aa:	bf00      	nop
}
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000588 	.word	0x20000588

080062bc <OLED_ShowChar>:
	}
	OLED_Refresh_Gram();
}

void OLED_ShowChar(uint8_t x,uint8_t y,char chr,uint8_t size,uint8_t mode)
{
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4623      	mov	r3, r4
 80062cc:	71fb      	strb	r3, [r7, #7]
 80062ce:	4603      	mov	r3, r0
 80062d0:	71bb      	strb	r3, [r7, #6]
 80062d2:	460b      	mov	r3, r1
 80062d4:	717b      	strb	r3, [r7, #5]
 80062d6:	4613      	mov	r3, r2
 80062d8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80062da:	79bb      	ldrb	r3, [r7, #6]
 80062dc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';
 80062de:	797b      	ldrb	r3, [r7, #5]
 80062e0:	3b20      	subs	r3, #32
 80062e2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	73bb      	strb	r3, [r7, #14]
 80062e8:	e041      	b.n	800636e <OLED_ShowChar+0xb2>
    {
		//CHANGE: if(size==16)//temp=oled_asc2_1206[chr][t];
		//else
	//	if (size ==12) temp=oled_asc2_1206[chr][t];
	//	else temp=oled_asc2_1608[chr][t];
	temp=oled_asc2_1206[chr][t];
 80062ea:	797a      	ldrb	r2, [r7, #5]
 80062ec:	7bb9      	ldrb	r1, [r7, #14]
 80062ee:	4825      	ldr	r0, [pc, #148]	; (8006384 <OLED_ShowChar+0xc8>)
 80062f0:	4613      	mov	r3, r2
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4403      	add	r3, r0
 80062fa:	440b      	add	r3, r1
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	73fb      	strb	r3, [r7, #15]
    for(t1=0;t1<CHAR_W;t1++)
 8006300:	2300      	movs	r3, #0
 8006302:	737b      	strb	r3, [r7, #13]
 8006304:	e02d      	b.n	8006362 <OLED_ShowChar+0xa6>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da07      	bge.n	800631e <OLED_ShowChar+0x62>
 800630e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006312:	79b9      	ldrb	r1, [r7, #6]
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff ff76 	bl	8006208 <OLED_DrawPoint>
 800631c:	e00c      	b.n	8006338 <OLED_ShowChar+0x7c>
			else OLED_DrawPoint(x,y,!mode);
 800631e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf0c      	ite	eq
 8006326:	2301      	moveq	r3, #1
 8006328:	2300      	movne	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	79b9      	ldrb	r1, [r7, #6]
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff ff68 	bl	8006208 <OLED_DrawPoint>
			temp<<=1;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
			y++;
 800633e:	79bb      	ldrb	r3, [r7, #6]
 8006340:	3301      	adds	r3, #1
 8006342:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006344:	79ba      	ldrb	r2, [r7, #6]
 8006346:	7b3b      	ldrb	r3, [r7, #12]
 8006348:	1ad2      	subs	r2, r2, r3
 800634a:	793b      	ldrb	r3, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d105      	bne.n	800635c <OLED_ShowChar+0xa0>
			{
				y=y0;
 8006350:	7b3b      	ldrb	r3, [r7, #12]
 8006352:	71bb      	strb	r3, [r7, #6]
				x++;
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	3301      	adds	r3, #1
 8006358:	71fb      	strb	r3, [r7, #7]
				break;
 800635a:	e005      	b.n	8006368 <OLED_ShowChar+0xac>
    for(t1=0;t1<CHAR_W;t1++)
 800635c:	7b7b      	ldrb	r3, [r7, #13]
 800635e:	3301      	adds	r3, #1
 8006360:	737b      	strb	r3, [r7, #13]
 8006362:	7b7b      	ldrb	r3, [r7, #13]
 8006364:	2b07      	cmp	r3, #7
 8006366:	d9ce      	bls.n	8006306 <OLED_ShowChar+0x4a>
    for(t=0;t<size;t++)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	3301      	adds	r3, #1
 800636c:	73bb      	strb	r3, [r7, #14]
 800636e:	7bba      	ldrb	r2, [r7, #14]
 8006370:	793b      	ldrb	r3, [r7, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d3b9      	bcc.n	80062ea <OLED_ShowChar+0x2e>
			}
		}
    }
	OLED_Refresh_Gram();
 8006376:	f7ff fe9f 	bl	80060b8 <OLED_Refresh_Gram>
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	bd90      	pop	{r4, r7, pc}
 8006382:	bf00      	nop
 8006384:	0801048c 	.word	0x0801048c

08006388 <OLED_ShowString>:
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1);
	}
}

void OLED_ShowString(uint8_t x,uint8_t y,const char *p)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af02      	add	r7, sp, #8
 800638e:	4603      	mov	r3, r0
 8006390:	603a      	str	r2, [r7, #0]
 8006392:	71fb      	strb	r3, [r7, #7]
 8006394:	460b      	mov	r3, r1
 8006396:	71bb      	strb	r3, [r7, #6]
    while(*p!='\0')
 8006398:	e01f      	b.n	80063da <OLED_ShowString+0x52>
    {
        if(x>MAX_CHAR_POSX){x=0;y+=CHAR_H;}
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2b78      	cmp	r3, #120	; 0x78
 800639e:	d904      	bls.n	80063aa <OLED_ShowString+0x22>
 80063a0:	2300      	movs	r3, #0
 80063a2:	71fb      	strb	r3, [r7, #7]
 80063a4:	79bb      	ldrb	r3, [r7, #6]
 80063a6:	330c      	adds	r3, #12
 80063a8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80063aa:	79bb      	ldrb	r3, [r7, #6]
 80063ac:	2b3c      	cmp	r3, #60	; 0x3c
 80063ae:	d905      	bls.n	80063bc <OLED_ShowString+0x34>
 80063b0:	2300      	movs	r3, #0
 80063b2:	71fb      	strb	r3, [r7, #7]
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	71bb      	strb	r3, [r7, #6]
 80063b8:	f7ff ff00 	bl	80061bc <OLED_Clear>
        //CHANGE: OLED_ShowChar(x,y,*p,16,1);
		OLED_ShowChar(x,y,*p,CHAR_H,1);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	79b9      	ldrb	r1, [r7, #6]
 80063c2:	79f8      	ldrb	r0, [r7, #7]
 80063c4:	2301      	movs	r3, #1
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	230c      	movs	r3, #12
 80063ca:	f7ff ff77 	bl	80062bc <OLED_ShowChar>
        x+=CHAR_W;
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	3308      	adds	r3, #8
 80063d2:	71fb      	strb	r3, [r7, #7]
        p++;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1db      	bne.n	800639a <OLED_ShowString+0x12>
    }
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <OLED_Init>:
}
*/

//SSD1306
void OLED_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
	//ADD: 
	HAL_PWR_EnableBkUpAccess(); // Enable access to the RTC and Backup Register
 80063f0:	f002 fbe0 	bl	8008bb4 <HAL_PWR_EnableBkUpAccess>
	//ADD:
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); 	//turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 80063f4:	4b41      	ldr	r3, [pc, #260]	; (80064fc <OLED_Init+0x110>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a40      	ldr	r2, [pc, #256]	; (80064fc <OLED_Init+0x110>)
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006400:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <OLED_Init+0x110>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <OLED_Init+0x110>)
 8006406:	f023 0304 	bic.w	r3, r3, #4
 800640a:	6713      	str	r3, [r2, #112]	; 0x70
																			//LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800640c:	f002 fbe6 	bl	8008bdc <HAL_PWR_DisableBkUpAccess>

	//CHANGE: OLED_RST_L;			  		//
	OLED_RST_Clr();
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	483a      	ldr	r0, [pc, #232]	; (8006500 <OLED_Init+0x114>)
 8006416:	f001 fbdb 	bl	8007bd0 <HAL_GPIO_WritePin>
	//CHANGE: LL_mDelay(100);
	HAL_Delay(100);
 800641a:	2064      	movs	r0, #100	; 0x64
 800641c:	f000 fc74 	bl	8006d08 <HAL_Delay>
	//CHANGE: OLED_RST_H;
	OLED_RST_Set();
 8006420:	2201      	movs	r2, #1
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	4836      	ldr	r0, [pc, #216]	; (8006500 <OLED_Init+0x114>)
 8006426:	f001 fbd3 	bl	8007bd0 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); // Off Display
 800642a:	2100      	movs	r1, #0
 800642c:	20ae      	movs	r0, #174	; 0xae
 800642e:	f7ff fe7b 	bl	8006128 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5,OLED_CMD); // Set Oscillator Division
 8006432:	2100      	movs	r1, #0
 8006434:	20d5      	movs	r0, #213	; 0xd5
 8006436:	f7ff fe77 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800643a:	2100      	movs	r1, #0
 800643c:	2050      	movs	r0, #80	; 0x50
 800643e:	f7ff fe73 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); // multiple ratio
 8006442:	2100      	movs	r1, #0
 8006444:	20a8      	movs	r0, #168	; 0xa8
 8006446:	f7ff fe6f 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0x3F(1/64)
 800644a:	2100      	movs	r1, #0
 800644c:	203f      	movs	r0, #63	; 0x3f
 800644e:	f7ff fe6b 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //set display offset
 8006452:	2100      	movs	r1, #0
 8006454:	20d3      	movs	r0, #211	; 0xd3
 8006456:	f7ff fe67 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800645a:	2100      	movs	r1, #0
 800645c:	2000      	movs	r0, #0
 800645e:	f7ff fe63 	bl	8006128 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD);//set display start line [5:0]- from 0-63. RESET
 8006462:	2100      	movs	r1, #0
 8006464:	2040      	movs	r0, #64	; 0x40
 8006466:	f7ff fe5f 	bl	8006128 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD);//Set charge pump
 800646a:	2100      	movs	r1, #0
 800646c:	208d      	movs	r0, #141	; 0x8d
 800646e:	f7ff fe5b 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//Enable Charge pump. //  bit2，
 8006472:	2100      	movs	r1, #0
 8006474:	2014      	movs	r0, #20
 8006476:	f7ff fe57 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//Set Memory Addressing Mode
 800647a:	2100      	movs	r1, #0
 800647c:	2020      	movs	r0, #32
 800647e:	f7ff fe53 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//Page Addressing Mode (RESET) //[1:0],;;1
 8006482:	2100      	movs	r1, #0
 8006484:	2002      	movs	r0, #2
 8006486:	f7ff fe4f 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//Set segment ??,bit0:0,0->0;1,0->127;
 800648a:	2100      	movs	r1, #0
 800648c:	20a1      	movs	r0, #161	; 0xa1
 800648e:	f7ff fe4b 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD);//Set COM Output Scan Direction //; bit3[N-;N:
 8006492:	2100      	movs	r1, #0
 8006494:	20c0      	movs	r0, #192	; 0xc0
 8006496:	f7ff fe47 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//Set COM Pins
 800649a:	2100      	movs	r1, #0
 800649c:	20da      	movs	r0, #218	; 0xda
 800649e:	f7ff fe43 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//[5:4] setting
 80064a2:	2100      	movs	r1, #0
 80064a4:	2012      	movs	r0, #18
 80064a6:	f7ff fe3f 	bl	8006128 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD);//Contrast Control
 80064aa:	2100      	movs	r1, #0
 80064ac:	2081      	movs	r0, #129	; 0x81
 80064ae:	f7ff fe3b 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD);//1~256; Default: 0x7F
 80064b2:	2100      	movs	r1, #0
 80064b4:	20ef      	movs	r0, #239	; 0xef
 80064b6:	f7ff fe37 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-charge Period
 80064ba:	2100      	movs	r1, #0
 80064bc:	20d9      	movs	r0, #217	; 0xd9
 80064be:	f7ff fe33 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD);//[3:0],PHASE 1;[7:4],PHASE 2;
 80064c2:	2100      	movs	r1, #0
 80064c4:	20f1      	movs	r0, #241	; 0xf1
 80064c6:	f7ff fe2f 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//
 80064ca:	2100      	movs	r1, #0
 80064cc:	20db      	movs	r0, #219	; 0xdb
 80064ce:	f7ff fe2b 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80064d2:	2100      	movs	r1, #0
 80064d4:	2030      	movs	r0, #48	; 0x30
 80064d6:	f7ff fe27 	bl	8006128 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD);//Enable display outputs according to the ?? content //;bit0:1,;0,
 80064da:	2100      	movs	r1, #0
 80064dc:	20a4      	movs	r0, #164	; 0xa4
 80064de:	f7ff fe23 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//Set normal display //;bit0:1,;0,
 80064e2:	2100      	movs	r1, #0
 80064e4:	20a6      	movs	r0, #166	; 0xa6
 80064e6:	f7ff fe1f 	bl	8006128 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//Display ON
 80064ea:	2100      	movs	r1, #0
 80064ec:	20af      	movs	r0, #175	; 0xaf
 80064ee:	f7ff fe1b 	bl	8006128 <OLED_WR_Byte>
	//REMOVE: LL_mDelay(100);
	OLED_Clear();
 80064f2:	f7ff fe63 	bl	80061bc <OLED_Clear>
}
 80064f6:	bf00      	nop
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800
 8006500:	40021000 	.word	0x40021000

08006504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800650a:	2300      	movs	r3, #0
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <HAL_MspInit+0x54>)
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	4a11      	ldr	r2, [pc, #68]	; (8006558 <HAL_MspInit+0x54>)
 8006514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006518:	6453      	str	r3, [r2, #68]	; 0x44
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <HAL_MspInit+0x54>)
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006526:	2300      	movs	r3, #0
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_MspInit+0x54>)
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	4a0a      	ldr	r2, [pc, #40]	; (8006558 <HAL_MspInit+0x54>)
 8006530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006534:	6413      	str	r3, [r2, #64]	; 0x40
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <HAL_MspInit+0x54>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006542:	2200      	movs	r2, #0
 8006544:	210f      	movs	r1, #15
 8006546:	f06f 0001 	mvn.w	r0, #1
 800654a:	f001 f8dc 	bl	8007706 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40023800 	.word	0x40023800

0800655c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08c      	sub	sp, #48	; 0x30
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006564:	f107 031c 	add.w	r3, r7, #28
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2e      	ldr	r2, [pc, #184]	; (8006634 <HAL_ADC_MspInit+0xd8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d128      	bne.n	80065d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6453      	str	r3, [r2, #68]	; 0x44
 800658e:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	4a25      	ldr	r2, [pc, #148]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	6313      	str	r3, [r2, #48]	; 0x30
 80065aa:	4b23      	ldr	r3, [pc, #140]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80065b6:	2302      	movs	r3, #2
 80065b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065ba:	2303      	movs	r3, #3
 80065bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065c2:	f107 031c 	add.w	r3, r7, #28
 80065c6:	4619      	mov	r1, r3
 80065c8:	481c      	ldr	r0, [pc, #112]	; (800663c <HAL_ADC_MspInit+0xe0>)
 80065ca:	f001 f965 	bl	8007898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80065ce:	e02c      	b.n	800662a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1a      	ldr	r2, [pc, #104]	; (8006640 <HAL_ADC_MspInit+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d127      	bne.n	800662a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	4b16      	ldr	r3, [pc, #88]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	4a15      	ldr	r2, [pc, #84]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065e8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	4a0e      	ldr	r2, [pc, #56]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 8006600:	f043 0304 	orr.w	r3, r3, #4
 8006604:	6313      	str	r3, [r2, #48]	; 0x30
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <HAL_ADC_MspInit+0xdc>)
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006612:	2310      	movs	r3, #16
 8006614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006616:	2303      	movs	r3, #3
 8006618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800661e:	f107 031c 	add.w	r3, r7, #28
 8006622:	4619      	mov	r1, r3
 8006624:	4805      	ldr	r0, [pc, #20]	; (800663c <HAL_ADC_MspInit+0xe0>)
 8006626:	f001 f937 	bl	8007898 <HAL_GPIO_Init>
}
 800662a:	bf00      	nop
 800662c:	3730      	adds	r7, #48	; 0x30
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40012000 	.word	0x40012000
 8006638:	40023800 	.word	0x40023800
 800663c:	40020800 	.word	0x40020800
 8006640:	40012100 	.word	0x40012100

08006644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	f107 0314 	add.w	r3, r7, #20
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	609a      	str	r2, [r3, #8]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_I2C_MspInit+0x84>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d12c      	bne.n	80066c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <HAL_I2C_MspInit+0x88>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	4a17      	ldr	r2, [pc, #92]	; (80066cc <HAL_I2C_MspInit+0x88>)
 8006670:	f043 0302 	orr.w	r3, r3, #2
 8006674:	6313      	str	r3, [r2, #48]	; 0x30
 8006676:	4b15      	ldr	r3, [pc, #84]	; (80066cc <HAL_I2C_MspInit+0x88>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006682:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006688:	2312      	movs	r3, #18
 800668a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800668c:	2301      	movs	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006690:	2302      	movs	r3, #2
 8006692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006694:	2304      	movs	r3, #4
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	4619      	mov	r1, r3
 800669e:	480c      	ldr	r0, [pc, #48]	; (80066d0 <HAL_I2C_MspInit+0x8c>)
 80066a0:	f001 f8fa 	bl	8007898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <HAL_I2C_MspInit+0x88>)
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	4a07      	ldr	r2, [pc, #28]	; (80066cc <HAL_I2C_MspInit+0x88>)
 80066ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066b2:	6413      	str	r3, [r2, #64]	; 0x40
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_I2C_MspInit+0x88>)
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80066c0:	bf00      	nop
 80066c2:	3728      	adds	r7, #40	; 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40005400 	.word	0x40005400
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40020400 	.word	0x40020400

080066d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066dc:	f107 0314 	add.w	r3, r7, #20
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	609a      	str	r2, [r3, #8]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <HAL_TIM_Base_MspInit+0xbc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d116      	bne.n	8006724 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	4b26      	ldr	r3, [pc, #152]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	4a25      	ldr	r2, [pc, #148]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	6453      	str	r3, [r2, #68]	; 0x44
 8006706:	4b23      	ldr	r3, [pc, #140]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8006712:	2200      	movs	r2, #0
 8006714:	2105      	movs	r1, #5
 8006716:	2019      	movs	r0, #25
 8006718:	f000 fff5 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800671c:	2019      	movs	r0, #25
 800671e:	f001 f80e 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006722:	e030      	b.n	8006786 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM8)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <HAL_TIM_Base_MspInit+0xc4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d12b      	bne.n	8006786 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	4b18      	ldr	r3, [pc, #96]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006738:	f043 0302 	orr.w	r3, r3, #2
 800673c:	6453      	str	r3, [r2, #68]	; 0x44
 800673e:	4b15      	ldr	r3, [pc, #84]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800674a:	2300      	movs	r3, #0
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	4a10      	ldr	r2, [pc, #64]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 8006754:	f043 0304 	orr.w	r3, r3, #4
 8006758:	6313      	str	r3, [r2, #48]	; 0x30
 800675a:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <HAL_TIM_Base_MspInit+0xc0>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8006766:	23c0      	movs	r3, #192	; 0xc0
 8006768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800676a:	2302      	movs	r3, #2
 800676c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006776:	2303      	movs	r3, #3
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800677a:	f107 0314 	add.w	r3, r7, #20
 800677e:	4619      	mov	r1, r3
 8006780:	4806      	ldr	r0, [pc, #24]	; (800679c <HAL_TIM_Base_MspInit+0xc8>)
 8006782:	f001 f889 	bl	8007898 <HAL_GPIO_Init>
}
 8006786:	bf00      	nop
 8006788:	3728      	adds	r7, #40	; 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40010000 	.word	0x40010000
 8006794:	40023800 	.word	0x40023800
 8006798:	40010400 	.word	0x40010400
 800679c:	40020800 	.word	0x40020800

080067a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	; 0x30
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d14b      	bne.n	800685a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	4b3f      	ldr	r3, [pc, #252]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	4a3e      	ldr	r2, [pc, #248]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6413      	str	r3, [r2, #64]	; 0x40
 80067d2:	4b3c      	ldr	r3, [pc, #240]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	4b38      	ldr	r3, [pc, #224]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	4a37      	ldr	r2, [pc, #220]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 80067e8:	f043 0301 	orr.w	r3, r3, #1
 80067ec:	6313      	str	r3, [r2, #48]	; 0x30
 80067ee:	4b35      	ldr	r3, [pc, #212]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 8006804:	f043 0302 	orr.w	r3, r3, #2
 8006808:	6313      	str	r3, [r2, #48]	; 0x30
 800680a:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681c:	2302      	movs	r3, #2
 800681e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006820:	2300      	movs	r3, #0
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006824:	2300      	movs	r3, #0
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006828:	2301      	movs	r3, #1
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800682c:	f107 031c 	add.w	r3, r7, #28
 8006830:	4619      	mov	r1, r3
 8006832:	4825      	ldr	r0, [pc, #148]	; (80068c8 <HAL_TIM_Encoder_MspInit+0x128>)
 8006834:	f001 f830 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006838:	2308      	movs	r3, #8
 800683a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683c:	2302      	movs	r3, #2
 800683e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006844:	2300      	movs	r3, #0
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006848:	2301      	movs	r3, #1
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800684c:	f107 031c 	add.w	r3, r7, #28
 8006850:	4619      	mov	r1, r3
 8006852:	481e      	ldr	r0, [pc, #120]	; (80068cc <HAL_TIM_Encoder_MspInit+0x12c>)
 8006854:	f001 f820 	bl	8007898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006858:	e030      	b.n	80068bc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1c      	ldr	r2, [pc, #112]	; (80068d0 <HAL_TIM_Encoder_MspInit+0x130>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d12b      	bne.n	80068bc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 800686e:	f043 0302 	orr.w	r3, r3, #2
 8006872:	6413      	str	r3, [r2, #64]	; 0x40
 8006874:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6313      	str	r3, [r2, #48]	; 0x30
 8006890:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <HAL_TIM_Encoder_MspInit+0x124>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800689c:	23c0      	movs	r3, #192	; 0xc0
 800689e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068a0:	2302      	movs	r3, #2
 80068a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a8:	2300      	movs	r3, #0
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068ac:	2302      	movs	r3, #2
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b0:	f107 031c 	add.w	r3, r7, #28
 80068b4:	4619      	mov	r1, r3
 80068b6:	4804      	ldr	r0, [pc, #16]	; (80068c8 <HAL_TIM_Encoder_MspInit+0x128>)
 80068b8:	f000 ffee 	bl	8007898 <HAL_GPIO_Init>
}
 80068bc:	bf00      	nop
 80068be:	3730      	adds	r7, #48	; 0x30
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40020000 	.word	0x40020000
 80068cc:	40020400 	.word	0x40020400
 80068d0:	40000400 	.word	0x40000400

080068d4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068dc:	f107 0314 	add.w	r3, r7, #20
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_TIM_IC_MspInit+0x94>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d134      	bne.n	8006960 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <HAL_TIM_IC_MspInit+0x98>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	4a1b      	ldr	r2, [pc, #108]	; (800696c <HAL_TIM_IC_MspInit+0x98>)
 8006900:	f043 0304 	orr.w	r3, r3, #4
 8006904:	6413      	str	r3, [r2, #64]	; 0x40
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_TIM_IC_MspInit+0x98>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <HAL_TIM_IC_MspInit+0x98>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <HAL_TIM_IC_MspInit+0x98>)
 800691c:	f043 0308 	orr.w	r3, r3, #8
 8006920:	6313      	str	r3, [r2, #48]	; 0x30
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_TIM_IC_MspInit+0x98>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800692e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006934:	2302      	movs	r3, #2
 8006936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006938:	2300      	movs	r3, #0
 800693a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800693c:	2300      	movs	r3, #0
 800693e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006940:	2302      	movs	r3, #2
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006944:	f107 0314 	add.w	r3, r7, #20
 8006948:	4619      	mov	r1, r3
 800694a:	4809      	ldr	r0, [pc, #36]	; (8006970 <HAL_TIM_IC_MspInit+0x9c>)
 800694c:	f000 ffa4 	bl	8007898 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006950:	2200      	movs	r2, #0
 8006952:	2105      	movs	r1, #5
 8006954:	201e      	movs	r0, #30
 8006956:	f000 fed6 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800695a:	201e      	movs	r0, #30
 800695c:	f000 feef 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006960:	bf00      	nop
 8006962:	3728      	adds	r7, #40	; 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40000800 	.word	0x40000800
 800696c:	40023800 	.word	0x40023800
 8006970:	40020c00 	.word	0x40020c00

08006974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a12      	ldr	r2, [pc, #72]	; (80069dc <HAL_TIM_MspPostInit+0x68>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d11e      	bne.n	80069d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <HAL_TIM_MspPostInit+0x6c>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <HAL_TIM_MspPostInit+0x6c>)
 80069a0:	f043 0310 	orr.w	r3, r3, #16
 80069a4:	6313      	str	r3, [r2, #48]	; 0x30
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <HAL_TIM_MspPostInit+0x6c>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80069b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b8:	2302      	movs	r3, #2
 80069ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80069c4:	2301      	movs	r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069c8:	f107 030c 	add.w	r3, r7, #12
 80069cc:	4619      	mov	r1, r3
 80069ce:	4805      	ldr	r0, [pc, #20]	; (80069e4 <HAL_TIM_MspPostInit+0x70>)
 80069d0:	f000 ff62 	bl	8007898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80069d4:	bf00      	nop
 80069d6:	3720      	adds	r7, #32
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40023800 	.word	0x40023800
 80069e4:	40021000 	.word	0x40021000

080069e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	609a      	str	r2, [r3, #8]
 80069fc:	60da      	str	r2, [r3, #12]
 80069fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <HAL_UART_MspInit+0xb8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d145      	bne.n	8006a96 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <HAL_UART_MspInit+0xbc>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	4a24      	ldr	r2, [pc, #144]	; (8006aa4 <HAL_UART_MspInit+0xbc>)
 8006a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a18:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1a:	4b22      	ldr	r3, [pc, #136]	; (8006aa4 <HAL_UART_MspInit+0xbc>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_UART_MspInit+0xbc>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_UART_MspInit+0xbc>)
 8006a30:	f043 0304 	orr.w	r3, r3, #4
 8006a34:	6313      	str	r3, [r2, #48]	; 0x30
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <HAL_UART_MspInit+0xbc>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a50:	2302      	movs	r3, #2
 8006a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a54:	2307      	movs	r3, #7
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a58:	f107 0314 	add.w	r3, r7, #20
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4812      	ldr	r0, [pc, #72]	; (8006aa8 <HAL_UART_MspInit+0xc0>)
 8006a60:	f000 ff1a 	bl	8007898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a72:	2302      	movs	r3, #2
 8006a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a76:	2307      	movs	r3, #7
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a7a:	f107 0314 	add.w	r3, r7, #20
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4809      	ldr	r0, [pc, #36]	; (8006aa8 <HAL_UART_MspInit+0xc0>)
 8006a82:	f000 ff09 	bl	8007898 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2105      	movs	r1, #5
 8006a8a:	2027      	movs	r0, #39	; 0x27
 8006a8c:	f000 fe3b 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a90:	2027      	movs	r0, #39	; 0x27
 8006a92:	f000 fe54 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006a96:	bf00      	nop
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40004800 	.word	0x40004800
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	40020800 	.word	0x40020800

08006aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ab0:	e7fe      	b.n	8006ab0 <NMI_Handler+0x4>

08006ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ab6:	e7fe      	b.n	8006ab6 <HardFault_Handler+0x4>

08006ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006abc:	e7fe      	b.n	8006abc <MemManage_Handler+0x4>

08006abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ac2:	e7fe      	b.n	8006ac2 <BusFault_Handler+0x4>

08006ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ac8:	e7fe      	b.n	8006ac8 <UsageFault_Handler+0x4>

08006aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006aca:	b480      	push	{r7}
 8006acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ace:	bf00      	nop
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006adc:	f000 f8f4 	bl	8006cc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ae0:	f006 fffa 	bl	800dad8 <xTaskGetSchedulerState>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d001      	beq.n	8006aee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006aea:	f007 fde5 	bl	800e6b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OLED_DC_Pin);
 8006af6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006afa:	f001 f883 	bl	8007c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b08:	4802      	ldr	r0, [pc, #8]	; (8006b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006b0a:	f003 f99d 	bl	8009e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006b0e:	bf00      	nop
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	200002a0 	.word	0x200002a0

08006b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006b1c:	4802      	ldr	r0, [pc, #8]	; (8006b28 <TIM4_IRQHandler+0x10>)
 8006b1e:	f003 f993 	bl	8009e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006b22:	bf00      	nop
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000378 	.word	0x20000378

08006b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006b30:	4802      	ldr	r0, [pc, #8]	; (8006b3c <USART3_IRQHandler+0x10>)
 8006b32:	f004 fb4f 	bl	800b1d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006b36:	bf00      	nop
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000408 	.word	0x20000408

08006b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <_sbrk+0x5c>)
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <_sbrk+0x60>)
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b54:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <_sbrk+0x64>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b5c:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <_sbrk+0x64>)
 8006b5e:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <_sbrk+0x68>)
 8006b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <_sbrk+0x64>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d207      	bcs.n	8006b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b70:	f008 f858 	bl	800ec24 <__errno>
 8006b74:	4603      	mov	r3, r0
 8006b76:	220c      	movs	r2, #12
 8006b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	e009      	b.n	8006b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <_sbrk+0x64>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <_sbrk+0x64>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	4a05      	ldr	r2, [pc, #20]	; (8006ba4 <_sbrk+0x64>)
 8006b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20020000 	.word	0x20020000
 8006ba0:	00000400 	.word	0x00000400
 8006ba4:	20000988 	.word	0x20000988
 8006ba8:	20005428 	.word	0x20005428

08006bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <SystemInit+0x20>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <SystemInit+0x20>)
 8006bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000ed00 	.word	0xe000ed00

08006bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bd4:	480d      	ldr	r0, [pc, #52]	; (8006c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006bd6:	490e      	ldr	r1, [pc, #56]	; (8006c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006bd8:	4a0e      	ldr	r2, [pc, #56]	; (8006c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bdc:	e002      	b.n	8006be4 <LoopCopyDataInit>

08006bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006be2:	3304      	adds	r3, #4

08006be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006be8:	d3f9      	bcc.n	8006bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bea:	4a0b      	ldr	r2, [pc, #44]	; (8006c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006bec:	4c0b      	ldr	r4, [pc, #44]	; (8006c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006bf0:	e001      	b.n	8006bf6 <LoopFillZerobss>

08006bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bf4:	3204      	adds	r2, #4

08006bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bf8:	d3fb      	bcc.n	8006bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006bfa:	f7ff ffd7 	bl	8006bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bfe:	f008 f817 	bl	800ec30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c02:	f7fa fac7 	bl	8001194 <main>
  bx  lr    
 8006c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c10:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8006c14:	08010d4c 	.word	0x08010d4c
  ldr r2, =_sbss
 8006c18:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8006c1c:	20005428 	.word	0x20005428

08006c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c20:	e7fe      	b.n	8006c20 <ADC_IRQHandler>
	...

08006c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c28:	4b0e      	ldr	r3, [pc, #56]	; (8006c64 <HAL_Init+0x40>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a0d      	ldr	r2, [pc, #52]	; (8006c64 <HAL_Init+0x40>)
 8006c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c34:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <HAL_Init+0x40>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a0a      	ldr	r2, [pc, #40]	; (8006c64 <HAL_Init+0x40>)
 8006c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c40:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <HAL_Init+0x40>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <HAL_Init+0x40>)
 8006c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c4c:	2003      	movs	r0, #3
 8006c4e:	f000 fd4f 	bl	80076f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c52:	200f      	movs	r0, #15
 8006c54:	f000 f808 	bl	8006c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c58:	f7ff fc54 	bl	8006504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40023c00 	.word	0x40023c00

08006c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <HAL_InitTick+0x54>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <HAL_InitTick+0x58>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fd67 	bl	800775a <HAL_SYSTICK_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e00e      	b.n	8006cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b0f      	cmp	r3, #15
 8006c9a:	d80a      	bhi.n	8006cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	f000 fd2f 	bl	8007706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ca8:	4a06      	ldr	r2, [pc, #24]	; (8006cc4 <HAL_InitTick+0x5c>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e000      	b.n	8006cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000140 	.word	0x20000140
 8006cc0:	20000148 	.word	0x20000148
 8006cc4:	20000144 	.word	0x20000144

08006cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_IncTick+0x20>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <HAL_IncTick+0x24>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	4a04      	ldr	r2, [pc, #16]	; (8006cec <HAL_IncTick+0x24>)
 8006cda:	6013      	str	r3, [r2, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000148 	.word	0x20000148
 8006cec:	2000098c 	.word	0x2000098c

08006cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <HAL_GetTick+0x14>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000098c 	.word	0x2000098c

08006d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d10:	f7ff ffee 	bl	8006cf0 <HAL_GetTick>
 8006d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d005      	beq.n	8006d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_Delay+0x44>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d2e:	bf00      	nop
 8006d30:	f7ff ffde 	bl	8006cf0 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d8f7      	bhi.n	8006d30 <HAL_Delay+0x28>
  {
  }
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000148 	.word	0x20000148

08006d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e033      	b.n	8006dce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d109      	bne.n	8006d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fbf4 	bl	800655c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d118      	bne.n	8006dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d96:	f023 0302 	bic.w	r3, r3, #2
 8006d9a:	f043 0202 	orr.w	r2, r3, #2
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fad8 	bl	8007358 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f023 0303 	bic.w	r3, r3, #3
 8006db6:	f043 0201 	orr.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8006dbe:	e001      	b.n	8006dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_ADC_Start+0x1a>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e0b2      	b.n	8006f58 <HAL_ADC_Start+0x180>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d018      	beq.n	8006e3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e18:	4b52      	ldr	r3, [pc, #328]	; (8006f64 <HAL_ADC_Start+0x18c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a52      	ldr	r2, [pc, #328]	; (8006f68 <HAL_ADC_Start+0x190>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	0c9a      	lsrs	r2, r3, #18
 8006e24:	4613      	mov	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e2c:	e002      	b.n	8006e34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f9      	bne.n	8006e2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d17a      	bne.n	8006f3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d106      	bne.n	8006e96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8c:	f023 0206 	bic.w	r2, r3, #6
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	645a      	str	r2, [r3, #68]	; 0x44
 8006e94:	e002      	b.n	8006e9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ea4:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <HAL_ADC_Start+0x194>)
 8006ea6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006eb0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d12a      	bne.n	8006f14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2b      	ldr	r2, [pc, #172]	; (8006f70 <HAL_ADC_Start+0x198>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d015      	beq.n	8006ef4 <HAL_ADC_Start+0x11c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a29      	ldr	r2, [pc, #164]	; (8006f74 <HAL_ADC_Start+0x19c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d105      	bne.n	8006ede <HAL_ADC_Start+0x106>
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <HAL_ADC_Start+0x194>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <HAL_ADC_Start+0x1a0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d136      	bne.n	8006f56 <HAL_ADC_Start+0x17e>
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <HAL_ADC_Start+0x194>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d130      	bne.n	8006f56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d129      	bne.n	8006f56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f10:	609a      	str	r2, [r3, #8]
 8006f12:	e020      	b.n	8006f56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <HAL_ADC_Start+0x198>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d11b      	bne.n	8006f56 <HAL_ADC_Start+0x17e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d114      	bne.n	8006f56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f3a:	609a      	str	r2, [r3, #8]
 8006f3c:	e00b      	b.n	8006f56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f043 0210 	orr.w	r2, r3, #16
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4e:	f043 0201 	orr.w	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20000140 	.word	0x20000140
 8006f68:	431bde83 	.word	0x431bde83
 8006f6c:	40012300 	.word	0x40012300
 8006f70:	40012000 	.word	0x40012000
 8006f74:	40012100 	.word	0x40012100
 8006f78:	40012200 	.word	0x40012200

08006f7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_ADC_Stop+0x16>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e021      	b.n	8006fd6 <HAL_ADC_Stop+0x5a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	f043 0201 	orr.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffe:	d113      	bne.n	8007028 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800700a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700e:	d10b      	bne.n	8007028 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f043 0220 	orr.w	r2, r3, #32
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e063      	b.n	80070f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007028:	f7ff fe62 	bl	8006cf0 <HAL_GetTick>
 800702c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800702e:	e021      	b.n	8007074 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d01d      	beq.n	8007074 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <HAL_ADC_PollForConversion+0x6c>
 800703e:	f7ff fe57 	bl	8006cf0 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d212      	bcs.n	8007074 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d00b      	beq.n	8007074 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	f043 0204 	orr.w	r2, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e03d      	b.n	80070f0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b02      	cmp	r3, #2
 8007080:	d1d6      	bne.n	8007030 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f06f 0212 	mvn.w	r2, #18
 800708a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d123      	bne.n	80070ee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11f      	bne.n	80070ee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d006      	beq.n	80070ca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d111      	bne.n	80070ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d105      	bne.n	80070ee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f043 0201 	orr.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_ADC_ConfigChannel+0x1c>
 800712c:	2302      	movs	r3, #2
 800712e:	e105      	b.n	800733c <HAL_ADC_ConfigChannel+0x228>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b09      	cmp	r3, #9
 800713e:	d925      	bls.n	800718c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68d9      	ldr	r1, [r3, #12]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	3b1e      	subs	r3, #30
 8007156:	2207      	movs	r2, #7
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	43da      	mvns	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	400a      	ands	r2, r1
 8007164:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68d9      	ldr	r1, [r3, #12]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	4618      	mov	r0, r3
 8007178:	4603      	mov	r3, r0
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	4403      	add	r3, r0
 800717e:	3b1e      	subs	r3, #30
 8007180:	409a      	lsls	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	e022      	b.n	80071d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6919      	ldr	r1, [r3, #16]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	4613      	mov	r3, r2
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	4413      	add	r3, r2
 80071a0:	2207      	movs	r2, #7
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	43da      	mvns	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	400a      	ands	r2, r1
 80071ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6919      	ldr	r1, [r3, #16]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4618      	mov	r0, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4403      	add	r3, r0
 80071c8:	409a      	lsls	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d824      	bhi.n	8007224 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	3b05      	subs	r3, #5
 80071ec:	221f      	movs	r2, #31
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43da      	mvns	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	400a      	ands	r2, r1
 80071fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	4618      	mov	r0, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	3b05      	subs	r3, #5
 8007216:	fa00 f203 	lsl.w	r2, r0, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	635a      	str	r2, [r3, #52]	; 0x34
 8007222:	e04c      	b.n	80072be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d824      	bhi.n	8007276 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	3b23      	subs	r3, #35	; 0x23
 800723e:	221f      	movs	r2, #31
 8007240:	fa02 f303 	lsl.w	r3, r2, r3
 8007244:	43da      	mvns	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	400a      	ands	r2, r1
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	4618      	mov	r0, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	3b23      	subs	r3, #35	; 0x23
 8007268:	fa00 f203 	lsl.w	r2, r0, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
 8007274:	e023      	b.n	80072be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	3b41      	subs	r3, #65	; 0x41
 8007288:	221f      	movs	r2, #31
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43da      	mvns	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	400a      	ands	r2, r1
 8007296:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4618      	mov	r0, r3
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	3b41      	subs	r3, #65	; 0x41
 80072b2:	fa00 f203 	lsl.w	r2, r0, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072be:	4b22      	ldr	r3, [pc, #136]	; (8007348 <HAL_ADC_ConfigChannel+0x234>)
 80072c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a21      	ldr	r2, [pc, #132]	; (800734c <HAL_ADC_ConfigChannel+0x238>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d109      	bne.n	80072e0 <HAL_ADC_ConfigChannel+0x1cc>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b12      	cmp	r3, #18
 80072d2:	d105      	bne.n	80072e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a19      	ldr	r2, [pc, #100]	; (800734c <HAL_ADC_ConfigChannel+0x238>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d123      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x21e>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d003      	beq.n	80072fa <HAL_ADC_ConfigChannel+0x1e6>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b11      	cmp	r3, #17
 80072f8:	d11b      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b10      	cmp	r3, #16
 800730c:	d111      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <HAL_ADC_ConfigChannel+0x23c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <HAL_ADC_ConfigChannel+0x240>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	0c9a      	lsrs	r2, r3, #18
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007324:	e002      	b.n	800732c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3b01      	subs	r3, #1
 800732a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f9      	bne.n	8007326 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40012300 	.word	0x40012300
 800734c:	40012000 	.word	0x40012000
 8007350:	20000140 	.word	0x20000140
 8007354:	431bde83 	.word	0x431bde83

08007358 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007360:	4b79      	ldr	r3, [pc, #484]	; (8007548 <ADC_Init+0x1f0>)
 8007362:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	431a      	orrs	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800738c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	021a      	lsls	r2, r3, #8
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80073b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6859      	ldr	r1, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6899      	ldr	r1, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	4a58      	ldr	r2, [pc, #352]	; (800754c <ADC_Init+0x1f4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d022      	beq.n	8007436 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6899      	ldr	r1, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	e00f      	b.n	8007456 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007454:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0202 	bic.w	r2, r2, #2
 8007464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6899      	ldr	r1, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	7e1b      	ldrb	r3, [r3, #24]
 8007470:	005a      	lsls	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01b      	beq.n	80074bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007492:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80074a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6859      	ldr	r1, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	3b01      	subs	r3, #1
 80074b0:	035a      	lsls	r2, r3, #13
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	e007      	b.n	80074cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	051a      	lsls	r2, r3, #20
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6899      	ldr	r1, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800750e:	025a      	lsls	r2, r3, #9
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6899      	ldr	r1, [r3, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	029a      	lsls	r2, r3, #10
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	40012300 	.word	0x40012300
 800754c:	0f000001 	.word	0x0f000001

08007550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <__NVIC_SetPriorityGrouping+0x44>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800756c:	4013      	ands	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800757c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007582:	4a04      	ldr	r2, [pc, #16]	; (8007594 <__NVIC_SetPriorityGrouping+0x44>)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	60d3      	str	r3, [r2, #12]
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	e000ed00 	.word	0xe000ed00

08007598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <__NVIC_GetPriorityGrouping+0x18>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	f003 0307 	and.w	r3, r3, #7
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	e000ed00 	.word	0xe000ed00

080075b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	db0b      	blt.n	80075de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	f003 021f 	and.w	r2, r3, #31
 80075cc:	4907      	ldr	r1, [pc, #28]	; (80075ec <__NVIC_EnableIRQ+0x38>)
 80075ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	2001      	movs	r0, #1
 80075d6:	fa00 f202 	lsl.w	r2, r0, r2
 80075da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	e000e100 	.word	0xe000e100

080075f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db0a      	blt.n	800761a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	490c      	ldr	r1, [pc, #48]	; (800763c <__NVIC_SetPriority+0x4c>)
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	440b      	add	r3, r1
 8007614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007618:	e00a      	b.n	8007630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4908      	ldr	r1, [pc, #32]	; (8007640 <__NVIC_SetPriority+0x50>)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	3b04      	subs	r3, #4
 8007628:	0112      	lsls	r2, r2, #4
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	440b      	add	r3, r1
 800762e:	761a      	strb	r2, [r3, #24]
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	e000e100 	.word	0xe000e100
 8007640:	e000ed00 	.word	0xe000ed00

08007644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	; 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f1c3 0307 	rsb	r3, r3, #7
 800765e:	2b04      	cmp	r3, #4
 8007660:	bf28      	it	cs
 8007662:	2304      	movcs	r3, #4
 8007664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3304      	adds	r3, #4
 800766a:	2b06      	cmp	r3, #6
 800766c:	d902      	bls.n	8007674 <NVIC_EncodePriority+0x30>
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3b03      	subs	r3, #3
 8007672:	e000      	b.n	8007676 <NVIC_EncodePriority+0x32>
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007678:	f04f 32ff 	mov.w	r2, #4294967295
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	fa02 f303 	lsl.w	r3, r2, r3
 8007682:	43da      	mvns	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	401a      	ands	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800768c:	f04f 31ff 	mov.w	r1, #4294967295
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	fa01 f303 	lsl.w	r3, r1, r3
 8007696:	43d9      	mvns	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800769c:	4313      	orrs	r3, r2
         );
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3724      	adds	r7, #36	; 0x24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076bc:	d301      	bcc.n	80076c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076be:	2301      	movs	r3, #1
 80076c0:	e00f      	b.n	80076e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076c2:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <SysTick_Config+0x40>)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076ca:	210f      	movs	r1, #15
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	f7ff ff8e 	bl	80075f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <SysTick_Config+0x40>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076da:	4b04      	ldr	r3, [pc, #16]	; (80076ec <SysTick_Config+0x40>)
 80076dc:	2207      	movs	r2, #7
 80076de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	e000e010 	.word	0xe000e010

080076f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff29 	bl	8007550 <__NVIC_SetPriorityGrouping>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007706:	b580      	push	{r7, lr}
 8007708:	b086      	sub	sp, #24
 800770a:	af00      	add	r7, sp, #0
 800770c:	4603      	mov	r3, r0
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007718:	f7ff ff3e 	bl	8007598 <__NVIC_GetPriorityGrouping>
 800771c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f7ff ff8e 	bl	8007644 <NVIC_EncodePriority>
 8007728:	4602      	mov	r2, r0
 800772a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff ff5d 	bl	80075f0 <__NVIC_SetPriority>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	4603      	mov	r3, r0
 8007746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff ff31 	bl	80075b4 <__NVIC_EnableIRQ>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ffa2 	bl	80076ac <SysTick_Config>
 8007768:	4603      	mov	r3, r0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007780:	f7ff fab6 	bl	8006cf0 <HAL_GetTick>
 8007784:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d008      	beq.n	80077a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2280      	movs	r2, #128	; 0x80
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e052      	b.n	800784a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0216 	bic.w	r2, r2, #22
 80077b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695a      	ldr	r2, [r3, #20]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <HAL_DMA_Abort+0x62>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0208 	bic.w	r2, r2, #8
 80077e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077f4:	e013      	b.n	800781e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077f6:	f7ff fa7b 	bl	8006cf0 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b05      	cmp	r3, #5
 8007802:	d90c      	bls.n	800781e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2203      	movs	r2, #3
 800780e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e015      	b.n	800784a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e4      	bne.n	80077f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007830:	223f      	movs	r2, #63	; 0x3f
 8007832:	409a      	lsls	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d004      	beq.n	8007870 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2280      	movs	r2, #128	; 0x80
 800786a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e00c      	b.n	800788a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2205      	movs	r2, #5
 8007874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0201 	bic.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007898:	b480      	push	{r7}
 800789a:	b089      	sub	sp, #36	; 0x24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	61fb      	str	r3, [r7, #28]
 80078b2:	e16b      	b.n	8007b8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078b4:	2201      	movs	r2, #1
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4013      	ands	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	f040 815a 	bne.w	8007b86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d005      	beq.n	80078ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d130      	bne.n	800794c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	2203      	movs	r2, #3
 80078f6:	fa02 f303 	lsl.w	r3, r2, r3
 80078fa:	43db      	mvns	r3, r3
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	4013      	ands	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	4313      	orrs	r3, r2
 8007912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007920:	2201      	movs	r2, #1
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	43db      	mvns	r3, r3
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	4013      	ands	r3, r2
 800792e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 0201 	and.w	r2, r3, #1
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	4313      	orrs	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	2b03      	cmp	r3, #3
 8007956:	d017      	beq.n	8007988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	2203      	movs	r2, #3
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4313      	orrs	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d123      	bne.n	80079dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	08da      	lsrs	r2, r3, #3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3208      	adds	r2, #8
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	220f      	movs	r2, #15
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	43db      	mvns	r3, r3
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	4013      	ands	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	08da      	lsrs	r2, r3, #3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3208      	adds	r2, #8
 80079d6:	69b9      	ldr	r1, [r7, #24]
 80079d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	2203      	movs	r2, #3
 80079e8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ec:	43db      	mvns	r3, r3
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	4013      	ands	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 0203 	and.w	r2, r3, #3
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80b4 	beq.w	8007b86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	4b60      	ldr	r3, [pc, #384]	; (8007ba4 <HAL_GPIO_Init+0x30c>)
 8007a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a26:	4a5f      	ldr	r2, [pc, #380]	; (8007ba4 <HAL_GPIO_Init+0x30c>)
 8007a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a2e:	4b5d      	ldr	r3, [pc, #372]	; (8007ba4 <HAL_GPIO_Init+0x30c>)
 8007a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a3a:	4a5b      	ldr	r2, [pc, #364]	; (8007ba8 <HAL_GPIO_Init+0x310>)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	3302      	adds	r3, #2
 8007a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	220f      	movs	r2, #15
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a52      	ldr	r2, [pc, #328]	; (8007bac <HAL_GPIO_Init+0x314>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d02b      	beq.n	8007abe <HAL_GPIO_Init+0x226>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a51      	ldr	r2, [pc, #324]	; (8007bb0 <HAL_GPIO_Init+0x318>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d025      	beq.n	8007aba <HAL_GPIO_Init+0x222>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a50      	ldr	r2, [pc, #320]	; (8007bb4 <HAL_GPIO_Init+0x31c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d01f      	beq.n	8007ab6 <HAL_GPIO_Init+0x21e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a4f      	ldr	r2, [pc, #316]	; (8007bb8 <HAL_GPIO_Init+0x320>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d019      	beq.n	8007ab2 <HAL_GPIO_Init+0x21a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a4e      	ldr	r2, [pc, #312]	; (8007bbc <HAL_GPIO_Init+0x324>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_GPIO_Init+0x216>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a4d      	ldr	r2, [pc, #308]	; (8007bc0 <HAL_GPIO_Init+0x328>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00d      	beq.n	8007aaa <HAL_GPIO_Init+0x212>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a4c      	ldr	r2, [pc, #304]	; (8007bc4 <HAL_GPIO_Init+0x32c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <HAL_GPIO_Init+0x20e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a4b      	ldr	r2, [pc, #300]	; (8007bc8 <HAL_GPIO_Init+0x330>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d101      	bne.n	8007aa2 <HAL_GPIO_Init+0x20a>
 8007a9e:	2307      	movs	r3, #7
 8007aa0:	e00e      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007aa2:	2308      	movs	r3, #8
 8007aa4:	e00c      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007aa6:	2306      	movs	r3, #6
 8007aa8:	e00a      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007aaa:	2305      	movs	r3, #5
 8007aac:	e008      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007aae:	2304      	movs	r3, #4
 8007ab0:	e006      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e004      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e002      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <HAL_GPIO_Init+0x228>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	f002 0203 	and.w	r2, r2, #3
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	4093      	lsls	r3, r2
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ad0:	4935      	ldr	r1, [pc, #212]	; (8007ba8 <HAL_GPIO_Init+0x310>)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	089b      	lsrs	r3, r3, #2
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ade:	4b3b      	ldr	r3, [pc, #236]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	4013      	ands	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b02:	4a32      	ldr	r2, [pc, #200]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007b08:	4b30      	ldr	r3, [pc, #192]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	43db      	mvns	r3, r3
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	4013      	ands	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b2c:	4a27      	ldr	r2, [pc, #156]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b32:	4b26      	ldr	r3, [pc, #152]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b56:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	43db      	mvns	r3, r3
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b80:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <HAL_GPIO_Init+0x334>)
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	f67f ae90 	bls.w	80078b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	3724      	adds	r7, #36	; 0x24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	40013800 	.word	0x40013800
 8007bac:	40020000 	.word	0x40020000
 8007bb0:	40020400 	.word	0x40020400
 8007bb4:	40020800 	.word	0x40020800
 8007bb8:	40020c00 	.word	0x40020c00
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	40021400 	.word	0x40021400
 8007bc4:	40021800 	.word	0x40021800
 8007bc8:	40021c00 	.word	0x40021c00
 8007bcc:	40013c00 	.word	0x40013c00

08007bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007be0:	787b      	ldrb	r3, [r7, #1]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007be6:	887a      	ldrh	r2, [r7, #2]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bec:	e003      	b.n	8007bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bee:	887b      	ldrh	r3, [r7, #2]
 8007bf0:	041a      	lsls	r2, r3, #16
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	619a      	str	r2, [r3, #24]
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c0e:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c1a:	4a05      	ldr	r2, [pc, #20]	; (8007c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fa fc0e 	bl	8002444 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	40013c00 	.word	0x40013c00

08007c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e12b      	b.n	8007e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fe fcf2 	bl	8006644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	; 0x24
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0201 	bic.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c98:	f001 fbe4 	bl	8009464 <HAL_RCC_GetPCLK1Freq>
 8007c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	4a81      	ldr	r2, [pc, #516]	; (8007ea8 <HAL_I2C_Init+0x274>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d807      	bhi.n	8007cb8 <HAL_I2C_Init+0x84>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a80      	ldr	r2, [pc, #512]	; (8007eac <HAL_I2C_Init+0x278>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	bf94      	ite	ls
 8007cb0:	2301      	movls	r3, #1
 8007cb2:	2300      	movhi	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e006      	b.n	8007cc6 <HAL_I2C_Init+0x92>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4a7d      	ldr	r2, [pc, #500]	; (8007eb0 <HAL_I2C_Init+0x27c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bf94      	ite	ls
 8007cc0:	2301      	movls	r3, #1
 8007cc2:	2300      	movhi	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e0e7      	b.n	8007e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a78      	ldr	r2, [pc, #480]	; (8007eb4 <HAL_I2C_Init+0x280>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	0c9b      	lsrs	r3, r3, #18
 8007cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4a6a      	ldr	r2, [pc, #424]	; (8007ea8 <HAL_I2C_Init+0x274>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d802      	bhi.n	8007d08 <HAL_I2C_Init+0xd4>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	3301      	adds	r3, #1
 8007d06:	e009      	b.n	8007d1c <HAL_I2C_Init+0xe8>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	4a69      	ldr	r2, [pc, #420]	; (8007eb8 <HAL_I2C_Init+0x284>)
 8007d14:	fba2 2303 	umull	r2, r3, r2, r3
 8007d18:	099b      	lsrs	r3, r3, #6
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	495c      	ldr	r1, [pc, #368]	; (8007ea8 <HAL_I2C_Init+0x274>)
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	d819      	bhi.n	8007d70 <HAL_I2C_Init+0x13c>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	1e59      	subs	r1, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d4a:	1c59      	adds	r1, r3, #1
 8007d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d50:	400b      	ands	r3, r1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <HAL_I2C_Init+0x138>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1e59      	subs	r1, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d64:	3301      	adds	r3, #1
 8007d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d6a:	e051      	b.n	8007e10 <HAL_I2C_Init+0x1dc>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	e04f      	b.n	8007e10 <HAL_I2C_Init+0x1dc>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d111      	bne.n	8007d9c <HAL_I2C_Init+0x168>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1e58      	subs	r0, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6859      	ldr	r1, [r3, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	440b      	add	r3, r1
 8007d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bf0c      	ite	eq
 8007d94:	2301      	moveq	r3, #1
 8007d96:	2300      	movne	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	e012      	b.n	8007dc2 <HAL_I2C_Init+0x18e>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	1e58      	subs	r0, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6859      	ldr	r1, [r3, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	0099      	lsls	r1, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8007db2:	3301      	adds	r3, #1
 8007db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_I2C_Init+0x196>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e022      	b.n	8007e10 <HAL_I2C_Init+0x1dc>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10e      	bne.n	8007df0 <HAL_I2C_Init+0x1bc>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1e58      	subs	r0, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	440b      	add	r3, r1
 8007de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007de4:	3301      	adds	r3, #1
 8007de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dee:	e00f      	b.n	8007e10 <HAL_I2C_Init+0x1dc>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	1e58      	subs	r0, r3, #1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6859      	ldr	r1, [r3, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	0099      	lsls	r1, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e06:	3301      	adds	r3, #1
 8007e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	6809      	ldr	r1, [r1, #0]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69da      	ldr	r2, [r3, #28]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6911      	ldr	r1, [r2, #16]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68d2      	ldr	r2, [r2, #12]
 8007e4a:	4311      	orrs	r1, r2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	695a      	ldr	r2, [r3, #20]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	000186a0 	.word	0x000186a0
 8007eac:	001e847f 	.word	0x001e847f
 8007eb0:	003d08ff 	.word	0x003d08ff
 8007eb4:	431bde83 	.word	0x431bde83
 8007eb8:	10624dd3 	.word	0x10624dd3

08007ebc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	817b      	strh	r3, [r7, #10]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	813b      	strh	r3, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ed6:	f7fe ff0b 	bl	8006cf0 <HAL_GetTick>
 8007eda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	f040 80d9 	bne.w	800809c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	2319      	movs	r3, #25
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	496d      	ldr	r1, [pc, #436]	; (80080a8 <HAL_I2C_Mem_Write+0x1ec>)
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fc7f 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0cc      	b.n	800809e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_I2C_Mem_Write+0x56>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e0c5      	b.n	800809e <HAL_I2C_Mem_Write+0x1e2>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d007      	beq.n	8007f38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2221      	movs	r2, #33	; 0x21
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2240      	movs	r2, #64	; 0x40
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a3a      	ldr	r2, [r7, #32]
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a4d      	ldr	r2, [pc, #308]	; (80080ac <HAL_I2C_Mem_Write+0x1f0>)
 8007f78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f7a:	88f8      	ldrh	r0, [r7, #6]
 8007f7c:	893a      	ldrh	r2, [r7, #8]
 8007f7e:	8979      	ldrh	r1, [r7, #10]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	4603      	mov	r3, r0
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fab6 	bl	80084fc <I2C_RequestMemoryWrite>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d052      	beq.n	800803c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e081      	b.n	800809e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fd00 	bl	80089a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00d      	beq.n	8007fc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d107      	bne.n	8007fc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e06b      	b.n	800809e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b04      	cmp	r3, #4
 8008002:	d11b      	bne.n	800803c <HAL_I2C_Mem_Write+0x180>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d017      	beq.n	800803c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1aa      	bne.n	8007f9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fcec 	bl	8008a26 <I2C_WaitOnBTFFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00d      	beq.n	8008070 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	2b04      	cmp	r3, #4
 800805a:	d107      	bne.n	800806c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800806a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e016      	b.n	800809e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800809c:	2302      	movs	r3, #2
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	00100002 	.word	0x00100002
 80080ac:	ffff0000 	.word	0xffff0000

080080b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	461a      	mov	r2, r3
 80080be:	4603      	mov	r3, r0
 80080c0:	817b      	strh	r3, [r7, #10]
 80080c2:	460b      	mov	r3, r1
 80080c4:	813b      	strh	r3, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080ca:	f7fe fe11 	bl	8006cf0 <HAL_GetTick>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b20      	cmp	r3, #32
 80080da:	f040 8208 	bne.w	80084ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	2319      	movs	r3, #25
 80080e4:	2201      	movs	r2, #1
 80080e6:	497b      	ldr	r1, [pc, #492]	; (80082d4 <HAL_I2C_Mem_Read+0x224>)
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fb85 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80080f4:	2302      	movs	r3, #2
 80080f6:	e1fb      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_I2C_Mem_Read+0x56>
 8008102:	2302      	movs	r3, #2
 8008104:	e1f4      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b01      	cmp	r3, #1
 800811a:	d007      	beq.n	800812c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0201 	orr.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800813a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2222      	movs	r2, #34	; 0x22
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2240      	movs	r2, #64	; 0x40
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800815c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4a5b      	ldr	r2, [pc, #364]	; (80082d8 <HAL_I2C_Mem_Read+0x228>)
 800816c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800816e:	88f8      	ldrh	r0, [r7, #6]
 8008170:	893a      	ldrh	r2, [r7, #8]
 8008172:	8979      	ldrh	r1, [r7, #10]
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4603      	mov	r3, r0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fa52 	bl	8008628 <I2C_RequestMemoryRead>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e1b0      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d113      	bne.n	80081be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008196:	2300      	movs	r3, #0
 8008198:	623b      	str	r3, [r7, #32]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	623b      	str	r3, [r7, #32]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	623b      	str	r3, [r7, #32]
 80081aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e184      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d11b      	bne.n	80081fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d6:	2300      	movs	r3, #0
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	61fb      	str	r3, [r7, #28]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	61fb      	str	r3, [r7, #28]
 80081ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e164      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008202:	2b02      	cmp	r3, #2
 8008204:	d11b      	bne.n	800823e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008214:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	e144      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008254:	e138      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825a:	2b03      	cmp	r3, #3
 800825c:	f200 80f1 	bhi.w	8008442 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008264:	2b01      	cmp	r3, #1
 8008266:	d123      	bne.n	80082b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fc1b 	bl	8008aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e139      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691a      	ldr	r2, [r3, #16]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082ae:	e10b      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d14e      	bne.n	8008356 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	2200      	movs	r2, #0
 80082c0:	4906      	ldr	r1, [pc, #24]	; (80082dc <HAL_I2C_Mem_Read+0x22c>)
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fa98 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e10e      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
 80082d2:	bf00      	nop
 80082d4:	00100002 	.word	0x00100002
 80082d8:	ffff0000 	.word	0xffff0000
 80082dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833e:	3b01      	subs	r3, #1
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008354:	e0b8      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2200      	movs	r2, #0
 800835e:	4966      	ldr	r1, [pc, #408]	; (80084f8 <HAL_I2C_Mem_Read+0x448>)
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fa49 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0bf      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800837e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	2200      	movs	r2, #0
 80083ba:	494f      	ldr	r1, [pc, #316]	; (80084f8 <HAL_I2C_Mem_Read+0x448>)
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fa1b 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e091      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842a:	3b01      	subs	r3, #1
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008440:	e042      	b.n	80084c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fb2e 	bl	8008aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e04c      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b04      	cmp	r3, #4
 8008494:	d118      	bne.n	80084c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f aec2 	bne.w	8008256 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e000      	b.n	80084f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80084ee:	2302      	movs	r3, #2
  }
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3728      	adds	r7, #40	; 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	00010004 	.word	0x00010004

080084fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af02      	add	r7, sp, #8
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	4608      	mov	r0, r1
 8008506:	4611      	mov	r1, r2
 8008508:	461a      	mov	r2, r3
 800850a:	4603      	mov	r3, r0
 800850c:	817b      	strh	r3, [r7, #10]
 800850e:	460b      	mov	r3, r1
 8008510:	813b      	strh	r3, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	2200      	movs	r2, #0
 800852e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f960 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854c:	d103      	bne.n	8008556 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008554:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e05f      	b.n	800861a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800855a:	897b      	ldrh	r3, [r7, #10]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	461a      	mov	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	6a3a      	ldr	r2, [r7, #32]
 800856e:	492d      	ldr	r1, [pc, #180]	; (8008624 <I2C_RequestMemoryWrite+0x128>)
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f998 	bl	80088a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e04c      	b.n	800861a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008598:	6a39      	ldr	r1, [r7, #32]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fa02 	bl	80089a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00d      	beq.n	80085c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d107      	bne.n	80085be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e02b      	b.n	800861a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d105      	bne.n	80085d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085c8:	893b      	ldrh	r3, [r7, #8]
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	611a      	str	r2, [r3, #16]
 80085d2:	e021      	b.n	8008618 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085d4:	893b      	ldrh	r3, [r7, #8]
 80085d6:	0a1b      	lsrs	r3, r3, #8
 80085d8:	b29b      	uxth	r3, r3
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e4:	6a39      	ldr	r1, [r7, #32]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f9dc 	bl	80089a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d107      	bne.n	800860a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e005      	b.n	800861a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800860e:	893b      	ldrh	r3, [r7, #8]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	00010002 	.word	0x00010002

08008628 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4603      	mov	r3, r0
 8008638:	817b      	strh	r3, [r7, #10]
 800863a:	460b      	mov	r3, r1
 800863c:	813b      	strh	r3, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008650:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	2200      	movs	r2, #0
 800866a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f8c2 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00d      	beq.n	8008696 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008688:	d103      	bne.n	8008692 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008690:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e0aa      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008696:	897b      	ldrh	r3, [r7, #10]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	6a3a      	ldr	r2, [r7, #32]
 80086aa:	4952      	ldr	r1, [pc, #328]	; (80087f4 <I2C_RequestMemoryRead+0x1cc>)
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f8fa 	bl	80088a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e097      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d4:	6a39      	ldr	r1, [r7, #32]
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 f964 	bl	80089a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00d      	beq.n	80086fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d107      	bne.n	80086fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e076      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d105      	bne.n	8008710 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008704:	893b      	ldrh	r3, [r7, #8]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	611a      	str	r2, [r3, #16]
 800870e:	e021      	b.n	8008754 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008710:	893b      	ldrh	r3, [r7, #8]
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	b29b      	uxth	r3, r3
 8008716:	b2da      	uxtb	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800871e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008720:	6a39      	ldr	r1, [r7, #32]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f93e 	bl	80089a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00d      	beq.n	800874a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	2b04      	cmp	r3, #4
 8008734:	d107      	bne.n	8008746 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008744:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e050      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800874a:	893b      	ldrh	r3, [r7, #8]
 800874c:	b2da      	uxtb	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008756:	6a39      	ldr	r1, [r7, #32]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f923 	bl	80089a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00d      	beq.n	8008780 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	2b04      	cmp	r3, #4
 800876a:	d107      	bne.n	800877c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e035      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800878e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	2200      	movs	r2, #0
 8008798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f82b 	bl	80087f8 <I2C_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00d      	beq.n	80087c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b6:	d103      	bne.n	80087c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e013      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087c4:	897b      	ldrh	r3, [r7, #10]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f043 0301 	orr.w	r3, r3, #1
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	4906      	ldr	r1, [pc, #24]	; (80087f4 <I2C_RequestMemoryRead+0x1cc>)
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 f863 	bl	80088a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	00010002 	.word	0x00010002

080087f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	4613      	mov	r3, r2
 8008806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008808:	e025      	b.n	8008856 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008810:	d021      	beq.n	8008856 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008812:	f7fe fa6d 	bl	8006cf0 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d302      	bcc.n	8008828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d116      	bne.n	8008856 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f043 0220 	orr.w	r2, r3, #32
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e023      	b.n	800889e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	0c1b      	lsrs	r3, r3, #16
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	d10d      	bne.n	800887c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	43da      	mvns	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4013      	ands	r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf0c      	ite	eq
 8008872:	2301      	moveq	r3, #1
 8008874:	2300      	movne	r3, #0
 8008876:	b2db      	uxtb	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	e00c      	b.n	8008896 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	43da      	mvns	r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4013      	ands	r3, r2
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	bf0c      	ite	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	2300      	movne	r3, #0
 8008892:	b2db      	uxtb	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	429a      	cmp	r2, r3
 800889a:	d0b6      	beq.n	800880a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088b4:	e051      	b.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c4:	d123      	bne.n	800890e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f043 0204 	orr.w	r2, r3, #4
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e046      	b.n	800899c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d021      	beq.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008916:	f7fe f9eb 	bl	8006cf0 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d302      	bcc.n	800892c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d116      	bne.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	f043 0220 	orr.w	r2, r3, #32
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e020      	b.n	800899c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	0c1b      	lsrs	r3, r3, #16
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10c      	bne.n	800897e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	43da      	mvns	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf14      	ite	ne
 8008976:	2301      	movne	r3, #1
 8008978:	2300      	moveq	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	e00b      	b.n	8008996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	43da      	mvns	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	4013      	ands	r3, r2
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	bf14      	ite	ne
 8008990:	2301      	movne	r3, #1
 8008992:	2300      	moveq	r3, #0
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d18d      	bne.n	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089b0:	e02d      	b.n	8008a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f8ce 	bl	8008b54 <I2C_IsAcknowledgeFailed>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e02d      	b.n	8008a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d021      	beq.n	8008a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ca:	f7fe f991 	bl	8006cf0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d302      	bcc.n	80089e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d116      	bne.n	8008a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f043 0220 	orr.w	r2, r3, #32
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e007      	b.n	8008a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a18:	2b80      	cmp	r3, #128	; 0x80
 8008a1a:	d1ca      	bne.n	80089b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a32:	e02d      	b.n	8008a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f88d 	bl	8008b54 <I2C_IsAcknowledgeFailed>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e02d      	b.n	8008aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d021      	beq.n	8008a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4c:	f7fe f950 	bl	8006cf0 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d302      	bcc.n	8008a62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d116      	bne.n	8008a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7c:	f043 0220 	orr.w	r2, r3, #32
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e007      	b.n	8008aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d1ca      	bne.n	8008a34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ab4:	e042      	b.n	8008b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b10      	cmp	r3, #16
 8008ac2:	d119      	bne.n	8008af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f06f 0210 	mvn.w	r2, #16
 8008acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e029      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af8:	f7fe f8fa 	bl	8006cf0 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d302      	bcc.n	8008b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d116      	bne.n	8008b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e007      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	d1b5      	bne.n	8008ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b6a:	d11b      	bne.n	8008ba4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	f043 0204 	orr.w	r2, r3, #4
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008bc6:	687b      	ldr	r3, [r7, #4]
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	420e0020 	.word	0x420e0020
 8008bd8:	40007000 	.word	0x40007000

08008bdc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008be2:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <HAL_PWR_DisableBkUpAccess+0x20>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <HAL_PWR_DisableBkUpAccess+0x24>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008bee:	687b      	ldr	r3, [r7, #4]
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	420e0020 	.word	0x420e0020
 8008c00:	40007000 	.word	0x40007000

08008c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e267      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d075      	beq.n	8008d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c22:	4b88      	ldr	r3, [pc, #544]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 030c 	and.w	r3, r3, #12
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d00c      	beq.n	8008c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c2e:	4b85      	ldr	r3, [pc, #532]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d112      	bne.n	8008c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c3a:	4b82      	ldr	r3, [pc, #520]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c46:	d10b      	bne.n	8008c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c48:	4b7e      	ldr	r3, [pc, #504]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d05b      	beq.n	8008d0c <HAL_RCC_OscConfig+0x108>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d157      	bne.n	8008d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e242      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c68:	d106      	bne.n	8008c78 <HAL_RCC_OscConfig+0x74>
 8008c6a:	4b76      	ldr	r3, [pc, #472]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a75      	ldr	r2, [pc, #468]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	e01d      	b.n	8008cb4 <HAL_RCC_OscConfig+0xb0>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c80:	d10c      	bne.n	8008c9c <HAL_RCC_OscConfig+0x98>
 8008c82:	4b70      	ldr	r3, [pc, #448]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a6f      	ldr	r2, [pc, #444]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4b6d      	ldr	r3, [pc, #436]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a6c      	ldr	r2, [pc, #432]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e00b      	b.n	8008cb4 <HAL_RCC_OscConfig+0xb0>
 8008c9c:	4b69      	ldr	r3, [pc, #420]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a68      	ldr	r2, [pc, #416]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	4b66      	ldr	r3, [pc, #408]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a65      	ldr	r2, [pc, #404]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d013      	beq.n	8008ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cbc:	f7fe f818 	bl	8006cf0 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cc4:	f7fe f814 	bl	8006cf0 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b64      	cmp	r3, #100	; 0x64
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e207      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cd6:	4b5b      	ldr	r3, [pc, #364]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f0      	beq.n	8008cc4 <HAL_RCC_OscConfig+0xc0>
 8008ce2:	e014      	b.n	8008d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce4:	f7fe f804 	bl	8006cf0 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cec:	f7fe f800 	bl	8006cf0 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b64      	cmp	r3, #100	; 0x64
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e1f3      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cfe:	4b51      	ldr	r3, [pc, #324]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1f0      	bne.n	8008cec <HAL_RCC_OscConfig+0xe8>
 8008d0a:	e000      	b.n	8008d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d063      	beq.n	8008de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d1a:	4b4a      	ldr	r3, [pc, #296]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 030c 	and.w	r3, r3, #12
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d26:	4b47      	ldr	r3, [pc, #284]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d11c      	bne.n	8008d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d32:	4b44      	ldr	r3, [pc, #272]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d116      	bne.n	8008d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d3e:	4b41      	ldr	r3, [pc, #260]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <HAL_RCC_OscConfig+0x152>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d001      	beq.n	8008d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e1c7      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d56:	4b3b      	ldr	r3, [pc, #236]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4937      	ldr	r1, [pc, #220]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d6a:	e03a      	b.n	8008de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d020      	beq.n	8008db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d74:	4b34      	ldr	r3, [pc, #208]	; (8008e48 <HAL_RCC_OscConfig+0x244>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7a:	f7fd ffb9 	bl	8006cf0 <HAL_GetTick>
 8008d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d82:	f7fd ffb5 	bl	8006cf0 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e1a8      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d94:	4b2b      	ldr	r3, [pc, #172]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da0:	4b28      	ldr	r3, [pc, #160]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	4925      	ldr	r1, [pc, #148]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	600b      	str	r3, [r1, #0]
 8008db4:	e015      	b.n	8008de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008db6:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <HAL_RCC_OscConfig+0x244>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dbc:	f7fd ff98 	bl	8006cf0 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dc4:	f7fd ff94 	bl	8006cf0 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e187      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dd6:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f0      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d036      	beq.n	8008e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008df6:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <HAL_RCC_OscConfig+0x248>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dfc:	f7fd ff78 	bl	8006cf0 <HAL_GetTick>
 8008e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e04:	f7fd ff74 	bl	8006cf0 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e167      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <HAL_RCC_OscConfig+0x200>
 8008e22:	e01b      	b.n	8008e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <HAL_RCC_OscConfig+0x248>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e2a:	f7fd ff61 	bl	8006cf0 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e30:	e00e      	b.n	8008e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e32:	f7fd ff5d 	bl	8006cf0 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d907      	bls.n	8008e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e150      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
 8008e44:	40023800 	.word	0x40023800
 8008e48:	42470000 	.word	0x42470000
 8008e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e50:	4b88      	ldr	r3, [pc, #544]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1ea      	bne.n	8008e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 8097 	beq.w	8008f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e6e:	4b81      	ldr	r3, [pc, #516]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10f      	bne.n	8008e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]
 8008e7e:	4b7d      	ldr	r3, [pc, #500]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	4a7c      	ldr	r2, [pc, #496]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e88:	6413      	str	r3, [r2, #64]	; 0x40
 8008e8a:	4b7a      	ldr	r3, [pc, #488]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e96:	2301      	movs	r3, #1
 8008e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e9a:	4b77      	ldr	r3, [pc, #476]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d118      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ea6:	4b74      	ldr	r3, [pc, #464]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a73      	ldr	r2, [pc, #460]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eb2:	f7fd ff1d 	bl	8006cf0 <HAL_GetTick>
 8008eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb8:	e008      	b.n	8008ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eba:	f7fd ff19 	bl	8006cf0 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d901      	bls.n	8008ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e10c      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ecc:	4b6a      	ldr	r3, [pc, #424]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0f0      	beq.n	8008eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d106      	bne.n	8008eee <HAL_RCC_OscConfig+0x2ea>
 8008ee0:	4b64      	ldr	r3, [pc, #400]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	4a63      	ldr	r2, [pc, #396]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	6713      	str	r3, [r2, #112]	; 0x70
 8008eec:	e01c      	b.n	8008f28 <HAL_RCC_OscConfig+0x324>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d10c      	bne.n	8008f10 <HAL_RCC_OscConfig+0x30c>
 8008ef6:	4b5f      	ldr	r3, [pc, #380]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	4a5e      	ldr	r2, [pc, #376]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008efc:	f043 0304 	orr.w	r3, r3, #4
 8008f00:	6713      	str	r3, [r2, #112]	; 0x70
 8008f02:	4b5c      	ldr	r3, [pc, #368]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	4a5b      	ldr	r2, [pc, #364]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f08:	f043 0301 	orr.w	r3, r3, #1
 8008f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f0e:	e00b      	b.n	8008f28 <HAL_RCC_OscConfig+0x324>
 8008f10:	4b58      	ldr	r3, [pc, #352]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f14:	4a57      	ldr	r2, [pc, #348]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f16:	f023 0301 	bic.w	r3, r3, #1
 8008f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f1c:	4b55      	ldr	r3, [pc, #340]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f20:	4a54      	ldr	r2, [pc, #336]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f22:	f023 0304 	bic.w	r3, r3, #4
 8008f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f30:	f7fd fede 	bl	8006cf0 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f36:	e00a      	b.n	8008f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f38:	f7fd feda 	bl	8006cf0 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e0cb      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f4e:	4b49      	ldr	r3, [pc, #292]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0ee      	beq.n	8008f38 <HAL_RCC_OscConfig+0x334>
 8008f5a:	e014      	b.n	8008f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f5c:	f7fd fec8 	bl	8006cf0 <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f62:	e00a      	b.n	8008f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f64:	f7fd fec4 	bl	8006cf0 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e0b5      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f7a:	4b3e      	ldr	r3, [pc, #248]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1ee      	bne.n	8008f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d105      	bne.n	8008f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f8c:	4b39      	ldr	r3, [pc, #228]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f90:	4a38      	ldr	r2, [pc, #224]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80a1 	beq.w	80090e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fa2:	4b34      	ldr	r3, [pc, #208]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 030c 	and.w	r3, r3, #12
 8008faa:	2b08      	cmp	r3, #8
 8008fac:	d05c      	beq.n	8009068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d141      	bne.n	800903a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fb6:	4b31      	ldr	r3, [pc, #196]	; (800907c <HAL_RCC_OscConfig+0x478>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fbc:	f7fd fe98 	bl	8006cf0 <HAL_GetTick>
 8008fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc2:	e008      	b.n	8008fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc4:	f7fd fe94 	bl	8006cf0 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e087      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1f0      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	019b      	lsls	r3, r3, #6
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	041b      	lsls	r3, r3, #16
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	491b      	ldr	r1, [pc, #108]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8009008:	4313      	orrs	r3, r2
 800900a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <HAL_RCC_OscConfig+0x478>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009012:	f7fd fe6d 	bl	8006cf0 <HAL_GetTick>
 8009016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009018:	e008      	b.n	800902c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800901a:	f7fd fe69 	bl	8006cf0 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e05c      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0f0      	beq.n	800901a <HAL_RCC_OscConfig+0x416>
 8009038:	e054      	b.n	80090e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800903a:	4b10      	ldr	r3, [pc, #64]	; (800907c <HAL_RCC_OscConfig+0x478>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009040:	f7fd fe56 	bl	8006cf0 <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009048:	f7fd fe52 	bl	8006cf0 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e045      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0x444>
 8009066:	e03d      	b.n	80090e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d107      	bne.n	8009080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e038      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
 8009074:	40023800 	.word	0x40023800
 8009078:	40007000 	.word	0x40007000
 800907c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009080:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <HAL_RCC_OscConfig+0x4ec>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d028      	beq.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009098:	429a      	cmp	r2, r3
 800909a:	d121      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d11a      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090b0:	4013      	ands	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d111      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	085b      	lsrs	r3, r3, #1
 80090c8:	3b01      	subs	r3, #1
 80090ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d107      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090dc:	429a      	cmp	r2, r3
 80090de:	d001      	beq.n	80090e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40023800 	.word	0x40023800

080090f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0cc      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009108:	4b68      	ldr	r3, [pc, #416]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0307 	and.w	r3, r3, #7
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d90c      	bls.n	8009130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009116:	4b65      	ldr	r3, [pc, #404]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800911e:	4b63      	ldr	r3, [pc, #396]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d001      	beq.n	8009130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e0b8      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d020      	beq.n	800917e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009148:	4b59      	ldr	r3, [pc, #356]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	4a58      	ldr	r2, [pc, #352]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800914e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009160:	4b53      	ldr	r3, [pc, #332]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	4a52      	ldr	r2, [pc, #328]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800916a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800916c:	4b50      	ldr	r3, [pc, #320]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	494d      	ldr	r1, [pc, #308]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800917a:	4313      	orrs	r3, r2
 800917c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d044      	beq.n	8009214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d107      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009192:	4b47      	ldr	r3, [pc, #284]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d119      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e07f      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d003      	beq.n	80091b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d107      	bne.n	80091c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091b2:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e06f      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091c2:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e067      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091d2:	4b37      	ldr	r3, [pc, #220]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f023 0203 	bic.w	r2, r3, #3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4934      	ldr	r1, [pc, #208]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091e4:	f7fd fd84 	bl	8006cf0 <HAL_GetTick>
 80091e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ea:	e00a      	b.n	8009202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091ec:	f7fd fd80 	bl	8006cf0 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d901      	bls.n	8009202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e04f      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009202:	4b2b      	ldr	r3, [pc, #172]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 020c 	and.w	r2, r3, #12
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	429a      	cmp	r2, r3
 8009212:	d1eb      	bne.n	80091ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d20c      	bcs.n	800923c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009222:	4b22      	ldr	r3, [pc, #136]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800922a:	4b20      	ldr	r3, [pc, #128]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d001      	beq.n	800923c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e032      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d008      	beq.n	800925a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009248:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	4916      	ldr	r1, [pc, #88]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009256:	4313      	orrs	r3, r2
 8009258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0308 	and.w	r3, r3, #8
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	490e      	ldr	r1, [pc, #56]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009276:	4313      	orrs	r3, r2
 8009278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800927a:	f000 f821 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 800927e:	4602      	mov	r2, r0
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	091b      	lsrs	r3, r3, #4
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	490a      	ldr	r1, [pc, #40]	; (80092b4 <HAL_RCC_ClockConfig+0x1c0>)
 800928c:	5ccb      	ldrb	r3, [r1, r3]
 800928e:	fa22 f303 	lsr.w	r3, r2, r3
 8009292:	4a09      	ldr	r2, [pc, #36]	; (80092b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <HAL_RCC_ClockConfig+0x1c8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd fce4 	bl	8006c68 <HAL_InitTick>

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	40023c00 	.word	0x40023c00
 80092b0:	40023800 	.word	0x40023800
 80092b4:	08010900 	.word	0x08010900
 80092b8:	20000140 	.word	0x20000140
 80092bc:	20000144 	.word	0x20000144

080092c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c4:	b090      	sub	sp, #64	; 0x40
 80092c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
 80092cc:	2300      	movs	r3, #0
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d0:	2300      	movs	r3, #0
 80092d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d8:	4b59      	ldr	r3, [pc, #356]	; (8009440 <HAL_RCC_GetSysClockFreq+0x180>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f003 030c 	and.w	r3, r3, #12
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d00d      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0x40>
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	f200 80a1 	bhi.w	800942c <HAL_RCC_GetSysClockFreq+0x16c>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <HAL_RCC_GetSysClockFreq+0x34>
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d003      	beq.n	80092fa <HAL_RCC_GetSysClockFreq+0x3a>
 80092f2:	e09b      	b.n	800942c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092f4:	4b53      	ldr	r3, [pc, #332]	; (8009444 <HAL_RCC_GetSysClockFreq+0x184>)
 80092f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80092f8:	e09b      	b.n	8009432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092fa:	4b53      	ldr	r3, [pc, #332]	; (8009448 <HAL_RCC_GetSysClockFreq+0x188>)
 80092fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092fe:	e098      	b.n	8009432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009300:	4b4f      	ldr	r3, [pc, #316]	; (8009440 <HAL_RCC_GetSysClockFreq+0x180>)
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009308:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800930a:	4b4d      	ldr	r3, [pc, #308]	; (8009440 <HAL_RCC_GetSysClockFreq+0x180>)
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d028      	beq.n	8009368 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009316:	4b4a      	ldr	r3, [pc, #296]	; (8009440 <HAL_RCC_GetSysClockFreq+0x180>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	099b      	lsrs	r3, r3, #6
 800931c:	2200      	movs	r2, #0
 800931e:	623b      	str	r3, [r7, #32]
 8009320:	627a      	str	r2, [r7, #36]	; 0x24
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009328:	2100      	movs	r1, #0
 800932a:	4b47      	ldr	r3, [pc, #284]	; (8009448 <HAL_RCC_GetSysClockFreq+0x188>)
 800932c:	fb03 f201 	mul.w	r2, r3, r1
 8009330:	2300      	movs	r3, #0
 8009332:	fb00 f303 	mul.w	r3, r0, r3
 8009336:	4413      	add	r3, r2
 8009338:	4a43      	ldr	r2, [pc, #268]	; (8009448 <HAL_RCC_GetSysClockFreq+0x188>)
 800933a:	fba0 1202 	umull	r1, r2, r0, r2
 800933e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009340:	460a      	mov	r2, r1
 8009342:	62ba      	str	r2, [r7, #40]	; 0x28
 8009344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009346:	4413      	add	r3, r2
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800934a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934c:	2200      	movs	r2, #0
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	61fa      	str	r2, [r7, #28]
 8009352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800935a:	f7f7 fc4f 	bl	8000bfc <__aeabi_uldivmod>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4613      	mov	r3, r2
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009366:	e053      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009368:	4b35      	ldr	r3, [pc, #212]	; (8009440 <HAL_RCC_GetSysClockFreq+0x180>)
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	099b      	lsrs	r3, r3, #6
 800936e:	2200      	movs	r2, #0
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	617a      	str	r2, [r7, #20]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800937a:	f04f 0b00 	mov.w	fp, #0
 800937e:	4652      	mov	r2, sl
 8009380:	465b      	mov	r3, fp
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f04f 0100 	mov.w	r1, #0
 800938a:	0159      	lsls	r1, r3, #5
 800938c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009390:	0150      	lsls	r0, r2, #5
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	ebb2 080a 	subs.w	r8, r2, sl
 800939a:	eb63 090b 	sbc.w	r9, r3, fp
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80093aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80093ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80093b2:	ebb2 0408 	subs.w	r4, r2, r8
 80093b6:	eb63 0509 	sbc.w	r5, r3, r9
 80093ba:	f04f 0200 	mov.w	r2, #0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	00eb      	lsls	r3, r5, #3
 80093c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093c8:	00e2      	lsls	r2, r4, #3
 80093ca:	4614      	mov	r4, r2
 80093cc:	461d      	mov	r5, r3
 80093ce:	eb14 030a 	adds.w	r3, r4, sl
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	eb45 030b 	adc.w	r3, r5, fp
 80093d8:	607b      	str	r3, [r7, #4]
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093e6:	4629      	mov	r1, r5
 80093e8:	028b      	lsls	r3, r1, #10
 80093ea:	4621      	mov	r1, r4
 80093ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093f0:	4621      	mov	r1, r4
 80093f2:	028a      	lsls	r2, r1, #10
 80093f4:	4610      	mov	r0, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fa:	2200      	movs	r2, #0
 80093fc:	60bb      	str	r3, [r7, #8]
 80093fe:	60fa      	str	r2, [r7, #12]
 8009400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009404:	f7f7 fbfa 	bl	8000bfc <__aeabi_uldivmod>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4613      	mov	r3, r2
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <HAL_RCC_GetSysClockFreq+0x180>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	0c1b      	lsrs	r3, r3, #16
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	3301      	adds	r3, #1
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800942a:	e002      	b.n	8009432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800942c:	4b05      	ldr	r3, [pc, #20]	; (8009444 <HAL_RCC_GetSysClockFreq+0x184>)
 800942e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009434:	4618      	mov	r0, r3
 8009436:	3740      	adds	r7, #64	; 0x40
 8009438:	46bd      	mov	sp, r7
 800943a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800943e:	bf00      	nop
 8009440:	40023800 	.word	0x40023800
 8009444:	00f42400 	.word	0x00f42400
 8009448:	017d7840 	.word	0x017d7840

0800944c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009450:	4b03      	ldr	r3, [pc, #12]	; (8009460 <HAL_RCC_GetHCLKFreq+0x14>)
 8009452:	681b      	ldr	r3, [r3, #0]
}
 8009454:	4618      	mov	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20000140 	.word	0x20000140

08009464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009468:	f7ff fff0 	bl	800944c <HAL_RCC_GetHCLKFreq>
 800946c:	4602      	mov	r2, r0
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	0a9b      	lsrs	r3, r3, #10
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	4903      	ldr	r1, [pc, #12]	; (8009488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800947a:	5ccb      	ldrb	r3, [r1, r3]
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009480:	4618      	mov	r0, r3
 8009482:	bd80      	pop	{r7, pc}
 8009484:	40023800 	.word	0x40023800
 8009488:	08010910 	.word	0x08010910

0800948c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009490:	f7ff ffdc 	bl	800944c <HAL_RCC_GetHCLKFreq>
 8009494:	4602      	mov	r2, r0
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	0b5b      	lsrs	r3, r3, #13
 800949c:	f003 0307 	and.w	r3, r3, #7
 80094a0:	4903      	ldr	r1, [pc, #12]	; (80094b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094a2:	5ccb      	ldrb	r3, [r1, r3]
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40023800 	.word	0x40023800
 80094b0:	08010910 	.word	0x08010910

080094b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e041      	b.n	800954a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fd f8fa 	bl	80066d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f001 f842 	bl	800a57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e041      	b.n	80095e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d106      	bne.n	800957e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f839 	bl	80095f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2202      	movs	r2, #2
 8009582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3304      	adds	r3, #4
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f000 fff3 	bl	800a57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <HAL_TIM_PWM_Start+0x24>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	bf14      	ite	ne
 8009620:	2301      	movne	r3, #1
 8009622:	2300      	moveq	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	e022      	b.n	800966e <HAL_TIM_PWM_Start+0x6a>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b04      	cmp	r3, #4
 800962c:	d109      	bne.n	8009642 <HAL_TIM_PWM_Start+0x3e>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b01      	cmp	r3, #1
 8009638:	bf14      	ite	ne
 800963a:	2301      	movne	r3, #1
 800963c:	2300      	moveq	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	e015      	b.n	800966e <HAL_TIM_PWM_Start+0x6a>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b08      	cmp	r3, #8
 8009646:	d109      	bne.n	800965c <HAL_TIM_PWM_Start+0x58>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b01      	cmp	r3, #1
 8009652:	bf14      	ite	ne
 8009654:	2301      	movne	r3, #1
 8009656:	2300      	moveq	r3, #0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	e008      	b.n	800966e <HAL_TIM_PWM_Start+0x6a>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b01      	cmp	r3, #1
 8009666:	bf14      	ite	ne
 8009668:	2301      	movne	r3, #1
 800966a:	2300      	moveq	r3, #0
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e07c      	b.n	8009770 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <HAL_TIM_PWM_Start+0x82>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009684:	e013      	b.n	80096ae <HAL_TIM_PWM_Start+0xaa>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d104      	bne.n	8009696 <HAL_TIM_PWM_Start+0x92>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009694:	e00b      	b.n	80096ae <HAL_TIM_PWM_Start+0xaa>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b08      	cmp	r3, #8
 800969a:	d104      	bne.n	80096a6 <HAL_TIM_PWM_Start+0xa2>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096a4:	e003      	b.n	80096ae <HAL_TIM_PWM_Start+0xaa>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2202      	movs	r2, #2
 80096aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2201      	movs	r2, #1
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fb74 	bl	800ada4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a2d      	ldr	r2, [pc, #180]	; (8009778 <HAL_TIM_PWM_Start+0x174>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <HAL_TIM_PWM_Start+0xcc>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a2c      	ldr	r2, [pc, #176]	; (800977c <HAL_TIM_PWM_Start+0x178>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d101      	bne.n	80096d4 <HAL_TIM_PWM_Start+0xd0>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e000      	b.n	80096d6 <HAL_TIM_PWM_Start+0xd2>
 80096d4:	2300      	movs	r3, #0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a22      	ldr	r2, [pc, #136]	; (8009778 <HAL_TIM_PWM_Start+0x174>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d022      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fc:	d01d      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a1f      	ldr	r2, [pc, #124]	; (8009780 <HAL_TIM_PWM_Start+0x17c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d018      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a1d      	ldr	r2, [pc, #116]	; (8009784 <HAL_TIM_PWM_Start+0x180>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d013      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a1c      	ldr	r2, [pc, #112]	; (8009788 <HAL_TIM_PWM_Start+0x184>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00e      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a16      	ldr	r2, [pc, #88]	; (800977c <HAL_TIM_PWM_Start+0x178>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d009      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a18      	ldr	r2, [pc, #96]	; (800978c <HAL_TIM_PWM_Start+0x188>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d004      	beq.n	800973a <HAL_TIM_PWM_Start+0x136>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a16      	ldr	r2, [pc, #88]	; (8009790 <HAL_TIM_PWM_Start+0x18c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d111      	bne.n	800975e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b06      	cmp	r3, #6
 800974a:	d010      	beq.n	800976e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975c:	e007      	b.n	800976e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f042 0201 	orr.w	r2, r2, #1
 800976c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	40010000 	.word	0x40010000
 800977c:	40010400 	.word	0x40010400
 8009780:	40000400 	.word	0x40000400
 8009784:	40000800 	.word	0x40000800
 8009788:	40000c00 	.word	0x40000c00
 800978c:	40014000 	.word	0x40014000
 8009790:	40001800 	.word	0x40001800

08009794 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e041      	b.n	800982a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7fd f88a 	bl	80068d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 fed2 	bl	800a57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <HAL_TIM_IC_Start_IT+0x1e>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800984e:	b2db      	uxtb	r3, r3
 8009850:	e013      	b.n	800987a <HAL_TIM_IC_Start_IT+0x46>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b04      	cmp	r3, #4
 8009856:	d104      	bne.n	8009862 <HAL_TIM_IC_Start_IT+0x2e>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800985e:	b2db      	uxtb	r3, r3
 8009860:	e00b      	b.n	800987a <HAL_TIM_IC_Start_IT+0x46>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b08      	cmp	r3, #8
 8009866:	d104      	bne.n	8009872 <HAL_TIM_IC_Start_IT+0x3e>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800986e:	b2db      	uxtb	r3, r3
 8009870:	e003      	b.n	800987a <HAL_TIM_IC_Start_IT+0x46>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009878:	b2db      	uxtb	r3, r3
 800987a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d104      	bne.n	800988c <HAL_TIM_IC_Start_IT+0x58>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009888:	b2db      	uxtb	r3, r3
 800988a:	e013      	b.n	80098b4 <HAL_TIM_IC_Start_IT+0x80>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b04      	cmp	r3, #4
 8009890:	d104      	bne.n	800989c <HAL_TIM_IC_Start_IT+0x68>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009898:	b2db      	uxtb	r3, r3
 800989a:	e00b      	b.n	80098b4 <HAL_TIM_IC_Start_IT+0x80>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d104      	bne.n	80098ac <HAL_TIM_IC_Start_IT+0x78>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	e003      	b.n	80098b4 <HAL_TIM_IC_Start_IT+0x80>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d102      	bne.n	80098c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80098bc:	7b7b      	ldrb	r3, [r7, #13]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d001      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e0cc      	b.n	8009a60 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d104      	bne.n	80098d6 <HAL_TIM_IC_Start_IT+0xa2>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098d4:	e013      	b.n	80098fe <HAL_TIM_IC_Start_IT+0xca>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d104      	bne.n	80098e6 <HAL_TIM_IC_Start_IT+0xb2>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098e4:	e00b      	b.n	80098fe <HAL_TIM_IC_Start_IT+0xca>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d104      	bne.n	80098f6 <HAL_TIM_IC_Start_IT+0xc2>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098f4:	e003      	b.n	80098fe <HAL_TIM_IC_Start_IT+0xca>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2202      	movs	r2, #2
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d104      	bne.n	800990e <HAL_TIM_IC_Start_IT+0xda>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2202      	movs	r2, #2
 8009908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800990c:	e013      	b.n	8009936 <HAL_TIM_IC_Start_IT+0x102>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b04      	cmp	r3, #4
 8009912:	d104      	bne.n	800991e <HAL_TIM_IC_Start_IT+0xea>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800991c:	e00b      	b.n	8009936 <HAL_TIM_IC_Start_IT+0x102>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b08      	cmp	r3, #8
 8009922:	d104      	bne.n	800992e <HAL_TIM_IC_Start_IT+0xfa>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992c:	e003      	b.n	8009936 <HAL_TIM_IC_Start_IT+0x102>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2202      	movs	r2, #2
 8009932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b0c      	cmp	r3, #12
 800993a:	d841      	bhi.n	80099c0 <HAL_TIM_IC_Start_IT+0x18c>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <HAL_TIM_IC_Start_IT+0x110>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009979 	.word	0x08009979
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099c1 	.word	0x080099c1
 8009950:	080099c1 	.word	0x080099c1
 8009954:	0800998b 	.word	0x0800998b
 8009958:	080099c1 	.word	0x080099c1
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	0800999d 	.word	0x0800999d
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099c1 	.word	0x080099c1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099af 	.word	0x080099af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0202 	orr.w	r2, r2, #2
 8009986:	60da      	str	r2, [r3, #12]
      break;
 8009988:	e01d      	b.n	80099c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68da      	ldr	r2, [r3, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0204 	orr.w	r2, r2, #4
 8009998:	60da      	str	r2, [r3, #12]
      break;
 800999a:	e014      	b.n	80099c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f042 0208 	orr.w	r2, r2, #8
 80099aa:	60da      	str	r2, [r3, #12]
      break;
 80099ac:	e00b      	b.n	80099c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f042 0210 	orr.w	r2, r2, #16
 80099bc:	60da      	str	r2, [r3, #12]
      break;
 80099be:	e002      	b.n	80099c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
      break;
 80099c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d148      	bne.n	8009a5e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2201      	movs	r2, #1
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 f9e5 	bl	800ada4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a22      	ldr	r2, [pc, #136]	; (8009a68 <HAL_TIM_IC_Start_IT+0x234>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d022      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ec:	d01d      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1e      	ldr	r2, [pc, #120]	; (8009a6c <HAL_TIM_IC_Start_IT+0x238>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d018      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1c      	ldr	r2, [pc, #112]	; (8009a70 <HAL_TIM_IC_Start_IT+0x23c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d013      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1b      	ldr	r2, [pc, #108]	; (8009a74 <HAL_TIM_IC_Start_IT+0x240>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d00e      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <HAL_TIM_IC_Start_IT+0x244>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d009      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a18      	ldr	r2, [pc, #96]	; (8009a7c <HAL_TIM_IC_Start_IT+0x248>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d004      	beq.n	8009a2a <HAL_TIM_IC_Start_IT+0x1f6>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a16      	ldr	r2, [pc, #88]	; (8009a80 <HAL_TIM_IC_Start_IT+0x24c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d111      	bne.n	8009a4e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b06      	cmp	r3, #6
 8009a3a:	d010      	beq.n	8009a5e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0201 	orr.w	r2, r2, #1
 8009a4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4c:	e007      	b.n	8009a5e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0201 	orr.w	r2, r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40000c00 	.word	0x40000c00
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40001800 	.word	0x40001800

08009a84 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b0c      	cmp	r3, #12
 8009a96:	d841      	bhi.n	8009b1c <HAL_TIM_IC_Stop_IT+0x98>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <HAL_TIM_IC_Stop_IT+0x1c>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009ad5 	.word	0x08009ad5
 8009aa4:	08009b1d 	.word	0x08009b1d
 8009aa8:	08009b1d 	.word	0x08009b1d
 8009aac:	08009b1d 	.word	0x08009b1d
 8009ab0:	08009ae7 	.word	0x08009ae7
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009b1d 	.word	0x08009b1d
 8009abc:	08009b1d 	.word	0x08009b1d
 8009ac0:	08009af9 	.word	0x08009af9
 8009ac4:	08009b1d 	.word	0x08009b1d
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009b1d 	.word	0x08009b1d
 8009ad0:	08009b0b 	.word	0x08009b0b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0202 	bic.w	r2, r2, #2
 8009ae2:	60da      	str	r2, [r3, #12]
      break;
 8009ae4:	e01d      	b.n	8009b22 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0204 	bic.w	r2, r2, #4
 8009af4:	60da      	str	r2, [r3, #12]
      break;
 8009af6:	e014      	b.n	8009b22 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0208 	bic.w	r2, r2, #8
 8009b06:	60da      	str	r2, [r3, #12]
      break;
 8009b08:	e00b      	b.n	8009b22 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0210 	bic.w	r2, r2, #16
 8009b18:	60da      	str	r2, [r3, #12]
      break;
 8009b1a:	e002      	b.n	8009b22 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b20:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d156      	bne.n	8009bd6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 f937 	bl	800ada4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6a1a      	ldr	r2, [r3, #32]
 8009b3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b40:	4013      	ands	r3, r2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10f      	bne.n	8009b66 <HAL_TIM_IC_Stop_IT+0xe2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6a1a      	ldr	r2, [r3, #32]
 8009b4c:	f240 4344 	movw	r3, #1092	; 0x444
 8009b50:	4013      	ands	r3, r2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d107      	bne.n	8009b66 <HAL_TIM_IC_Stop_IT+0xe2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <HAL_TIM_IC_Stop_IT+0xf2>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b74:	e013      	b.n	8009b9e <HAL_TIM_IC_Stop_IT+0x11a>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d104      	bne.n	8009b86 <HAL_TIM_IC_Stop_IT+0x102>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b84:	e00b      	b.n	8009b9e <HAL_TIM_IC_Stop_IT+0x11a>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d104      	bne.n	8009b96 <HAL_TIM_IC_Stop_IT+0x112>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b94:	e003      	b.n	8009b9e <HAL_TIM_IC_Stop_IT+0x11a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <HAL_TIM_IC_Stop_IT+0x12a>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bac:	e013      	b.n	8009bd6 <HAL_TIM_IC_Stop_IT+0x152>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d104      	bne.n	8009bbe <HAL_TIM_IC_Stop_IT+0x13a>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bbc:	e00b      	b.n	8009bd6 <HAL_TIM_IC_Stop_IT+0x152>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d104      	bne.n	8009bce <HAL_TIM_IC_Stop_IT+0x14a>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bcc:	e003      	b.n	8009bd6 <HAL_TIM_IC_Stop_IT+0x152>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e097      	b.n	8009d24 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7fc fdc9 	bl	80067a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c24:	f023 0307 	bic.w	r3, r3, #7
 8009c28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3304      	adds	r3, #4
 8009c32:	4619      	mov	r1, r3
 8009c34:	4610      	mov	r0, r2
 8009c36:	f000 fca1 	bl	800a57c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c62:	f023 0303 	bic.w	r3, r3, #3
 8009c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	4313      	orrs	r3, r2
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009c80:	f023 030c 	bic.w	r3, r3, #12
 8009c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	011a      	lsls	r2, r3, #4
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	031b      	lsls	r3, r3, #12
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009cbe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009cc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	011b      	lsls	r3, r3, #4
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d110      	bne.n	8009d7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d102      	bne.n	8009d68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d62:	7b7b      	ldrb	r3, [r7, #13]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d001      	beq.n	8009d6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e069      	b.n	8009e40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d7c:	e031      	b.n	8009de2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	d110      	bne.n	8009da6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d102      	bne.n	8009d90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d8a:	7b3b      	ldrb	r3, [r7, #12]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d001      	beq.n	8009d94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e055      	b.n	8009e40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009da4:	e01d      	b.n	8009de2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d108      	bne.n	8009dbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d105      	bne.n	8009dbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009db2:	7b7b      	ldrb	r3, [r7, #13]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009db8:	7b3b      	ldrb	r3, [r7, #12]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d001      	beq.n	8009dc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e03e      	b.n	8009e40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <HAL_TIM_Encoder_Start+0xc4>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d008      	beq.n	8009e00 <HAL_TIM_Encoder_Start+0xd4>
 8009dee:	e00f      	b.n	8009e10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2201      	movs	r2, #1
 8009df6:	2100      	movs	r1, #0
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 ffd3 	bl	800ada4 <TIM_CCxChannelCmd>
      break;
 8009dfe:	e016      	b.n	8009e2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2201      	movs	r2, #1
 8009e06:	2104      	movs	r1, #4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 ffcb 	bl	800ada4 <TIM_CCxChannelCmd>
      break;
 8009e0e:	e00e      	b.n	8009e2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2201      	movs	r2, #1
 8009e16:	2100      	movs	r1, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 ffc3 	bl	800ada4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2201      	movs	r2, #1
 8009e24:	2104      	movs	r1, #4
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 ffbc 	bl	800ada4 <TIM_CCxChannelCmd>
      break;
 8009e2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f042 0201 	orr.w	r2, r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d122      	bne.n	8009ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d11b      	bne.n	8009ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f06f 0202 	mvn.w	r2, #2
 8009e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7f7 f8ec 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
 8009e90:	e005      	b.n	8009e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fb54 	bl	800a540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fb5b 	bl	800a554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	f003 0304 	and.w	r3, r3, #4
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d122      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d11b      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f06f 0204 	mvn.w	r2, #4
 8009ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7f7 f8c2 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
 8009ee4:	e005      	b.n	8009ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fb2a 	bl	800a540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fb31 	bl	800a554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f003 0308 	and.w	r3, r3, #8
 8009f02:	2b08      	cmp	r3, #8
 8009f04:	d122      	bne.n	8009f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f003 0308 	and.w	r3, r3, #8
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	d11b      	bne.n	8009f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f06f 0208 	mvn.w	r2, #8
 8009f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2204      	movs	r2, #4
 8009f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7f7 f898 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
 8009f38:	e005      	b.n	8009f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb00 	bl	800a540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fb07 	bl	800a554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	f003 0310 	and.w	r3, r3, #16
 8009f56:	2b10      	cmp	r3, #16
 8009f58:	d122      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f003 0310 	and.w	r3, r3, #16
 8009f64:	2b10      	cmp	r3, #16
 8009f66:	d11b      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f06f 0210 	mvn.w	r2, #16
 8009f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2208      	movs	r2, #8
 8009f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7f7 f86e 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
 8009f8c:	e005      	b.n	8009f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fad6 	bl	800a540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fadd 	bl	800a554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d10e      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d107      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f06f 0201 	mvn.w	r2, #1
 8009fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fab0 	bl	800a52c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd6:	2b80      	cmp	r3, #128	; 0x80
 8009fd8:	d10e      	bne.n	8009ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe4:	2b80      	cmp	r3, #128	; 0x80
 8009fe6:	d107      	bne.n	8009ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 ffd4 	bl	800afa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a002:	2b40      	cmp	r3, #64	; 0x40
 800a004:	d10e      	bne.n	800a024 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a010:	2b40      	cmp	r3, #64	; 0x40
 800a012:	d107      	bne.n	800a024 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 faa2 	bl	800a568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d10e      	bne.n	800a050 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	d107      	bne.n	800a050 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f06f 0220 	mvn.w	r2, #32
 800a048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 ff9e 	bl	800af8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d101      	bne.n	800a076 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a072:	2302      	movs	r3, #2
 800a074:	e088      	b.n	800a188 <HAL_TIM_IC_ConfigChannel+0x130>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d11b      	bne.n	800a0bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6819      	ldr	r1, [r3, #0]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f000 fcc2 	bl	800aa1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	699a      	ldr	r2, [r3, #24]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 020c 	bic.w	r2, r2, #12
 800a0a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6999      	ldr	r1, [r3, #24]
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	619a      	str	r2, [r3, #24]
 800a0ba:	e060      	b.n	800a17e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d11c      	bne.n	800a0fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6819      	ldr	r1, [r3, #0]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f000 fd46 	bl	800ab62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699a      	ldr	r2, [r3, #24]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a0e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6999      	ldr	r1, [r3, #24]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	021a      	lsls	r2, r3, #8
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	619a      	str	r2, [r3, #24]
 800a0fa:	e040      	b.n	800a17e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b08      	cmp	r3, #8
 800a100:	d11b      	bne.n	800a13a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f000 fd93 	bl	800ac3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 020c 	bic.w	r2, r2, #12
 800a124:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69d9      	ldr	r1, [r3, #28]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	61da      	str	r2, [r3, #28]
 800a138:	e021      	b.n	800a17e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b0c      	cmp	r3, #12
 800a13e:	d11c      	bne.n	800a17a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	6819      	ldr	r1, [r3, #0]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	f000 fdb0 	bl	800acb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69da      	ldr	r2, [r3, #28]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a162:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	69d9      	ldr	r1, [r3, #28]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	021a      	lsls	r2, r3, #8
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	61da      	str	r2, [r3, #28]
 800a178:	e001      	b.n	800a17e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a186:	7dfb      	ldrb	r3, [r7, #23]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e0ae      	b.n	800a30c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b0c      	cmp	r3, #12
 800a1ba:	f200 809f 	bhi.w	800a2fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1f9 	.word	0x0800a1f9
 800a1c8:	0800a2fd 	.word	0x0800a2fd
 800a1cc:	0800a2fd 	.word	0x0800a2fd
 800a1d0:	0800a2fd 	.word	0x0800a2fd
 800a1d4:	0800a239 	.word	0x0800a239
 800a1d8:	0800a2fd 	.word	0x0800a2fd
 800a1dc:	0800a2fd 	.word	0x0800a2fd
 800a1e0:	0800a2fd 	.word	0x0800a2fd
 800a1e4:	0800a27b 	.word	0x0800a27b
 800a1e8:	0800a2fd 	.word	0x0800a2fd
 800a1ec:	0800a2fd 	.word	0x0800a2fd
 800a1f0:	0800a2fd 	.word	0x0800a2fd
 800a1f4:	0800a2bb 	.word	0x0800a2bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fa5c 	bl	800a6bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0208 	orr.w	r2, r2, #8
 800a212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	699a      	ldr	r2, [r3, #24]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 0204 	bic.w	r2, r2, #4
 800a222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6999      	ldr	r1, [r3, #24]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	691a      	ldr	r2, [r3, #16]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	619a      	str	r2, [r3, #24]
      break;
 800a236:	e064      	b.n	800a302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 faac 	bl	800a79c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699a      	ldr	r2, [r3, #24]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	699a      	ldr	r2, [r3, #24]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6999      	ldr	r1, [r3, #24]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	021a      	lsls	r2, r3, #8
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	619a      	str	r2, [r3, #24]
      break;
 800a278:	e043      	b.n	800a302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fb01 	bl	800a888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0208 	orr.w	r2, r2, #8
 800a294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69da      	ldr	r2, [r3, #28]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 0204 	bic.w	r2, r2, #4
 800a2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69d9      	ldr	r1, [r3, #28]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	691a      	ldr	r2, [r3, #16]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	61da      	str	r2, [r3, #28]
      break;
 800a2b8:	e023      	b.n	800a302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fb55 	bl	800a970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	69da      	ldr	r2, [r3, #28]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	69d9      	ldr	r1, [r3, #28]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	021a      	lsls	r2, r3, #8
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	61da      	str	r2, [r3, #28]
      break;
 800a2fa:	e002      	b.n	800a302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_TIM_ConfigClockSource+0x1c>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e0b4      	b.n	800a49a <HAL_TIM_ConfigClockSource+0x186>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a34e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a368:	d03e      	beq.n	800a3e8 <HAL_TIM_ConfigClockSource+0xd4>
 800a36a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a36e:	f200 8087 	bhi.w	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a376:	f000 8086 	beq.w	800a486 <HAL_TIM_ConfigClockSource+0x172>
 800a37a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37e:	d87f      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a380:	2b70      	cmp	r3, #112	; 0x70
 800a382:	d01a      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0xa6>
 800a384:	2b70      	cmp	r3, #112	; 0x70
 800a386:	d87b      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a388:	2b60      	cmp	r3, #96	; 0x60
 800a38a:	d050      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x11a>
 800a38c:	2b60      	cmp	r3, #96	; 0x60
 800a38e:	d877      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a390:	2b50      	cmp	r3, #80	; 0x50
 800a392:	d03c      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0xfa>
 800a394:	2b50      	cmp	r3, #80	; 0x50
 800a396:	d873      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a398:	2b40      	cmp	r3, #64	; 0x40
 800a39a:	d058      	beq.n	800a44e <HAL_TIM_ConfigClockSource+0x13a>
 800a39c:	2b40      	cmp	r3, #64	; 0x40
 800a39e:	d86f      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a0:	2b30      	cmp	r3, #48	; 0x30
 800a3a2:	d064      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x15a>
 800a3a4:	2b30      	cmp	r3, #48	; 0x30
 800a3a6:	d86b      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d060      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x15a>
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	d867      	bhi.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d05c      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x15a>
 800a3b4:	2b10      	cmp	r3, #16
 800a3b6:	d05a      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x15a>
 800a3b8:	e062      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6818      	ldr	r0, [r3, #0]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	6899      	ldr	r1, [r3, #8]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f000 fccb 	bl	800ad64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	609a      	str	r2, [r3, #8]
      break;
 800a3e6:	e04f      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	6899      	ldr	r1, [r3, #8]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f000 fcb4 	bl	800ad64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a40a:	609a      	str	r2, [r3, #8]
      break;
 800a40c:	e03c      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6859      	ldr	r1, [r3, #4]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f000 fb72 	bl	800ab04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2150      	movs	r1, #80	; 0x50
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fc81 	bl	800ad2e <TIM_ITRx_SetConfig>
      break;
 800a42c:	e02c      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6818      	ldr	r0, [r3, #0]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6859      	ldr	r1, [r3, #4]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	461a      	mov	r2, r3
 800a43c:	f000 fbce 	bl	800abdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2160      	movs	r1, #96	; 0x60
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fc71 	bl	800ad2e <TIM_ITRx_SetConfig>
      break;
 800a44c:	e01c      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6859      	ldr	r1, [r3, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f000 fb52 	bl	800ab04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2140      	movs	r1, #64	; 0x40
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fc61 	bl	800ad2e <TIM_ITRx_SetConfig>
      break;
 800a46c:	e00c      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4619      	mov	r1, r3
 800a478:	4610      	mov	r0, r2
 800a47a:	f000 fc58 	bl	800ad2e <TIM_ITRx_SetConfig>
      break;
 800a47e:	e003      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	73fb      	strb	r3, [r7, #15]
      break;
 800a484:	e000      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b0c      	cmp	r3, #12
 800a4b6:	d831      	bhi.n	800a51c <HAL_TIM_ReadCapturedValue+0x78>
 800a4b8:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a4f5 	.word	0x0800a4f5
 800a4c4:	0800a51d 	.word	0x0800a51d
 800a4c8:	0800a51d 	.word	0x0800a51d
 800a4cc:	0800a51d 	.word	0x0800a51d
 800a4d0:	0800a4ff 	.word	0x0800a4ff
 800a4d4:	0800a51d 	.word	0x0800a51d
 800a4d8:	0800a51d 	.word	0x0800a51d
 800a4dc:	0800a51d 	.word	0x0800a51d
 800a4e0:	0800a509 	.word	0x0800a509
 800a4e4:	0800a51d 	.word	0x0800a51d
 800a4e8:	0800a51d 	.word	0x0800a51d
 800a4ec:	0800a51d 	.word	0x0800a51d
 800a4f0:	0800a513 	.word	0x0800a513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fa:	60fb      	str	r3, [r7, #12]

      break;
 800a4fc:	e00f      	b.n	800a51e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a504:	60fb      	str	r3, [r7, #12]

      break;
 800a506:	e00a      	b.n	800a51e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50e:	60fb      	str	r3, [r7, #12]

      break;
 800a510:	e005      	b.n	800a51e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a518:	60fb      	str	r3, [r7, #12]

      break;
 800a51a:	e000      	b.n	800a51e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a51c:	bf00      	nop
  }

  return tmpreg;
 800a51e:	68fb      	ldr	r3, [r7, #12]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a40      	ldr	r2, [pc, #256]	; (800a690 <TIM_Base_SetConfig+0x114>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d013      	beq.n	800a5bc <TIM_Base_SetConfig+0x40>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59a:	d00f      	beq.n	800a5bc <TIM_Base_SetConfig+0x40>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a3d      	ldr	r2, [pc, #244]	; (800a694 <TIM_Base_SetConfig+0x118>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00b      	beq.n	800a5bc <TIM_Base_SetConfig+0x40>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a3c      	ldr	r2, [pc, #240]	; (800a698 <TIM_Base_SetConfig+0x11c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d007      	beq.n	800a5bc <TIM_Base_SetConfig+0x40>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a3b      	ldr	r2, [pc, #236]	; (800a69c <TIM_Base_SetConfig+0x120>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d003      	beq.n	800a5bc <TIM_Base_SetConfig+0x40>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a3a      	ldr	r2, [pc, #232]	; (800a6a0 <TIM_Base_SetConfig+0x124>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d108      	bne.n	800a5ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a2f      	ldr	r2, [pc, #188]	; (800a690 <TIM_Base_SetConfig+0x114>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d02b      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5dc:	d027      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a2c      	ldr	r2, [pc, #176]	; (800a694 <TIM_Base_SetConfig+0x118>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d023      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a2b      	ldr	r2, [pc, #172]	; (800a698 <TIM_Base_SetConfig+0x11c>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d01f      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a2a      	ldr	r2, [pc, #168]	; (800a69c <TIM_Base_SetConfig+0x120>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d01b      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a29      	ldr	r2, [pc, #164]	; (800a6a0 <TIM_Base_SetConfig+0x124>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d017      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a28      	ldr	r2, [pc, #160]	; (800a6a4 <TIM_Base_SetConfig+0x128>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d013      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a27      	ldr	r2, [pc, #156]	; (800a6a8 <TIM_Base_SetConfig+0x12c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d00f      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a26      	ldr	r2, [pc, #152]	; (800a6ac <TIM_Base_SetConfig+0x130>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00b      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a25      	ldr	r2, [pc, #148]	; (800a6b0 <TIM_Base_SetConfig+0x134>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d007      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a24      	ldr	r2, [pc, #144]	; (800a6b4 <TIM_Base_SetConfig+0x138>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d003      	beq.n	800a62e <TIM_Base_SetConfig+0xb2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a23      	ldr	r2, [pc, #140]	; (800a6b8 <TIM_Base_SetConfig+0x13c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d108      	bne.n	800a640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a0a      	ldr	r2, [pc, #40]	; (800a690 <TIM_Base_SetConfig+0x114>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d003      	beq.n	800a674 <TIM_Base_SetConfig+0xf8>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a0c      	ldr	r2, [pc, #48]	; (800a6a0 <TIM_Base_SetConfig+0x124>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d103      	bne.n	800a67c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	615a      	str	r2, [r3, #20]
}
 800a682:	bf00      	nop
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40010000 	.word	0x40010000
 800a694:	40000400 	.word	0x40000400
 800a698:	40000800 	.word	0x40000800
 800a69c:	40000c00 	.word	0x40000c00
 800a6a0:	40010400 	.word	0x40010400
 800a6a4:	40014000 	.word	0x40014000
 800a6a8:	40014400 	.word	0x40014400
 800a6ac:	40014800 	.word	0x40014800
 800a6b0:	40001800 	.word	0x40001800
 800a6b4:	40001c00 	.word	0x40001c00
 800a6b8:	40002000 	.word	0x40002000

0800a6bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	f023 0201 	bic.w	r2, r3, #1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f023 0302 	bic.w	r3, r3, #2
 800a704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a20      	ldr	r2, [pc, #128]	; (800a794 <TIM_OC1_SetConfig+0xd8>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d003      	beq.n	800a720 <TIM_OC1_SetConfig+0x64>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <TIM_OC1_SetConfig+0xdc>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d10c      	bne.n	800a73a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f023 0308 	bic.w	r3, r3, #8
 800a726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 0304 	bic.w	r3, r3, #4
 800a738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a15      	ldr	r2, [pc, #84]	; (800a794 <TIM_OC1_SetConfig+0xd8>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d003      	beq.n	800a74a <TIM_OC1_SetConfig+0x8e>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a14      	ldr	r2, [pc, #80]	; (800a798 <TIM_OC1_SetConfig+0xdc>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d111      	bne.n	800a76e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	4313      	orrs	r3, r2
 800a762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	621a      	str	r2, [r3, #32]
}
 800a788:	bf00      	nop
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400

0800a79c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	f023 0210 	bic.w	r2, r3, #16
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	f023 0320 	bic.w	r3, r3, #32
 800a7e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a22      	ldr	r2, [pc, #136]	; (800a880 <TIM_OC2_SetConfig+0xe4>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d003      	beq.n	800a804 <TIM_OC2_SetConfig+0x68>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a21      	ldr	r2, [pc, #132]	; (800a884 <TIM_OC2_SetConfig+0xe8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d10d      	bne.n	800a820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a80a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	011b      	lsls	r3, r3, #4
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a81e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a17      	ldr	r2, [pc, #92]	; (800a880 <TIM_OC2_SetConfig+0xe4>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d003      	beq.n	800a830 <TIM_OC2_SetConfig+0x94>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a16      	ldr	r2, [pc, #88]	; (800a884 <TIM_OC2_SetConfig+0xe8>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d113      	bne.n	800a858 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a83e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	4313      	orrs	r3, r2
 800a84a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	4313      	orrs	r3, r2
 800a856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	621a      	str	r2, [r3, #32]
}
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40010000 	.word	0x40010000
 800a884:	40010400 	.word	0x40010400

0800a888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a21      	ldr	r2, [pc, #132]	; (800a968 <TIM_OC3_SetConfig+0xe0>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d003      	beq.n	800a8ee <TIM_OC3_SetConfig+0x66>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a20      	ldr	r2, [pc, #128]	; (800a96c <TIM_OC3_SetConfig+0xe4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d10d      	bne.n	800a90a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	021b      	lsls	r3, r3, #8
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a16      	ldr	r2, [pc, #88]	; (800a968 <TIM_OC3_SetConfig+0xe0>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d003      	beq.n	800a91a <TIM_OC3_SetConfig+0x92>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a15      	ldr	r2, [pc, #84]	; (800a96c <TIM_OC3_SetConfig+0xe4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d113      	bne.n	800a942 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	4313      	orrs	r3, r2
 800a934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	011b      	lsls	r3, r3, #4
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	4313      	orrs	r3, r2
 800a940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	621a      	str	r2, [r3, #32]
}
 800a95c:	bf00      	nop
 800a95e:	371c      	adds	r7, #28
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	40010000 	.word	0x40010000
 800a96c:	40010400 	.word	0x40010400

0800a970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	021b      	lsls	r3, r3, #8
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	031b      	lsls	r3, r3, #12
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a12      	ldr	r2, [pc, #72]	; (800aa14 <TIM_OC4_SetConfig+0xa4>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d003      	beq.n	800a9d8 <TIM_OC4_SetConfig+0x68>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a11      	ldr	r2, [pc, #68]	; (800aa18 <TIM_OC4_SetConfig+0xa8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d109      	bne.n	800a9ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	019b      	lsls	r3, r3, #6
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	621a      	str	r2, [r3, #32]
}
 800aa06:	bf00      	nop
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	40010000 	.word	0x40010000
 800aa18:	40010400 	.word	0x40010400

0800aa1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	f023 0201 	bic.w	r2, r3, #1
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4a28      	ldr	r2, [pc, #160]	; (800aae8 <TIM_TI1_SetConfig+0xcc>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d01b      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa50:	d017      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4a25      	ldr	r2, [pc, #148]	; (800aaec <TIM_TI1_SetConfig+0xd0>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d013      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4a24      	ldr	r2, [pc, #144]	; (800aaf0 <TIM_TI1_SetConfig+0xd4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00f      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4a23      	ldr	r2, [pc, #140]	; (800aaf4 <TIM_TI1_SetConfig+0xd8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00b      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4a22      	ldr	r2, [pc, #136]	; (800aaf8 <TIM_TI1_SetConfig+0xdc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d007      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4a21      	ldr	r2, [pc, #132]	; (800aafc <TIM_TI1_SetConfig+0xe0>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_TI1_SetConfig+0x66>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4a20      	ldr	r2, [pc, #128]	; (800ab00 <TIM_TI1_SetConfig+0xe4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d101      	bne.n	800aa86 <TIM_TI1_SetConfig+0x6a>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <TIM_TI1_SetConfig+0x6c>
 800aa86:	2300      	movs	r3, #0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d008      	beq.n	800aa9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	e003      	b.n	800aaa6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f043 0301 	orr.w	r3, r3, #1
 800aaa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aaac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	011b      	lsls	r3, r3, #4
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f023 030a 	bic.w	r3, r3, #10
 800aac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f003 030a 	and.w	r3, r3, #10
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	621a      	str	r2, [r3, #32]
}
 800aada:	bf00      	nop
 800aadc:	371c      	adds	r7, #28
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	40010000 	.word	0x40010000
 800aaec:	40000400 	.word	0x40000400
 800aaf0:	40000800 	.word	0x40000800
 800aaf4:	40000c00 	.word	0x40000c00
 800aaf8:	40010400 	.word	0x40010400
 800aafc:	40014000 	.word	0x40014000
 800ab00:	40001800 	.word	0x40001800

0800ab04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	f023 0201 	bic.w	r2, r3, #1
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	011b      	lsls	r3, r3, #4
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f023 030a 	bic.w	r3, r3, #10
 800ab40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	621a      	str	r2, [r3, #32]
}
 800ab56:	bf00      	nop
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b087      	sub	sp, #28
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	f023 0210 	bic.w	r2, r3, #16
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	031b      	lsls	r3, r3, #12
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800abb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	621a      	str	r2, [r3, #32]
}
 800abd0:	bf00      	nop
 800abd2:	371c      	adds	r7, #28
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	f023 0210 	bic.w	r2, r3, #16
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	031b      	lsls	r3, r3, #12
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	011b      	lsls	r3, r3, #4
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	621a      	str	r2, [r3, #32]
}
 800ac30:	bf00      	nop
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f023 0303 	bic.w	r3, r3, #3
 800ac68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ac8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	621a      	str	r2, [r3, #32]
}
 800aca8:	bf00      	nop
 800acaa:	371c      	adds	r7, #28
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ace0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	4313      	orrs	r3, r2
 800acea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	031b      	lsls	r3, r3, #12
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ad06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	031b      	lsls	r3, r3, #12
 800ad0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	621a      	str	r2, [r3, #32]
}
 800ad22:	bf00      	nop
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	f043 0307 	orr.w	r3, r3, #7
 800ad50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	609a      	str	r2, [r3, #8]
}
 800ad58:	bf00      	nop
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	021a      	lsls	r2, r3, #8
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	431a      	orrs	r2, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	609a      	str	r2, [r3, #8]
}
 800ad98:	bf00      	nop
 800ad9a:	371c      	adds	r7, #28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f003 031f 	and.w	r3, r3, #31
 800adb6:	2201      	movs	r2, #1
 800adb8:	fa02 f303 	lsl.w	r3, r2, r3
 800adbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6a1a      	ldr	r2, [r3, #32]
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	43db      	mvns	r3, r3
 800adc6:	401a      	ands	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6a1a      	ldr	r2, [r3, #32]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f003 031f 	and.w	r3, r3, #31
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	fa01 f303 	lsl.w	r3, r1, r3
 800addc:	431a      	orrs	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	621a      	str	r2, [r3, #32]
}
 800ade2:	bf00      	nop
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d101      	bne.n	800ae08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e05a      	b.n	800aebe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a21      	ldr	r2, [pc, #132]	; (800aecc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d022      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae54:	d01d      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a1d      	ldr	r2, [pc, #116]	; (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d018      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a1b      	ldr	r2, [pc, #108]	; (800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d013      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a1a      	ldr	r2, [pc, #104]	; (800aed8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d00e      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a18      	ldr	r2, [pc, #96]	; (800aedc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d009      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a17      	ldr	r2, [pc, #92]	; (800aee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d004      	beq.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a15      	ldr	r2, [pc, #84]	; (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d10c      	bne.n	800aeac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	40010000 	.word	0x40010000
 800aed0:	40000400 	.word	0x40000400
 800aed4:	40000800 	.word	0x40000800
 800aed8:	40000c00 	.word	0x40000c00
 800aedc:	40010400 	.word	0x40010400
 800aee0:	40014000 	.word	0x40014000
 800aee4:	40001800 	.word	0x40001800

0800aee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af00:	2302      	movs	r3, #2
 800af02:	e03d      	b.n	800af80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	4313      	orrs	r3, r2
 800af18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	4313      	orrs	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	4313      	orrs	r3, r2
 800af34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4313      	orrs	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e03f      	b.n	800b046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7fb fd04 	bl	80069e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2224      	movs	r2, #36	; 0x24
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fddb 	bl	800bbb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b00c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	695a      	ldr	r2, [r3, #20]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b01c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68da      	ldr	r2, [r3, #12]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b02c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b08a      	sub	sp, #40	; 0x28
 800b052:	af02      	add	r7, sp, #8
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	4613      	mov	r3, r2
 800b05c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b20      	cmp	r3, #32
 800b06c:	d17c      	bne.n	800b168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <HAL_UART_Transmit+0x2c>
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e075      	b.n	800b16a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b084:	2b01      	cmp	r3, #1
 800b086:	d101      	bne.n	800b08c <HAL_UART_Transmit+0x3e>
 800b088:	2302      	movs	r3, #2
 800b08a:	e06e      	b.n	800b16a <HAL_UART_Transmit+0x11c>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2221      	movs	r2, #33	; 0x21
 800b09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0a2:	f7fb fe25 	bl	8006cf0 <HAL_GetTick>
 800b0a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	88fa      	ldrh	r2, [r7, #6]
 800b0ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	88fa      	ldrh	r2, [r7, #6]
 800b0b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0bc:	d108      	bne.n	800b0d0 <HAL_UART_Transmit+0x82>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d104      	bne.n	800b0d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	e003      	b.n	800b0d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b0e0:	e02a      	b.n	800b138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2180      	movs	r1, #128	; 0x80
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 fb1f 	bl	800b730 <UART_WaitOnFlagUntilTimeout>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e036      	b.n	800b16a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10b      	bne.n	800b11a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	461a      	mov	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	3302      	adds	r3, #2
 800b116:	61bb      	str	r3, [r7, #24]
 800b118:	e007      	b.n	800b12a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	781a      	ldrb	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	3301      	adds	r3, #1
 800b128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b12e:	b29b      	uxth	r3, r3
 800b130:	3b01      	subs	r3, #1
 800b132:	b29a      	uxth	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1cf      	bne.n	800b0e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2200      	movs	r2, #0
 800b14a:	2140      	movs	r1, #64	; 0x40
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 faef 	bl	800b730 <UART_WaitOnFlagUntilTimeout>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b158:	2303      	movs	r3, #3
 800b15a:	e006      	b.n	800b16a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	e000      	b.n	800b16a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b168:	2302      	movs	r3, #2
  }
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	4613      	mov	r3, r2
 800b17e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b20      	cmp	r3, #32
 800b18a:	d11d      	bne.n	800b1c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <HAL_UART_Receive_IT+0x26>
 800b192:	88fb      	ldrh	r3, [r7, #6]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e016      	b.n	800b1ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d101      	bne.n	800b1aa <HAL_UART_Receive_IT+0x38>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e00f      	b.n	800b1ca <HAL_UART_Receive_IT+0x58>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 fb24 	bl	800b80c <UART_Start_Receive_IT>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	e000      	b.n	800b1ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b1c8:	2302      	movs	r3, #2
  }
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b0ba      	sub	sp, #232	; 0xe8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b200:	2300      	movs	r3, #0
 800b202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10f      	bne.n	800b23a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b21e:	f003 0320 	and.w	r3, r3, #32
 800b222:	2b00      	cmp	r3, #0
 800b224:	d009      	beq.n	800b23a <HAL_UART_IRQHandler+0x66>
 800b226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22a:	f003 0320 	and.w	r3, r3, #32
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fc03 	bl	800ba3e <UART_Receive_IT>
      return;
 800b238:	e256      	b.n	800b6e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b23a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 80de 	beq.w	800b400 <HAL_UART_IRQHandler+0x22c>
 800b244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b248:	f003 0301 	and.w	r3, r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b254:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 80d1 	beq.w	800b400 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00b      	beq.n	800b282 <HAL_UART_IRQHandler+0xae>
 800b26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	f043 0201 	orr.w	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b286:	f003 0304 	and.w	r3, r3, #4
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00b      	beq.n	800b2a6 <HAL_UART_IRQHandler+0xd2>
 800b28e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29e:	f043 0202 	orr.w	r2, r3, #2
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <HAL_UART_IRQHandler+0xf6>
 800b2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	f043 0204 	orr.w	r2, r3, #4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d011      	beq.n	800b2fa <HAL_UART_IRQHandler+0x126>
 800b2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d105      	bne.n	800b2ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f2:	f043 0208 	orr.w	r2, r3, #8
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 81ed 	beq.w	800b6de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b308:	f003 0320 	and.w	r3, r3, #32
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d008      	beq.n	800b322 <HAL_UART_IRQHandler+0x14e>
 800b310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b314:	f003 0320 	and.w	r3, r3, #32
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fb8e 	bl	800ba3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32c:	2b40      	cmp	r3, #64	; 0x40
 800b32e:	bf0c      	ite	eq
 800b330:	2301      	moveq	r3, #1
 800b332:	2300      	movne	r3, #0
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	f003 0308 	and.w	r3, r3, #8
 800b342:	2b00      	cmp	r3, #0
 800b344:	d103      	bne.n	800b34e <HAL_UART_IRQHandler+0x17a>
 800b346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d04f      	beq.n	800b3ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fa96 	bl	800b880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	2b40      	cmp	r3, #64	; 0x40
 800b360:	d141      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3314      	adds	r3, #20
 800b368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b37c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3314      	adds	r3, #20
 800b38a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b38e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b39a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1d9      	bne.n	800b362 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d013      	beq.n	800b3de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	4a7d      	ldr	r2, [pc, #500]	; (800b5b0 <HAL_UART_IRQHandler+0x3dc>)
 800b3bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fc fa45 	bl	8007852 <HAL_DMA_Abort_IT>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d016      	beq.n	800b3fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3dc:	e00e      	b.n	800b3fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f990 	bl	800b704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3e4:	e00a      	b.n	800b3fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f98c 	bl	800b704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ec:	e006      	b.n	800b3fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f988 	bl	800b704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b3fa:	e170      	b.n	800b6de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3fc:	bf00      	nop
    return;
 800b3fe:	e16e      	b.n	800b6de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	2b01      	cmp	r3, #1
 800b406:	f040 814a 	bne.w	800b69e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b40a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b40e:	f003 0310 	and.w	r3, r3, #16
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 8143 	beq.w	800b69e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b41c:	f003 0310 	and.w	r3, r3, #16
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 813c 	beq.w	800b69e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b426:	2300      	movs	r3, #0
 800b428:	60bb      	str	r3, [r7, #8]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	60bb      	str	r3, [r7, #8]
 800b43a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b446:	2b40      	cmp	r3, #64	; 0x40
 800b448:	f040 80b4 	bne.w	800b5b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 8140 	beq.w	800b6e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b46a:	429a      	cmp	r2, r3
 800b46c:	f080 8139 	bcs.w	800b6e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b476:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b482:	f000 8088 	beq.w	800b596 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	330c      	adds	r3, #12
 800b48c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b494:	e853 3f00 	ldrex	r3, [r3]
 800b498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b49c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	330c      	adds	r3, #12
 800b4ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b4b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4c2:	e841 2300 	strex	r3, r2, [r1]
 800b4c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1d9      	bne.n	800b486 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3314      	adds	r3, #20
 800b4d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4dc:	e853 3f00 	ldrex	r3, [r3]
 800b4e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b4e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4e4:	f023 0301 	bic.w	r3, r3, #1
 800b4e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3314      	adds	r3, #20
 800b4f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b4fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b4fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e1      	bne.n	800b4d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3314      	adds	r3, #20
 800b514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b518:	e853 3f00 	ldrex	r3, [r3]
 800b51c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b51e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3314      	adds	r3, #20
 800b52e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b532:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e3      	bne.n	800b50e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	330c      	adds	r3, #12
 800b55a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b55e:	e853 3f00 	ldrex	r3, [r3]
 800b562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b566:	f023 0310 	bic.w	r3, r3, #16
 800b56a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	330c      	adds	r3, #12
 800b574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b578:	65ba      	str	r2, [r7, #88]	; 0x58
 800b57a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b57e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e3      	bne.n	800b554 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	4618      	mov	r0, r3
 800b592:	f7fc f8ee 	bl	8007772 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f8b6 	bl	800b718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5ac:	e099      	b.n	800b6e2 <HAL_UART_IRQHandler+0x50e>
 800b5ae:	bf00      	nop
 800b5b0:	0800b947 	.word	0x0800b947
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 808b 	beq.w	800b6e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b5d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 8086 	beq.w	800b6e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	330c      	adds	r3, #12
 800b5e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	330c      	adds	r3, #12
 800b5fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b5fe:	647a      	str	r2, [r7, #68]	; 0x44
 800b600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b606:	e841 2300 	strex	r3, r2, [r1]
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1e3      	bne.n	800b5da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3314      	adds	r3, #20
 800b618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	e853 3f00 	ldrex	r3, [r3]
 800b620:	623b      	str	r3, [r7, #32]
   return(result);
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	f023 0301 	bic.w	r3, r3, #1
 800b628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3314      	adds	r3, #20
 800b632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b636:	633a      	str	r2, [r7, #48]	; 0x30
 800b638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e3      	bne.n	800b612 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	330c      	adds	r3, #12
 800b65e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	60fb      	str	r3, [r7, #12]
   return(result);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0310 	bic.w	r3, r3, #16
 800b66e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	330c      	adds	r3, #12
 800b678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b67c:	61fa      	str	r2, [r7, #28]
 800b67e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b680:	69b9      	ldr	r1, [r7, #24]
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	e841 2300 	strex	r3, r2, [r1]
 800b688:	617b      	str	r3, [r7, #20]
   return(result);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e3      	bne.n	800b658 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f83e 	bl	800b718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b69c:	e023      	b.n	800b6e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d009      	beq.n	800b6be <HAL_UART_IRQHandler+0x4ea>
 800b6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f959 	bl	800b96e <UART_Transmit_IT>
    return;
 800b6bc:	e014      	b.n	800b6e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00e      	beq.n	800b6e8 <HAL_UART_IRQHandler+0x514>
 800b6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f999 	bl	800ba0e <UART_EndTransmit_IT>
    return;
 800b6dc:	e004      	b.n	800b6e8 <HAL_UART_IRQHandler+0x514>
    return;
 800b6de:	bf00      	nop
 800b6e0:	e002      	b.n	800b6e8 <HAL_UART_IRQHandler+0x514>
      return;
 800b6e2:	bf00      	nop
 800b6e4:	e000      	b.n	800b6e8 <HAL_UART_IRQHandler+0x514>
      return;
 800b6e6:	bf00      	nop
  }
}
 800b6e8:	37e8      	adds	r7, #232	; 0xe8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop

0800b6f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b090      	sub	sp, #64	; 0x40
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	4613      	mov	r3, r2
 800b73e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b740:	e050      	b.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d04c      	beq.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <UART_WaitOnFlagUntilTimeout+0x30>
 800b750:	f7fb face 	bl	8006cf0 <HAL_GetTick>
 800b754:	4602      	mov	r2, r0
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d241      	bcs.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	330c      	adds	r3, #12
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	330c      	adds	r3, #12
 800b77e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b780:	637a      	str	r2, [r7, #52]	; 0x34
 800b782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b788:	e841 2300 	strex	r3, r2, [r1]
 800b78c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e5      	bne.n	800b760 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3314      	adds	r3, #20
 800b79a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7b4:	623a      	str	r2, [r7, #32]
 800b7b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	69f9      	ldr	r1, [r7, #28]
 800b7ba:	6a3a      	ldr	r2, [r7, #32]
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e5      	bne.n	800b794 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e00f      	b.n	800b804 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	bf0c      	ite	eq
 800b7f4:	2301      	moveq	r3, #1
 800b7f6:	2300      	movne	r3, #0
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d09f      	beq.n	800b742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3740      	adds	r7, #64	; 0x40
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	88fa      	ldrh	r2, [r7, #6]
 800b824:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	88fa      	ldrh	r2, [r7, #6]
 800b82a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2222      	movs	r2, #34	; 0x22
 800b836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b850:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	695a      	ldr	r2, [r3, #20]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f042 0201 	orr.w	r2, r2, #1
 800b860:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f042 0220 	orr.w	r2, r2, #32
 800b870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b880:	b480      	push	{r7}
 800b882:	b095      	sub	sp, #84	; 0x54
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	330c      	adds	r3, #12
 800b88e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b89e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	330c      	adds	r3, #12
 800b8a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8a8:	643a      	str	r2, [r7, #64]	; 0x40
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e5      	bne.n	800b888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3314      	adds	r3, #20
 800b8c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f023 0301 	bic.w	r3, r3, #1
 800b8d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	3314      	adds	r3, #20
 800b8da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b8de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e4:	e841 2300 	strex	r3, r2, [r1]
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1e5      	bne.n	800b8bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d119      	bne.n	800b92c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	330c      	adds	r3, #12
 800b8fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	60bb      	str	r3, [r7, #8]
   return(result);
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f023 0310 	bic.w	r3, r3, #16
 800b90e:	647b      	str	r3, [r7, #68]	; 0x44
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	330c      	adds	r3, #12
 800b916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b918:	61ba      	str	r2, [r7, #24]
 800b91a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91c:	6979      	ldr	r1, [r7, #20]
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	e841 2300 	strex	r3, r2, [r1]
 800b924:	613b      	str	r3, [r7, #16]
   return(result);
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1e5      	bne.n	800b8f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2220      	movs	r2, #32
 800b930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b93a:	bf00      	nop
 800b93c:	3754      	adds	r7, #84	; 0x54
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff fecf 	bl	800b704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b96e:	b480      	push	{r7}
 800b970:	b085      	sub	sp, #20
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b21      	cmp	r3, #33	; 0x21
 800b980:	d13e      	bne.n	800ba00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b98a:	d114      	bne.n	800b9b6 <UART_Transmit_IT+0x48>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d110      	bne.n	800b9b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	1c9a      	adds	r2, r3, #2
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	621a      	str	r2, [r3, #32]
 800b9b4:	e008      	b.n	800b9c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	1c59      	adds	r1, r3, #1
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	6211      	str	r1, [r2, #32]
 800b9c0:	781a      	ldrb	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10f      	bne.n	800b9fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68da      	ldr	r2, [r3, #12]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e000      	b.n	800ba02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba00:	2302      	movs	r3, #2
  }
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68da      	ldr	r2, [r3, #12]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff fe5e 	bl	800b6f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b08c      	sub	sp, #48	; 0x30
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b22      	cmp	r3, #34	; 0x22
 800ba50:	f040 80ab 	bne.w	800bbaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba5c:	d117      	bne.n	800ba8e <UART_Receive_IT+0x50>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d113      	bne.n	800ba8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba86:	1c9a      	adds	r2, r3, #2
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ba8c:	e026      	b.n	800badc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa0:	d007      	beq.n	800bab2 <UART_Receive_IT+0x74>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10a      	bne.n	800bac0 <UART_Receive_IT+0x82>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	e008      	b.n	800bad2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4619      	mov	r1, r3
 800baea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800baec:	2b00      	cmp	r3, #0
 800baee:	d15a      	bne.n	800bba6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f022 0220 	bic.w	r2, r2, #32
 800bafe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	695a      	ldr	r2, [r3, #20]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0201 	bic.w	r2, r2, #1
 800bb1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2220      	movs	r2, #32
 800bb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d135      	bne.n	800bb9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	330c      	adds	r3, #12
 800bb3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	e853 3f00 	ldrex	r3, [r3]
 800bb44:	613b      	str	r3, [r7, #16]
   return(result);
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	f023 0310 	bic.w	r3, r3, #16
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	330c      	adds	r3, #12
 800bb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb56:	623a      	str	r2, [r7, #32]
 800bb58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5a:	69f9      	ldr	r1, [r7, #28]
 800bb5c:	6a3a      	ldr	r2, [r7, #32]
 800bb5e:	e841 2300 	strex	r3, r2, [r1]
 800bb62:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1e5      	bne.n	800bb36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b10      	cmp	r3, #16
 800bb76:	d10a      	bne.n	800bb8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff fdbf 	bl	800b718 <HAL_UARTEx_RxEventCallback>
 800bb9a:	e002      	b.n	800bba2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7f6 f8a7 	bl	8001cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	e002      	b.n	800bbac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	e000      	b.n	800bbac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bbaa:	2302      	movs	r3, #2
  }
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3730      	adds	r7, #48	; 0x30
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbb8:	b0c0      	sub	sp, #256	; 0x100
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd0:	68d9      	ldr	r1, [r3, #12]
 800bbd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	ea40 0301 	orr.w	r3, r0, r1
 800bbdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf8:	69db      	ldr	r3, [r3, #28]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bc0c:	f021 010c 	bic.w	r1, r1, #12
 800bc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc2e:	6999      	ldr	r1, [r3, #24]
 800bc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	ea40 0301 	orr.w	r3, r0, r1
 800bc3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b8f      	ldr	r3, [pc, #572]	; (800be80 <UART_SetConfig+0x2cc>)
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d005      	beq.n	800bc54 <UART_SetConfig+0xa0>
 800bc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4b8d      	ldr	r3, [pc, #564]	; (800be84 <UART_SetConfig+0x2d0>)
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d104      	bne.n	800bc5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc54:	f7fd fc1a 	bl	800948c <HAL_RCC_GetPCLK2Freq>
 800bc58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bc5c:	e003      	b.n	800bc66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc5e:	f7fd fc01 	bl	8009464 <HAL_RCC_GetPCLK1Freq>
 800bc62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6a:	69db      	ldr	r3, [r3, #28]
 800bc6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc70:	f040 810c 	bne.w	800be8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bc82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bc86:	4622      	mov	r2, r4
 800bc88:	462b      	mov	r3, r5
 800bc8a:	1891      	adds	r1, r2, r2
 800bc8c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bc8e:	415b      	adcs	r3, r3
 800bc90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bc96:	4621      	mov	r1, r4
 800bc98:	eb12 0801 	adds.w	r8, r2, r1
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	eb43 0901 	adc.w	r9, r3, r1
 800bca2:	f04f 0200 	mov.w	r2, #0
 800bca6:	f04f 0300 	mov.w	r3, #0
 800bcaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bcae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bcb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bcb6:	4690      	mov	r8, r2
 800bcb8:	4699      	mov	r9, r3
 800bcba:	4623      	mov	r3, r4
 800bcbc:	eb18 0303 	adds.w	r3, r8, r3
 800bcc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcc4:	462b      	mov	r3, r5
 800bcc6:	eb49 0303 	adc.w	r3, r9, r3
 800bcca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bcce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bcde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bce2:	460b      	mov	r3, r1
 800bce4:	18db      	adds	r3, r3, r3
 800bce6:	653b      	str	r3, [r7, #80]	; 0x50
 800bce8:	4613      	mov	r3, r2
 800bcea:	eb42 0303 	adc.w	r3, r2, r3
 800bcee:	657b      	str	r3, [r7, #84]	; 0x54
 800bcf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bcf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bcf8:	f7f4 ff80 	bl	8000bfc <__aeabi_uldivmod>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4b61      	ldr	r3, [pc, #388]	; (800be88 <UART_SetConfig+0x2d4>)
 800bd02:	fba3 2302 	umull	r2, r3, r3, r2
 800bd06:	095b      	lsrs	r3, r3, #5
 800bd08:	011c      	lsls	r4, r3, #4
 800bd0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bd18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bd1c:	4642      	mov	r2, r8
 800bd1e:	464b      	mov	r3, r9
 800bd20:	1891      	adds	r1, r2, r2
 800bd22:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd24:	415b      	adcs	r3, r3
 800bd26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bd2c:	4641      	mov	r1, r8
 800bd2e:	eb12 0a01 	adds.w	sl, r2, r1
 800bd32:	4649      	mov	r1, r9
 800bd34:	eb43 0b01 	adc.w	fp, r3, r1
 800bd38:	f04f 0200 	mov.w	r2, #0
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd4c:	4692      	mov	sl, r2
 800bd4e:	469b      	mov	fp, r3
 800bd50:	4643      	mov	r3, r8
 800bd52:	eb1a 0303 	adds.w	r3, sl, r3
 800bd56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd5a:	464b      	mov	r3, r9
 800bd5c:	eb4b 0303 	adc.w	r3, fp, r3
 800bd60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bd74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	18db      	adds	r3, r3, r3
 800bd7c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd7e:	4613      	mov	r3, r2
 800bd80:	eb42 0303 	adc.w	r3, r2, r3
 800bd84:	647b      	str	r3, [r7, #68]	; 0x44
 800bd86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bd8e:	f7f4 ff35 	bl	8000bfc <__aeabi_uldivmod>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4611      	mov	r1, r2
 800bd98:	4b3b      	ldr	r3, [pc, #236]	; (800be88 <UART_SetConfig+0x2d4>)
 800bd9a:	fba3 2301 	umull	r2, r3, r3, r1
 800bd9e:	095b      	lsrs	r3, r3, #5
 800bda0:	2264      	movs	r2, #100	; 0x64
 800bda2:	fb02 f303 	mul.w	r3, r2, r3
 800bda6:	1acb      	subs	r3, r1, r3
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bdae:	4b36      	ldr	r3, [pc, #216]	; (800be88 <UART_SetConfig+0x2d4>)
 800bdb0:	fba3 2302 	umull	r2, r3, r3, r2
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bdbc:	441c      	add	r4, r3
 800bdbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bdcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	464b      	mov	r3, r9
 800bdd4:	1891      	adds	r1, r2, r2
 800bdd6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bdd8:	415b      	adcs	r3, r3
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bde0:	4641      	mov	r1, r8
 800bde2:	1851      	adds	r1, r2, r1
 800bde4:	6339      	str	r1, [r7, #48]	; 0x30
 800bde6:	4649      	mov	r1, r9
 800bde8:	414b      	adcs	r3, r1
 800bdea:	637b      	str	r3, [r7, #52]	; 0x34
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	f04f 0300 	mov.w	r3, #0
 800bdf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bdf8:	4659      	mov	r1, fp
 800bdfa:	00cb      	lsls	r3, r1, #3
 800bdfc:	4651      	mov	r1, sl
 800bdfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be02:	4651      	mov	r1, sl
 800be04:	00ca      	lsls	r2, r1, #3
 800be06:	4610      	mov	r0, r2
 800be08:	4619      	mov	r1, r3
 800be0a:	4603      	mov	r3, r0
 800be0c:	4642      	mov	r2, r8
 800be0e:	189b      	adds	r3, r3, r2
 800be10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be14:	464b      	mov	r3, r9
 800be16:	460a      	mov	r2, r1
 800be18:	eb42 0303 	adc.w	r3, r2, r3
 800be1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be34:	460b      	mov	r3, r1
 800be36:	18db      	adds	r3, r3, r3
 800be38:	62bb      	str	r3, [r7, #40]	; 0x28
 800be3a:	4613      	mov	r3, r2
 800be3c:	eb42 0303 	adc.w	r3, r2, r3
 800be40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800be4a:	f7f4 fed7 	bl	8000bfc <__aeabi_uldivmod>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <UART_SetConfig+0x2d4>)
 800be54:	fba3 1302 	umull	r1, r3, r3, r2
 800be58:	095b      	lsrs	r3, r3, #5
 800be5a:	2164      	movs	r1, #100	; 0x64
 800be5c:	fb01 f303 	mul.w	r3, r1, r3
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	3332      	adds	r3, #50	; 0x32
 800be66:	4a08      	ldr	r2, [pc, #32]	; (800be88 <UART_SetConfig+0x2d4>)
 800be68:	fba2 2303 	umull	r2, r3, r2, r3
 800be6c:	095b      	lsrs	r3, r3, #5
 800be6e:	f003 0207 	and.w	r2, r3, #7
 800be72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4422      	add	r2, r4
 800be7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be7c:	e106      	b.n	800c08c <UART_SetConfig+0x4d8>
 800be7e:	bf00      	nop
 800be80:	40011000 	.word	0x40011000
 800be84:	40011400 	.word	0x40011400
 800be88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be90:	2200      	movs	r2, #0
 800be92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800be9e:	4642      	mov	r2, r8
 800bea0:	464b      	mov	r3, r9
 800bea2:	1891      	adds	r1, r2, r2
 800bea4:	6239      	str	r1, [r7, #32]
 800bea6:	415b      	adcs	r3, r3
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
 800beaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800beae:	4641      	mov	r1, r8
 800beb0:	1854      	adds	r4, r2, r1
 800beb2:	4649      	mov	r1, r9
 800beb4:	eb43 0501 	adc.w	r5, r3, r1
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	00eb      	lsls	r3, r5, #3
 800bec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bec6:	00e2      	lsls	r2, r4, #3
 800bec8:	4614      	mov	r4, r2
 800beca:	461d      	mov	r5, r3
 800becc:	4643      	mov	r3, r8
 800bece:	18e3      	adds	r3, r4, r3
 800bed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bed4:	464b      	mov	r3, r9
 800bed6:	eb45 0303 	adc.w	r3, r5, r3
 800beda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800beea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800beee:	f04f 0200 	mov.w	r2, #0
 800bef2:	f04f 0300 	mov.w	r3, #0
 800bef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800befa:	4629      	mov	r1, r5
 800befc:	008b      	lsls	r3, r1, #2
 800befe:	4621      	mov	r1, r4
 800bf00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf04:	4621      	mov	r1, r4
 800bf06:	008a      	lsls	r2, r1, #2
 800bf08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bf0c:	f7f4 fe76 	bl	8000bfc <__aeabi_uldivmod>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4b60      	ldr	r3, [pc, #384]	; (800c098 <UART_SetConfig+0x4e4>)
 800bf16:	fba3 2302 	umull	r2, r3, r3, r2
 800bf1a:	095b      	lsrs	r3, r3, #5
 800bf1c:	011c      	lsls	r4, r3, #4
 800bf1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bf30:	4642      	mov	r2, r8
 800bf32:	464b      	mov	r3, r9
 800bf34:	1891      	adds	r1, r2, r2
 800bf36:	61b9      	str	r1, [r7, #24]
 800bf38:	415b      	adcs	r3, r3
 800bf3a:	61fb      	str	r3, [r7, #28]
 800bf3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf40:	4641      	mov	r1, r8
 800bf42:	1851      	adds	r1, r2, r1
 800bf44:	6139      	str	r1, [r7, #16]
 800bf46:	4649      	mov	r1, r9
 800bf48:	414b      	adcs	r3, r1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	f04f 0200 	mov.w	r2, #0
 800bf50:	f04f 0300 	mov.w	r3, #0
 800bf54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf58:	4659      	mov	r1, fp
 800bf5a:	00cb      	lsls	r3, r1, #3
 800bf5c:	4651      	mov	r1, sl
 800bf5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf62:	4651      	mov	r1, sl
 800bf64:	00ca      	lsls	r2, r1, #3
 800bf66:	4610      	mov	r0, r2
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	189b      	adds	r3, r3, r2
 800bf70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf74:	464b      	mov	r3, r9
 800bf76:	460a      	mov	r2, r1
 800bf78:	eb42 0303 	adc.w	r3, r2, r3
 800bf7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bf8c:	f04f 0200 	mov.w	r2, #0
 800bf90:	f04f 0300 	mov.w	r3, #0
 800bf94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bf98:	4649      	mov	r1, r9
 800bf9a:	008b      	lsls	r3, r1, #2
 800bf9c:	4641      	mov	r1, r8
 800bf9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfa2:	4641      	mov	r1, r8
 800bfa4:	008a      	lsls	r2, r1, #2
 800bfa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bfaa:	f7f4 fe27 	bl	8000bfc <__aeabi_uldivmod>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	4b38      	ldr	r3, [pc, #224]	; (800c098 <UART_SetConfig+0x4e4>)
 800bfb6:	fba3 2301 	umull	r2, r3, r3, r1
 800bfba:	095b      	lsrs	r3, r3, #5
 800bfbc:	2264      	movs	r2, #100	; 0x64
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
 800bfc2:	1acb      	subs	r3, r1, r3
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	3332      	adds	r3, #50	; 0x32
 800bfc8:	4a33      	ldr	r2, [pc, #204]	; (800c098 <UART_SetConfig+0x4e4>)
 800bfca:	fba2 2303 	umull	r2, r3, r2, r3
 800bfce:	095b      	lsrs	r3, r3, #5
 800bfd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfd4:	441c      	add	r4, r3
 800bfd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfda:	2200      	movs	r2, #0
 800bfdc:	673b      	str	r3, [r7, #112]	; 0x70
 800bfde:	677a      	str	r2, [r7, #116]	; 0x74
 800bfe0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bfe4:	4642      	mov	r2, r8
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	1891      	adds	r1, r2, r2
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	415b      	adcs	r3, r3
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bff4:	4641      	mov	r1, r8
 800bff6:	1851      	adds	r1, r2, r1
 800bff8:	6039      	str	r1, [r7, #0]
 800bffa:	4649      	mov	r1, r9
 800bffc:	414b      	adcs	r3, r1
 800bffe:	607b      	str	r3, [r7, #4]
 800c000:	f04f 0200 	mov.w	r2, #0
 800c004:	f04f 0300 	mov.w	r3, #0
 800c008:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c00c:	4659      	mov	r1, fp
 800c00e:	00cb      	lsls	r3, r1, #3
 800c010:	4651      	mov	r1, sl
 800c012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c016:	4651      	mov	r1, sl
 800c018:	00ca      	lsls	r2, r1, #3
 800c01a:	4610      	mov	r0, r2
 800c01c:	4619      	mov	r1, r3
 800c01e:	4603      	mov	r3, r0
 800c020:	4642      	mov	r2, r8
 800c022:	189b      	adds	r3, r3, r2
 800c024:	66bb      	str	r3, [r7, #104]	; 0x68
 800c026:	464b      	mov	r3, r9
 800c028:	460a      	mov	r2, r1
 800c02a:	eb42 0303 	adc.w	r3, r2, r3
 800c02e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	663b      	str	r3, [r7, #96]	; 0x60
 800c03a:	667a      	str	r2, [r7, #100]	; 0x64
 800c03c:	f04f 0200 	mov.w	r2, #0
 800c040:	f04f 0300 	mov.w	r3, #0
 800c044:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c048:	4649      	mov	r1, r9
 800c04a:	008b      	lsls	r3, r1, #2
 800c04c:	4641      	mov	r1, r8
 800c04e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c052:	4641      	mov	r1, r8
 800c054:	008a      	lsls	r2, r1, #2
 800c056:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c05a:	f7f4 fdcf 	bl	8000bfc <__aeabi_uldivmod>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4b0d      	ldr	r3, [pc, #52]	; (800c098 <UART_SetConfig+0x4e4>)
 800c064:	fba3 1302 	umull	r1, r3, r3, r2
 800c068:	095b      	lsrs	r3, r3, #5
 800c06a:	2164      	movs	r1, #100	; 0x64
 800c06c:	fb01 f303 	mul.w	r3, r1, r3
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	011b      	lsls	r3, r3, #4
 800c074:	3332      	adds	r3, #50	; 0x32
 800c076:	4a08      	ldr	r2, [pc, #32]	; (800c098 <UART_SetConfig+0x4e4>)
 800c078:	fba2 2303 	umull	r2, r3, r2, r3
 800c07c:	095b      	lsrs	r3, r3, #5
 800c07e:	f003 020f 	and.w	r2, r3, #15
 800c082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4422      	add	r2, r4
 800c08a:	609a      	str	r2, [r3, #8]
}
 800c08c:	bf00      	nop
 800c08e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c092:	46bd      	mov	sp, r7
 800c094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c098:	51eb851f 	.word	0x51eb851f

0800c09c <__NVIC_SetPriority>:
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	6039      	str	r1, [r7, #0]
 800c0a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	db0a      	blt.n	800c0c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	490c      	ldr	r1, [pc, #48]	; (800c0e8 <__NVIC_SetPriority+0x4c>)
 800c0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ba:	0112      	lsls	r2, r2, #4
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	440b      	add	r3, r1
 800c0c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c0c4:	e00a      	b.n	800c0dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	4908      	ldr	r1, [pc, #32]	; (800c0ec <__NVIC_SetPriority+0x50>)
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	f003 030f 	and.w	r3, r3, #15
 800c0d2:	3b04      	subs	r3, #4
 800c0d4:	0112      	lsls	r2, r2, #4
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	440b      	add	r3, r1
 800c0da:	761a      	strb	r2, [r3, #24]
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	e000e100 	.word	0xe000e100
 800c0ec:	e000ed00 	.word	0xe000ed00

0800c0f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	f06f 0004 	mvn.w	r0, #4
 800c0fa:	f7ff ffcf 	bl	800c09c <__NVIC_SetPriority>
#endif
}
 800c0fe:	bf00      	nop
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c10a:	f3ef 8305 	mrs	r3, IPSR
 800c10e:	603b      	str	r3, [r7, #0]
  return(result);
 800c110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c116:	f06f 0305 	mvn.w	r3, #5
 800c11a:	607b      	str	r3, [r7, #4]
 800c11c:	e00c      	b.n	800c138 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c11e:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <osKernelInitialize+0x44>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d105      	bne.n	800c132 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c126:	4b08      	ldr	r3, [pc, #32]	; (800c148 <osKernelInitialize+0x44>)
 800c128:	2201      	movs	r2, #1
 800c12a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	607b      	str	r3, [r7, #4]
 800c130:	e002      	b.n	800c138 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c132:	f04f 33ff 	mov.w	r3, #4294967295
 800c136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c138:	687b      	ldr	r3, [r7, #4]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20000990 	.word	0x20000990

0800c14c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c152:	f3ef 8305 	mrs	r3, IPSR
 800c156:	603b      	str	r3, [r7, #0]
  return(result);
 800c158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c15e:	f06f 0305 	mvn.w	r3, #5
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e010      	b.n	800c188 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c166:	4b0b      	ldr	r3, [pc, #44]	; (800c194 <osKernelStart+0x48>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d109      	bne.n	800c182 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c16e:	f7ff ffbf 	bl	800c0f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <osKernelStart+0x48>)
 800c174:	2202      	movs	r2, #2
 800c176:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c178:	f001 f866 	bl	800d248 <vTaskStartScheduler>
      stat = osOK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	607b      	str	r3, [r7, #4]
 800c180:	e002      	b.n	800c188 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c182:	f04f 33ff 	mov.w	r3, #4294967295
 800c186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c188:	687b      	ldr	r3, [r7, #4]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000990 	.word	0x20000990

0800c198 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08e      	sub	sp, #56	; 0x38
 800c19c:	af04      	add	r7, sp, #16
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a8:	f3ef 8305 	mrs	r3, IPSR
 800c1ac:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d17e      	bne.n	800c2b2 <osThreadNew+0x11a>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d07b      	beq.n	800c2b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1ba:	2380      	movs	r3, #128	; 0x80
 800c1bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1be:	2318      	movs	r3, #24
 800c1c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d045      	beq.n	800c25e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <osThreadNew+0x48>
        name = attr->name;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d008      	beq.n	800c206 <osThreadNew+0x6e>
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	2b38      	cmp	r3, #56	; 0x38
 800c1f8:	d805      	bhi.n	800c206 <osThreadNew+0x6e>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <osThreadNew+0x72>
        return (NULL);
 800c206:	2300      	movs	r3, #0
 800c208:	e054      	b.n	800c2b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	089b      	lsrs	r3, r3, #2
 800c218:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00e      	beq.n	800c240 <osThreadNew+0xa8>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	2b5b      	cmp	r3, #91	; 0x5b
 800c228:	d90a      	bls.n	800c240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d006      	beq.n	800c240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <osThreadNew+0xa8>
        mem = 1;
 800c23a:	2301      	movs	r3, #1
 800c23c:	61bb      	str	r3, [r7, #24]
 800c23e:	e010      	b.n	800c262 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10c      	bne.n	800c262 <osThreadNew+0xca>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d108      	bne.n	800c262 <osThreadNew+0xca>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d104      	bne.n	800c262 <osThreadNew+0xca>
          mem = 0;
 800c258:	2300      	movs	r3, #0
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	e001      	b.n	800c262 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	2b01      	cmp	r3, #1
 800c266:	d110      	bne.n	800c28a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c270:	9202      	str	r2, [sp, #8]
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	6a3a      	ldr	r2, [r7, #32]
 800c27c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 fe0c 	bl	800ce9c <xTaskCreateStatic>
 800c284:	4603      	mov	r3, r0
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	e013      	b.n	800c2b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d110      	bne.n	800c2b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	b29a      	uxth	r2, r3
 800c294:	f107 0310 	add.w	r3, r7, #16
 800c298:	9301      	str	r3, [sp, #4]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 fe57 	bl	800cf56 <xTaskCreate>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d001      	beq.n	800c2b2 <osThreadNew+0x11a>
            hTask = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2b2:	693b      	ldr	r3, [r7, #16]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3728      	adds	r7, #40	; 0x28
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c4:	f3ef 8305 	mrs	r3, IPSR
 800c2c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d003      	beq.n	800c2d8 <osDelay+0x1c>
    stat = osErrorISR;
 800c2d0:	f06f 0305 	mvn.w	r3, #5
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e007      	b.n	800c2e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 ff7c 	bl	800d1e0 <vTaskDelay>
    }
  }

  return (stat);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a07      	ldr	r2, [pc, #28]	; (800c320 <vApplicationGetIdleTaskMemory+0x2c>)
 800c304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	4a06      	ldr	r2, [pc, #24]	; (800c324 <vApplicationGetIdleTaskMemory+0x30>)
 800c30a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2280      	movs	r2, #128	; 0x80
 800c310:	601a      	str	r2, [r3, #0]
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20000994 	.word	0x20000994
 800c324:	200009f0 	.word	0x200009f0

0800c328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4a07      	ldr	r2, [pc, #28]	; (800c354 <vApplicationGetTimerTaskMemory+0x2c>)
 800c338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	4a06      	ldr	r2, [pc, #24]	; (800c358 <vApplicationGetTimerTaskMemory+0x30>)
 800c33e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c346:	601a      	str	r2, [r3, #0]
}
 800c348:	bf00      	nop
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	20000bf0 	.word	0x20000bf0
 800c358:	20000c4c 	.word	0x20000c4c

0800c35c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f103 0208 	add.w	r2, r3, #8
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f04f 32ff 	mov.w	r2, #4294967295
 800c374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f103 0208 	add.w	r2, r3, #8
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f103 0208 	add.w	r2, r3, #8
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	601a      	str	r2, [r3, #0]
}
 800c3f2:	bf00      	nop
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3fe:	b480      	push	{r7}
 800c400:	b085      	sub	sp, #20
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c414:	d103      	bne.n	800c41e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	e00c      	b.n	800c438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3308      	adds	r3, #8
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e002      	b.n	800c42c <vListInsert+0x2e>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	429a      	cmp	r2, r3
 800c436:	d2f6      	bcs.n	800c426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	6892      	ldr	r2, [r2, #8]
 800c486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	6852      	ldr	r2, [r2, #4]
 800c490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d103      	bne.n	800c4a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689a      	ldr	r2, [r3, #8]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	1e5a      	subs	r2, r3, #1
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c4ea:	bf00      	nop
 800c4ec:	e7fe      	b.n	800c4ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c4ee:	f002 f851 	bl	800e594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fa:	68f9      	ldr	r1, [r7, #12]
 800c4fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4fe:	fb01 f303 	mul.w	r3, r1, r3
 800c502:	441a      	add	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51e:	3b01      	subs	r3, #1
 800c520:	68f9      	ldr	r1, [r7, #12]
 800c522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c524:	fb01 f303 	mul.w	r3, r1, r3
 800c528:	441a      	add	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	22ff      	movs	r2, #255	; 0xff
 800c532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	22ff      	movs	r2, #255	; 0xff
 800c53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d114      	bne.n	800c56e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d01a      	beq.n	800c582 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	3310      	adds	r3, #16
 800c550:	4618      	mov	r0, r3
 800c552:	f001 f903 	bl	800d75c <xTaskRemoveFromEventList>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d012      	beq.n	800c582 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c55c:	4b0c      	ldr	r3, [pc, #48]	; (800c590 <xQueueGenericReset+0xcc>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	e009      	b.n	800c582 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3310      	adds	r3, #16
 800c572:	4618      	mov	r0, r3
 800c574:	f7ff fef2 	bl	800c35c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3324      	adds	r3, #36	; 0x24
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff feed 	bl	800c35c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c582:	f002 f837 	bl	800e5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c586:	2301      	movs	r3, #1
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08e      	sub	sp, #56	; 0x38
 800c598:	af02      	add	r7, sp, #8
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <xQueueGenericCreateStatic+0x52>
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <xQueueGenericCreateStatic+0x56>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <xQueueGenericCreateStatic+0x58>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	623b      	str	r3, [r7, #32]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <xQueueGenericCreateStatic+0x7e>
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <xQueueGenericCreateStatic+0x82>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <xQueueGenericCreateStatic+0x84>
 800c616:	2300      	movs	r3, #0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10a      	bne.n	800c632 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	61fb      	str	r3, [r7, #28]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c632:	2350      	movs	r3, #80	; 0x50
 800c634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b50      	cmp	r3, #80	; 0x50
 800c63a:	d00a      	beq.n	800c652 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	61bb      	str	r3, [r7, #24]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c652:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00d      	beq.n	800c67a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c666:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	4613      	mov	r3, r2
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	68b9      	ldr	r1, [r7, #8]
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f000 f805 	bl	800c684 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3730      	adds	r7, #48	; 0x30
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d103      	bne.n	800c6a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	69ba      	ldr	r2, [r7, #24]
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	69b8      	ldr	r0, [r7, #24]
 800c6b6:	f7ff ff05 	bl	800c4c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	78fa      	ldrb	r2, [r7, #3]
 800c6be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6c2:	bf00      	nop
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
	...

0800c6cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08e      	sub	sp, #56	; 0x38
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueGenericSend+0x32>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d103      	bne.n	800c70c <xQueueGenericSend+0x40>
 800c704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <xQueueGenericSend+0x44>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <xQueueGenericSend+0x46>
 800c710:	2300      	movs	r3, #0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10a      	bne.n	800c72c <xQueueGenericSend+0x60>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c728:	bf00      	nop
 800c72a:	e7fe      	b.n	800c72a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d103      	bne.n	800c73a <xQueueGenericSend+0x6e>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	2b01      	cmp	r3, #1
 800c738:	d101      	bne.n	800c73e <xQueueGenericSend+0x72>
 800c73a:	2301      	movs	r3, #1
 800c73c:	e000      	b.n	800c740 <xQueueGenericSend+0x74>
 800c73e:	2300      	movs	r3, #0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10a      	bne.n	800c75a <xQueueGenericSend+0x8e>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	623b      	str	r3, [r7, #32]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c75a:	f001 f9bd 	bl	800dad8 <xTaskGetSchedulerState>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d102      	bne.n	800c76a <xQueueGenericSend+0x9e>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d101      	bne.n	800c76e <xQueueGenericSend+0xa2>
 800c76a:	2301      	movs	r3, #1
 800c76c:	e000      	b.n	800c770 <xQueueGenericSend+0xa4>
 800c76e:	2300      	movs	r3, #0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10a      	bne.n	800c78a <xQueueGenericSend+0xbe>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	61fb      	str	r3, [r7, #28]
}
 800c786:	bf00      	nop
 800c788:	e7fe      	b.n	800c788 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c78a:	f001 ff03 	bl	800e594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c796:	429a      	cmp	r2, r3
 800c798:	d302      	bcc.n	800c7a0 <xQueueGenericSend+0xd4>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d129      	bne.n	800c7f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7a6:	f000 fa0b 	bl	800cbc0 <prvCopyDataToQueue>
 800c7aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d010      	beq.n	800c7d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	3324      	adds	r3, #36	; 0x24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 ffcf 	bl	800d75c <xTaskRemoveFromEventList>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d013      	beq.n	800c7ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7c4:	4b3f      	ldr	r3, [pc, #252]	; (800c8c4 <xQueueGenericSend+0x1f8>)
 800c7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	e00a      	b.n	800c7ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d007      	beq.n	800c7ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7dc:	4b39      	ldr	r3, [pc, #228]	; (800c8c4 <xQueueGenericSend+0x1f8>)
 800c7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7ec:	f001 ff02 	bl	800e5f4 <vPortExitCritical>
				return pdPASS;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e063      	b.n	800c8bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d103      	bne.n	800c802 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7fa:	f001 fefb 	bl	800e5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	e05c      	b.n	800c8bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	2b00      	cmp	r3, #0
 800c806:	d106      	bne.n	800c816 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c808:	f107 0314 	add.w	r3, r7, #20
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 f809 	bl	800d824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c812:	2301      	movs	r3, #1
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c816:	f001 feed 	bl	800e5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c81a:	f000 fd7b 	bl	800d314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c81e:	f001 feb9 	bl	800e594 <vPortEnterCritical>
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c828:	b25b      	sxtb	r3, r3
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82e:	d103      	bne.n	800c838 <xQueueGenericSend+0x16c>
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c83e:	b25b      	sxtb	r3, r3
 800c840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c844:	d103      	bne.n	800c84e <xQueueGenericSend+0x182>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	2200      	movs	r2, #0
 800c84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c84e:	f001 fed1 	bl	800e5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c852:	1d3a      	adds	r2, r7, #4
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	4611      	mov	r1, r2
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fff8 	bl	800d850 <xTaskCheckForTimeOut>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d124      	bne.n	800c8b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c868:	f000 faa2 	bl	800cdb0 <prvIsQueueFull>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d018      	beq.n	800c8a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	3310      	adds	r3, #16
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 ff1e 	bl	800d6bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c882:	f000 fa2d 	bl	800cce0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c886:	f000 fd53 	bl	800d330 <xTaskResumeAll>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f47f af7c 	bne.w	800c78a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <xQueueGenericSend+0x1f8>)
 800c894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	e772      	b.n	800c78a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a6:	f000 fa1b 	bl	800cce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8aa:	f000 fd41 	bl	800d330 <xTaskResumeAll>
 800c8ae:	e76c      	b.n	800c78a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b2:	f000 fa15 	bl	800cce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8b6:	f000 fd3b 	bl	800d330 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3738      	adds	r7, #56	; 0x38
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b090      	sub	sp, #64	; 0x40
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10a      	bne.n	800c8f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <xQueueGenericSendFromISR+0x3c>
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <xQueueGenericSendFromISR+0x40>
 800c904:	2301      	movs	r3, #1
 800c906:	e000      	b.n	800c90a <xQueueGenericSendFromISR+0x42>
 800c908:	2300      	movs	r3, #0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10a      	bne.n	800c924 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c920:	bf00      	nop
 800c922:	e7fe      	b.n	800c922 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b02      	cmp	r3, #2
 800c928:	d103      	bne.n	800c932 <xQueueGenericSendFromISR+0x6a>
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <xQueueGenericSendFromISR+0x6e>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <xQueueGenericSendFromISR+0x70>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	623b      	str	r3, [r7, #32]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c952:	f001 ff01 	bl	800e758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c956:	f3ef 8211 	mrs	r2, BASEPRI
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	61fa      	str	r2, [r7, #28]
 800c96c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c96e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c970:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d302      	bcc.n	800c984 <xQueueGenericSendFromISR+0xbc>
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	2b02      	cmp	r3, #2
 800c982:	d12f      	bne.n	800c9e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c992:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c99a:	f000 f911 	bl	800cbc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c99e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a6:	d112      	bne.n	800c9ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d016      	beq.n	800c9de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	3324      	adds	r3, #36	; 0x24
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 fed1 	bl	800d75c <xTaskRemoveFromEventList>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00e      	beq.n	800c9de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00b      	beq.n	800c9de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	601a      	str	r2, [r3, #0]
 800c9cc:	e007      	b.n	800c9de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	b25a      	sxtb	r2, r3
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c9e2:	e001      	b.n	800c9e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3740      	adds	r7, #64	; 0x40
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08c      	sub	sp, #48	; 0x30
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10a      	bne.n	800ca30 <xQueueReceive+0x30>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	623b      	str	r3, [r7, #32]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d103      	bne.n	800ca3e <xQueueReceive+0x3e>
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <xQueueReceive+0x42>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e000      	b.n	800ca44 <xQueueReceive+0x44>
 800ca42:	2300      	movs	r3, #0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10a      	bne.n	800ca5e <xQueueReceive+0x5e>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	61fb      	str	r3, [r7, #28]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca5e:	f001 f83b 	bl	800dad8 <xTaskGetSchedulerState>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <xQueueReceive+0x6e>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <xQueueReceive+0x72>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e000      	b.n	800ca74 <xQueueReceive+0x74>
 800ca72:	2300      	movs	r3, #0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d10a      	bne.n	800ca8e <xQueueReceive+0x8e>
	__asm volatile
 800ca78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7c:	f383 8811 	msr	BASEPRI, r3
 800ca80:	f3bf 8f6f 	isb	sy
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	61bb      	str	r3, [r7, #24]
}
 800ca8a:	bf00      	nop
 800ca8c:	e7fe      	b.n	800ca8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca8e:	f001 fd81 	bl	800e594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d01f      	beq.n	800cade <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa2:	f000 f8f7 	bl	800cc94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	1e5a      	subs	r2, r3, #1
 800caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00f      	beq.n	800cad6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	3310      	adds	r3, #16
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 fe4e 	bl	800d75c <xTaskRemoveFromEventList>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d007      	beq.n	800cad6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cac6:	4b3d      	ldr	r3, [pc, #244]	; (800cbbc <xQueueReceive+0x1bc>)
 800cac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cad6:	f001 fd8d 	bl	800e5f4 <vPortExitCritical>
				return pdPASS;
 800cada:	2301      	movs	r3, #1
 800cadc:	e069      	b.n	800cbb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d103      	bne.n	800caec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cae4:	f001 fd86 	bl	800e5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cae8:	2300      	movs	r3, #0
 800caea:	e062      	b.n	800cbb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caf2:	f107 0310 	add.w	r3, r7, #16
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fe94 	bl	800d824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cafc:	2301      	movs	r3, #1
 800cafe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb00:	f001 fd78 	bl	800e5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb04:	f000 fc06 	bl	800d314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb08:	f001 fd44 	bl	800e594 <vPortEnterCritical>
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb12:	b25b      	sxtb	r3, r3
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d103      	bne.n	800cb22 <xQueueReceive+0x122>
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb28:	b25b      	sxtb	r3, r3
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d103      	bne.n	800cb38 <xQueueReceive+0x138>
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb38:	f001 fd5c 	bl	800e5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb3c:	1d3a      	adds	r2, r7, #4
 800cb3e:	f107 0310 	add.w	r3, r7, #16
 800cb42:	4611      	mov	r1, r2
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fe83 	bl	800d850 <xTaskCheckForTimeOut>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d123      	bne.n	800cb98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb52:	f000 f917 	bl	800cd84 <prvIsQueueEmpty>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d017      	beq.n	800cb8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5e:	3324      	adds	r3, #36	; 0x24
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	4611      	mov	r1, r2
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fda9 	bl	800d6bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb6c:	f000 f8b8 	bl	800cce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb70:	f000 fbde 	bl	800d330 <xTaskResumeAll>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d189      	bne.n	800ca8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cb7a:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <xQueueReceive+0x1bc>)
 800cb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	e780      	b.n	800ca8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb8e:	f000 f8a7 	bl	800cce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb92:	f000 fbcd 	bl	800d330 <xTaskResumeAll>
 800cb96:	e77a      	b.n	800ca8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb9a:	f000 f8a1 	bl	800cce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb9e:	f000 fbc7 	bl	800d330 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cba4:	f000 f8ee 	bl	800cd84 <prvIsQueueEmpty>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f43f af6f 	beq.w	800ca8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3730      	adds	r7, #48	; 0x30
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d10d      	bne.n	800cbfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d14d      	bne.n	800cc82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 ff92 	bl	800db14 <xTaskPriorityDisinherit>
 800cbf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	609a      	str	r2, [r3, #8]
 800cbf8:	e043      	b.n	800cc82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d119      	bne.n	800cc34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6858      	ldr	r0, [r3, #4]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc08:	461a      	mov	r2, r3
 800cc0a:	68b9      	ldr	r1, [r7, #8]
 800cc0c:	f002 f836 	bl	800ec7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	685a      	ldr	r2, [r3, #4]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc18:	441a      	add	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d32b      	bcc.n	800cc82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	605a      	str	r2, [r3, #4]
 800cc32:	e026      	b.n	800cc82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	68d8      	ldr	r0, [r3, #12]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	f002 f81c 	bl	800ec7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	441a      	add	r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	68da      	ldr	r2, [r3, #12]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d207      	bcs.n	800cc70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc68:	425b      	negs	r3, r3
 800cc6a:	441a      	add	r2, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d105      	bne.n	800cc82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	1c5a      	adds	r2, r3, #1
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc8a:	697b      	ldr	r3, [r7, #20]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d018      	beq.n	800ccd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68da      	ldr	r2, [r3, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	441a      	add	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d303      	bcc.n	800ccc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68d9      	ldr	r1, [r3, #12]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6838      	ldr	r0, [r7, #0]
 800ccd4:	f001 ffd2 	bl	800ec7c <memcpy>
	}
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cce8:	f001 fc54 	bl	800e594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccf4:	e011      	b.n	800cd1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d012      	beq.n	800cd24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3324      	adds	r3, #36	; 0x24
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fd2a 	bl	800d75c <xTaskRemoveFromEventList>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd0e:	f000 fe01 	bl	800d914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
 800cd14:	3b01      	subs	r3, #1
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	dce9      	bgt.n	800ccf6 <prvUnlockQueue+0x16>
 800cd22:	e000      	b.n	800cd26 <prvUnlockQueue+0x46>
					break;
 800cd24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	22ff      	movs	r2, #255	; 0xff
 800cd2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd2e:	f001 fc61 	bl	800e5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd32:	f001 fc2f 	bl	800e594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd3e:	e011      	b.n	800cd64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d012      	beq.n	800cd6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3310      	adds	r3, #16
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fd05 	bl	800d75c <xTaskRemoveFromEventList>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd58:	f000 fddc 	bl	800d914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dce9      	bgt.n	800cd40 <prvUnlockQueue+0x60>
 800cd6c:	e000      	b.n	800cd70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	22ff      	movs	r2, #255	; 0xff
 800cd74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd78:	f001 fc3c 	bl	800e5f4 <vPortExitCritical>
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd8c:	f001 fc02 	bl	800e594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d102      	bne.n	800cd9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	e001      	b.n	800cda2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cda2:	f001 fc27 	bl	800e5f4 <vPortExitCritical>

	return xReturn;
 800cda6:	68fb      	ldr	r3, [r7, #12]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdb8:	f001 fbec 	bl	800e594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d102      	bne.n	800cdce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	e001      	b.n	800cdd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdd2:	f001 fc0f 	bl	800e5f4 <vPortExitCritical>

	return xReturn;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdea:	2300      	movs	r3, #0
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	e014      	b.n	800ce1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cdf0:	4a0f      	ldr	r2, [pc, #60]	; (800ce30 <vQueueAddToRegistry+0x50>)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10b      	bne.n	800ce14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cdfc:	490c      	ldr	r1, [pc, #48]	; (800ce30 <vQueueAddToRegistry+0x50>)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce06:	4a0a      	ldr	r2, [pc, #40]	; (800ce30 <vQueueAddToRegistry+0x50>)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	4413      	add	r3, r2
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce12:	e006      	b.n	800ce22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3301      	adds	r3, #1
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b07      	cmp	r3, #7
 800ce1e:	d9e7      	bls.n	800cdf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	2000104c 	.word	0x2000104c

0800ce34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce44:	f001 fba6 	bl	800e594 <vPortEnterCritical>
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce54:	d103      	bne.n	800ce5e <vQueueWaitForMessageRestricted+0x2a>
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce64:	b25b      	sxtb	r3, r3
 800ce66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6a:	d103      	bne.n	800ce74 <vQueueWaitForMessageRestricted+0x40>
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce74:	f001 fbbe 	bl	800e5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	3324      	adds	r3, #36	; 0x24
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	68b9      	ldr	r1, [r7, #8]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fc3b 	bl	800d704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce8e:	6978      	ldr	r0, [r7, #20]
 800ce90:	f7ff ff26 	bl	800cce0 <prvUnlockQueue>
	}
 800ce94:	bf00      	nop
 800ce96:	3718      	adds	r7, #24
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08e      	sub	sp, #56	; 0x38
 800cea0:	af04      	add	r7, sp, #16
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10a      	bne.n	800cec6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	623b      	str	r3, [r7, #32]
}
 800cec2:	bf00      	nop
 800cec4:	e7fe      	b.n	800cec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10a      	bne.n	800cee2 <xTaskCreateStatic+0x46>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	61fb      	str	r3, [r7, #28]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cee2:	235c      	movs	r3, #92	; 0x5c
 800cee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b5c      	cmp	r3, #92	; 0x5c
 800ceea:	d00a      	beq.n	800cf02 <xTaskCreateStatic+0x66>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	61bb      	str	r3, [r7, #24]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01e      	beq.n	800cf48 <xTaskCreateStatic+0xac>
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d01b      	beq.n	800cf48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf22:	2300      	movs	r3, #0
 800cf24:	9303      	str	r3, [sp, #12]
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	9302      	str	r3, [sp, #8]
 800cf2a:	f107 0314 	add.w	r3, r7, #20
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 f850 	bl	800cfe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf42:	f000 f8dd 	bl	800d100 <prvAddNewTaskToReadyList>
 800cf46:	e001      	b.n	800cf4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf4c:	697b      	ldr	r3, [r7, #20]
	}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3728      	adds	r7, #40	; 0x28
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b08c      	sub	sp, #48	; 0x30
 800cf5a:	af04      	add	r7, sp, #16
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	60b9      	str	r1, [r7, #8]
 800cf60:	603b      	str	r3, [r7, #0]
 800cf62:	4613      	mov	r3, r2
 800cf64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf66:	88fb      	ldrh	r3, [r7, #6]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f001 fc34 	bl	800e7d8 <pvPortMalloc>
 800cf70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00e      	beq.n	800cf96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf78:	205c      	movs	r0, #92	; 0x5c
 800cf7a:	f001 fc2d 	bl	800e7d8 <pvPortMalloc>
 800cf7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	631a      	str	r2, [r3, #48]	; 0x30
 800cf8c:	e005      	b.n	800cf9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf8e:	6978      	ldr	r0, [r7, #20]
 800cf90:	f001 fcee 	bl	800e970 <vPortFree>
 800cf94:	e001      	b.n	800cf9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d017      	beq.n	800cfd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfa8:	88fa      	ldrh	r2, [r7, #6]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68b9      	ldr	r1, [r7, #8]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 f80e 	bl	800cfe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfc4:	69f8      	ldr	r0, [r7, #28]
 800cfc6:	f000 f89b 	bl	800d100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	61bb      	str	r3, [r7, #24]
 800cfce:	e002      	b.n	800cfd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
	}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3720      	adds	r7, #32
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	461a      	mov	r2, r3
 800cff8:	21a5      	movs	r1, #165	; 0xa5
 800cffa:	f001 fe0b 	bl	800ec14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d008:	3b01      	subs	r3, #1
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	f023 0307 	bic.w	r3, r3, #7
 800d016:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	f003 0307 	and.w	r3, r3, #7
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00a      	beq.n	800d038 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	617b      	str	r3, [r7, #20]
}
 800d034:	bf00      	nop
 800d036:	e7fe      	b.n	800d036 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d01f      	beq.n	800d07e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d03e:	2300      	movs	r3, #0
 800d040:	61fb      	str	r3, [r7, #28]
 800d042:	e012      	b.n	800d06a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	4413      	add	r3, r2
 800d04a:	7819      	ldrb	r1, [r3, #0]
 800d04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	4413      	add	r3, r2
 800d052:	3334      	adds	r3, #52	; 0x34
 800d054:	460a      	mov	r2, r1
 800d056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	4413      	add	r3, r2
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d006      	beq.n	800d072 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	3301      	adds	r3, #1
 800d068:	61fb      	str	r3, [r7, #28]
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	2b0f      	cmp	r3, #15
 800d06e:	d9e9      	bls.n	800d044 <prvInitialiseNewTask+0x64>
 800d070:	e000      	b.n	800d074 <prvInitialiseNewTask+0x94>
			{
				break;
 800d072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d07c:	e003      	b.n	800d086 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	2b37      	cmp	r3, #55	; 0x37
 800d08a:	d901      	bls.n	800d090 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d08c:	2337      	movs	r3, #55	; 0x37
 800d08e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d094:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d09a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	2200      	movs	r2, #0
 800d0a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff f978 	bl	800c39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ae:	3318      	adds	r3, #24
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff f973 	bl	800c39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	68f9      	ldr	r1, [r7, #12]
 800d0de:	69b8      	ldr	r0, [r7, #24]
 800d0e0:	f001 f928 	bl	800e334 <pxPortInitialiseStack>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0f6:	bf00      	nop
 800d0f8:	3720      	adds	r7, #32
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d108:	f001 fa44 	bl	800e594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d10c:	4b2d      	ldr	r3, [pc, #180]	; (800d1c4 <prvAddNewTaskToReadyList+0xc4>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3301      	adds	r3, #1
 800d112:	4a2c      	ldr	r2, [pc, #176]	; (800d1c4 <prvAddNewTaskToReadyList+0xc4>)
 800d114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d116:	4b2c      	ldr	r3, [pc, #176]	; (800d1c8 <prvAddNewTaskToReadyList+0xc8>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d11e:	4a2a      	ldr	r2, [pc, #168]	; (800d1c8 <prvAddNewTaskToReadyList+0xc8>)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d124:	4b27      	ldr	r3, [pc, #156]	; (800d1c4 <prvAddNewTaskToReadyList+0xc4>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d110      	bne.n	800d14e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d12c:	f000 fc16 	bl	800d95c <prvInitialiseTaskLists>
 800d130:	e00d      	b.n	800d14e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d132:	4b26      	ldr	r3, [pc, #152]	; (800d1cc <prvAddNewTaskToReadyList+0xcc>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d109      	bne.n	800d14e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d13a:	4b23      	ldr	r3, [pc, #140]	; (800d1c8 <prvAddNewTaskToReadyList+0xc8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	429a      	cmp	r2, r3
 800d146:	d802      	bhi.n	800d14e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d148:	4a1f      	ldr	r2, [pc, #124]	; (800d1c8 <prvAddNewTaskToReadyList+0xc8>)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d14e:	4b20      	ldr	r3, [pc, #128]	; (800d1d0 <prvAddNewTaskToReadyList+0xd0>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	4a1e      	ldr	r2, [pc, #120]	; (800d1d0 <prvAddNewTaskToReadyList+0xd0>)
 800d156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d158:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <prvAddNewTaskToReadyList+0xd0>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d164:	4b1b      	ldr	r3, [pc, #108]	; (800d1d4 <prvAddNewTaskToReadyList+0xd4>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d903      	bls.n	800d174 <prvAddNewTaskToReadyList+0x74>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d170:	4a18      	ldr	r2, [pc, #96]	; (800d1d4 <prvAddNewTaskToReadyList+0xd4>)
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d178:	4613      	mov	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4a15      	ldr	r2, [pc, #84]	; (800d1d8 <prvAddNewTaskToReadyList+0xd8>)
 800d182:	441a      	add	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3304      	adds	r3, #4
 800d188:	4619      	mov	r1, r3
 800d18a:	4610      	mov	r0, r2
 800d18c:	f7ff f913 	bl	800c3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d190:	f001 fa30 	bl	800e5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d194:	4b0d      	ldr	r3, [pc, #52]	; (800d1cc <prvAddNewTaskToReadyList+0xcc>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00e      	beq.n	800d1ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <prvAddNewTaskToReadyList+0xc8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d207      	bcs.n	800d1ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1aa:	4b0c      	ldr	r3, [pc, #48]	; (800d1dc <prvAddNewTaskToReadyList+0xdc>)
 800d1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1ba:	bf00      	nop
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20001560 	.word	0x20001560
 800d1c8:	2000108c 	.word	0x2000108c
 800d1cc:	2000156c 	.word	0x2000156c
 800d1d0:	2000157c 	.word	0x2000157c
 800d1d4:	20001568 	.word	0x20001568
 800d1d8:	20001090 	.word	0x20001090
 800d1dc:	e000ed04 	.word	0xe000ed04

0800d1e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d017      	beq.n	800d222 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1f2:	4b13      	ldr	r3, [pc, #76]	; (800d240 <vTaskDelay+0x60>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <vTaskDelay+0x30>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	60bb      	str	r3, [r7, #8]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d210:	f000 f880 	bl	800d314 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d214:	2100      	movs	r1, #0
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fcea 	bl	800dbf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d21c:	f000 f888 	bl	800d330 <xTaskResumeAll>
 800d220:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d107      	bne.n	800d238 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d228:	4b06      	ldr	r3, [pc, #24]	; (800d244 <vTaskDelay+0x64>)
 800d22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d238:	bf00      	nop
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20001588 	.word	0x20001588
 800d244:	e000ed04 	.word	0xe000ed04

0800d248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08a      	sub	sp, #40	; 0x28
 800d24c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d252:	2300      	movs	r3, #0
 800d254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d256:	463a      	mov	r2, r7
 800d258:	1d39      	adds	r1, r7, #4
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	4618      	mov	r0, r3
 800d260:	f7ff f848 	bl	800c2f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	9202      	str	r2, [sp, #8]
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	2300      	movs	r3, #0
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	2300      	movs	r3, #0
 800d274:	460a      	mov	r2, r1
 800d276:	4921      	ldr	r1, [pc, #132]	; (800d2fc <vTaskStartScheduler+0xb4>)
 800d278:	4821      	ldr	r0, [pc, #132]	; (800d300 <vTaskStartScheduler+0xb8>)
 800d27a:	f7ff fe0f 	bl	800ce9c <xTaskCreateStatic>
 800d27e:	4603      	mov	r3, r0
 800d280:	4a20      	ldr	r2, [pc, #128]	; (800d304 <vTaskStartScheduler+0xbc>)
 800d282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d284:	4b1f      	ldr	r3, [pc, #124]	; (800d304 <vTaskStartScheduler+0xbc>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d28c:	2301      	movs	r3, #1
 800d28e:	617b      	str	r3, [r7, #20]
 800d290:	e001      	b.n	800d296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d292:	2300      	movs	r3, #0
 800d294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d102      	bne.n	800d2a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d29c:	f000 fcfc 	bl	800dc98 <xTimerCreateTimerTask>
 800d2a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d116      	bne.n	800d2d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	613b      	str	r3, [r7, #16]
}
 800d2ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2bc:	4b12      	ldr	r3, [pc, #72]	; (800d308 <vTaskStartScheduler+0xc0>)
 800d2be:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2c4:	4b11      	ldr	r3, [pc, #68]	; (800d30c <vTaskStartScheduler+0xc4>)
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2ca:	4b11      	ldr	r3, [pc, #68]	; (800d310 <vTaskStartScheduler+0xc8>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2d0:	f001 f8be 	bl	800e450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2d4:	e00e      	b.n	800d2f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2dc:	d10a      	bne.n	800d2f4 <vTaskStartScheduler+0xac>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	60fb      	str	r3, [r7, #12]
}
 800d2f0:	bf00      	nop
 800d2f2:	e7fe      	b.n	800d2f2 <vTaskStartScheduler+0xaa>
}
 800d2f4:	bf00      	nop
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	080102a0 	.word	0x080102a0
 800d300:	0800d92d 	.word	0x0800d92d
 800d304:	20001584 	.word	0x20001584
 800d308:	20001580 	.word	0x20001580
 800d30c:	2000156c 	.word	0x2000156c
 800d310:	20001564 	.word	0x20001564

0800d314 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d314:	b480      	push	{r7}
 800d316:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d318:	4b04      	ldr	r3, [pc, #16]	; (800d32c <vTaskSuspendAll+0x18>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3301      	adds	r3, #1
 800d31e:	4a03      	ldr	r2, [pc, #12]	; (800d32c <vTaskSuspendAll+0x18>)
 800d320:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d322:	bf00      	nop
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	20001588 	.word	0x20001588

0800d330 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d336:	2300      	movs	r3, #0
 800d338:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d33a:	2300      	movs	r3, #0
 800d33c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d33e:	4b42      	ldr	r3, [pc, #264]	; (800d448 <xTaskResumeAll+0x118>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10a      	bne.n	800d35c <xTaskResumeAll+0x2c>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	603b      	str	r3, [r7, #0]
}
 800d358:	bf00      	nop
 800d35a:	e7fe      	b.n	800d35a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d35c:	f001 f91a 	bl	800e594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d360:	4b39      	ldr	r3, [pc, #228]	; (800d448 <xTaskResumeAll+0x118>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3b01      	subs	r3, #1
 800d366:	4a38      	ldr	r2, [pc, #224]	; (800d448 <xTaskResumeAll+0x118>)
 800d368:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d36a:	4b37      	ldr	r3, [pc, #220]	; (800d448 <xTaskResumeAll+0x118>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d162      	bne.n	800d438 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d372:	4b36      	ldr	r3, [pc, #216]	; (800d44c <xTaskResumeAll+0x11c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d05e      	beq.n	800d438 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d37a:	e02f      	b.n	800d3dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d37c:	4b34      	ldr	r3, [pc, #208]	; (800d450 <xTaskResumeAll+0x120>)
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	3318      	adds	r3, #24
 800d388:	4618      	mov	r0, r3
 800d38a:	f7ff f871 	bl	800c470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3304      	adds	r3, #4
 800d392:	4618      	mov	r0, r3
 800d394:	f7ff f86c 	bl	800c470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39c:	4b2d      	ldr	r3, [pc, #180]	; (800d454 <xTaskResumeAll+0x124>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d903      	bls.n	800d3ac <xTaskResumeAll+0x7c>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	4a2a      	ldr	r2, [pc, #168]	; (800d454 <xTaskResumeAll+0x124>)
 800d3aa:	6013      	str	r3, [r2, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4a27      	ldr	r2, [pc, #156]	; (800d458 <xTaskResumeAll+0x128>)
 800d3ba:	441a      	add	r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	f7fe fff7 	bl	800c3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3cc:	4b23      	ldr	r3, [pc, #140]	; (800d45c <xTaskResumeAll+0x12c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d302      	bcc.n	800d3dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3d6:	4b22      	ldr	r3, [pc, #136]	; (800d460 <xTaskResumeAll+0x130>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3dc:	4b1c      	ldr	r3, [pc, #112]	; (800d450 <xTaskResumeAll+0x120>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1cb      	bne.n	800d37c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d001      	beq.n	800d3ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d3ea:	f000 fb55 	bl	800da98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3ee:	4b1d      	ldr	r3, [pc, #116]	; (800d464 <xTaskResumeAll+0x134>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d010      	beq.n	800d41c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3fa:	f000 f847 	bl	800d48c <xTaskIncrementTick>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d404:	4b16      	ldr	r3, [pc, #88]	; (800d460 <xTaskResumeAll+0x130>)
 800d406:	2201      	movs	r2, #1
 800d408:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1f1      	bne.n	800d3fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <xTaskResumeAll+0x134>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <xTaskResumeAll+0x130>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d009      	beq.n	800d438 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d424:	2301      	movs	r3, #1
 800d426:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d428:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <xTaskResumeAll+0x138>)
 800d42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d438:	f001 f8dc 	bl	800e5f4 <vPortExitCritical>

	return xAlreadyYielded;
 800d43c:	68bb      	ldr	r3, [r7, #8]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	20001588 	.word	0x20001588
 800d44c:	20001560 	.word	0x20001560
 800d450:	20001520 	.word	0x20001520
 800d454:	20001568 	.word	0x20001568
 800d458:	20001090 	.word	0x20001090
 800d45c:	2000108c 	.word	0x2000108c
 800d460:	20001574 	.word	0x20001574
 800d464:	20001570 	.word	0x20001570
 800d468:	e000ed04 	.word	0xe000ed04

0800d46c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <xTaskGetTickCount+0x1c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d478:	687b      	ldr	r3, [r7, #4]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	20001564 	.word	0x20001564

0800d48c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b086      	sub	sp, #24
 800d490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d492:	2300      	movs	r3, #0
 800d494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d496:	4b4f      	ldr	r3, [pc, #316]	; (800d5d4 <xTaskIncrementTick+0x148>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f040 808f 	bne.w	800d5be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4a0:	4b4d      	ldr	r3, [pc, #308]	; (800d5d8 <xTaskIncrementTick+0x14c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4a8:	4a4b      	ldr	r2, [pc, #300]	; (800d5d8 <xTaskIncrementTick+0x14c>)
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d120      	bne.n	800d4f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4b4:	4b49      	ldr	r3, [pc, #292]	; (800d5dc <xTaskIncrementTick+0x150>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	603b      	str	r3, [r7, #0]
}
 800d4d0:	bf00      	nop
 800d4d2:	e7fe      	b.n	800d4d2 <xTaskIncrementTick+0x46>
 800d4d4:	4b41      	ldr	r3, [pc, #260]	; (800d5dc <xTaskIncrementTick+0x150>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	60fb      	str	r3, [r7, #12]
 800d4da:	4b41      	ldr	r3, [pc, #260]	; (800d5e0 <xTaskIncrementTick+0x154>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a3f      	ldr	r2, [pc, #252]	; (800d5dc <xTaskIncrementTick+0x150>)
 800d4e0:	6013      	str	r3, [r2, #0]
 800d4e2:	4a3f      	ldr	r2, [pc, #252]	; (800d5e0 <xTaskIncrementTick+0x154>)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	4b3e      	ldr	r3, [pc, #248]	; (800d5e4 <xTaskIncrementTick+0x158>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	4a3d      	ldr	r2, [pc, #244]	; (800d5e4 <xTaskIncrementTick+0x158>)
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	f000 fad1 	bl	800da98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4f6:	4b3c      	ldr	r3, [pc, #240]	; (800d5e8 <xTaskIncrementTick+0x15c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d349      	bcc.n	800d594 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d500:	4b36      	ldr	r3, [pc, #216]	; (800d5dc <xTaskIncrementTick+0x150>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d50a:	4b37      	ldr	r3, [pc, #220]	; (800d5e8 <xTaskIncrementTick+0x15c>)
 800d50c:	f04f 32ff 	mov.w	r2, #4294967295
 800d510:	601a      	str	r2, [r3, #0]
					break;
 800d512:	e03f      	b.n	800d594 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d514:	4b31      	ldr	r3, [pc, #196]	; (800d5dc <xTaskIncrementTick+0x150>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d203      	bcs.n	800d534 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d52c:	4a2e      	ldr	r2, [pc, #184]	; (800d5e8 <xTaskIncrementTick+0x15c>)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d532:	e02f      	b.n	800d594 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	3304      	adds	r3, #4
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe ff99 	bl	800c470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d542:	2b00      	cmp	r3, #0
 800d544:	d004      	beq.n	800d550 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	3318      	adds	r3, #24
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fe ff90 	bl	800c470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d554:	4b25      	ldr	r3, [pc, #148]	; (800d5ec <xTaskIncrementTick+0x160>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d903      	bls.n	800d564 <xTaskIncrementTick+0xd8>
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d560:	4a22      	ldr	r2, [pc, #136]	; (800d5ec <xTaskIncrementTick+0x160>)
 800d562:	6013      	str	r3, [r2, #0]
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d568:	4613      	mov	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4413      	add	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4a1f      	ldr	r2, [pc, #124]	; (800d5f0 <xTaskIncrementTick+0x164>)
 800d572:	441a      	add	r2, r3
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	3304      	adds	r3, #4
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f7fe ff1b 	bl	800c3b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d584:	4b1b      	ldr	r3, [pc, #108]	; (800d5f4 <xTaskIncrementTick+0x168>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d3b8      	bcc.n	800d500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d58e:	2301      	movs	r3, #1
 800d590:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d592:	e7b5      	b.n	800d500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d594:	4b17      	ldr	r3, [pc, #92]	; (800d5f4 <xTaskIncrementTick+0x168>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59a:	4915      	ldr	r1, [pc, #84]	; (800d5f0 <xTaskIncrementTick+0x164>)
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	440b      	add	r3, r1
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d901      	bls.n	800d5b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5b0:	4b11      	ldr	r3, [pc, #68]	; (800d5f8 <xTaskIncrementTick+0x16c>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d007      	beq.n	800d5c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e004      	b.n	800d5c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5be:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <xTaskIncrementTick+0x170>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	4a0d      	ldr	r2, [pc, #52]	; (800d5fc <xTaskIncrementTick+0x170>)
 800d5c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5c8:	697b      	ldr	r3, [r7, #20]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20001588 	.word	0x20001588
 800d5d8:	20001564 	.word	0x20001564
 800d5dc:	20001518 	.word	0x20001518
 800d5e0:	2000151c 	.word	0x2000151c
 800d5e4:	20001578 	.word	0x20001578
 800d5e8:	20001580 	.word	0x20001580
 800d5ec:	20001568 	.word	0x20001568
 800d5f0:	20001090 	.word	0x20001090
 800d5f4:	2000108c 	.word	0x2000108c
 800d5f8:	20001574 	.word	0x20001574
 800d5fc:	20001570 	.word	0x20001570

0800d600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d606:	4b28      	ldr	r3, [pc, #160]	; (800d6a8 <vTaskSwitchContext+0xa8>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d60e:	4b27      	ldr	r3, [pc, #156]	; (800d6ac <vTaskSwitchContext+0xac>)
 800d610:	2201      	movs	r2, #1
 800d612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d614:	e041      	b.n	800d69a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d616:	4b25      	ldr	r3, [pc, #148]	; (800d6ac <vTaskSwitchContext+0xac>)
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61c:	4b24      	ldr	r3, [pc, #144]	; (800d6b0 <vTaskSwitchContext+0xb0>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	60fb      	str	r3, [r7, #12]
 800d622:	e010      	b.n	800d646 <vTaskSwitchContext+0x46>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <vTaskSwitchContext+0x40>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	607b      	str	r3, [r7, #4]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <vTaskSwitchContext+0x3e>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3b01      	subs	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	491b      	ldr	r1, [pc, #108]	; (800d6b4 <vTaskSwitchContext+0xb4>)
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	440b      	add	r3, r1
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0e4      	beq.n	800d624 <vTaskSwitchContext+0x24>
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	4613      	mov	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4a13      	ldr	r2, [pc, #76]	; (800d6b4 <vTaskSwitchContext+0xb4>)
 800d666:	4413      	add	r3, r2
 800d668:	60bb      	str	r3, [r7, #8]
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	605a      	str	r2, [r3, #4]
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	3308      	adds	r3, #8
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d104      	bne.n	800d68a <vTaskSwitchContext+0x8a>
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	605a      	str	r2, [r3, #4]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	4a09      	ldr	r2, [pc, #36]	; (800d6b8 <vTaskSwitchContext+0xb8>)
 800d692:	6013      	str	r3, [r2, #0]
 800d694:	4a06      	ldr	r2, [pc, #24]	; (800d6b0 <vTaskSwitchContext+0xb0>)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6013      	str	r3, [r2, #0]
}
 800d69a:	bf00      	nop
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	20001588 	.word	0x20001588
 800d6ac:	20001574 	.word	0x20001574
 800d6b0:	20001568 	.word	0x20001568
 800d6b4:	20001090 	.word	0x20001090
 800d6b8:	2000108c 	.word	0x2000108c

0800d6bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10a      	bne.n	800d6e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	60fb      	str	r3, [r7, #12]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6e2:	4b07      	ldr	r3, [pc, #28]	; (800d700 <vTaskPlaceOnEventList+0x44>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3318      	adds	r3, #24
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7fe fe87 	bl	800c3fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	6838      	ldr	r0, [r7, #0]
 800d6f4:	f000 fa7c 	bl	800dbf0 <prvAddCurrentTaskToDelayedList>
}
 800d6f8:	bf00      	nop
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	2000108c 	.word	0x2000108c

0800d704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10a      	bne.n	800d72c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	617b      	str	r3, [r7, #20]
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d72c:	4b0a      	ldr	r3, [pc, #40]	; (800d758 <vTaskPlaceOnEventListRestricted+0x54>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3318      	adds	r3, #24
 800d732:	4619      	mov	r1, r3
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7fe fe3e 	bl	800c3b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d740:	f04f 33ff 	mov.w	r3, #4294967295
 800d744:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	68b8      	ldr	r0, [r7, #8]
 800d74a:	f000 fa51 	bl	800dbf0 <prvAddCurrentTaskToDelayedList>
	}
 800d74e:	bf00      	nop
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	2000108c 	.word	0x2000108c

0800d75c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10a      	bne.n	800d788 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	60fb      	str	r3, [r7, #12]
}
 800d784:	bf00      	nop
 800d786:	e7fe      	b.n	800d786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	3318      	adds	r3, #24
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fe6f 	bl	800c470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d792:	4b1e      	ldr	r3, [pc, #120]	; (800d80c <xTaskRemoveFromEventList+0xb0>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d11d      	bne.n	800d7d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	3304      	adds	r3, #4
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fe fe66 	bl	800c470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a8:	4b19      	ldr	r3, [pc, #100]	; (800d810 <xTaskRemoveFromEventList+0xb4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d903      	bls.n	800d7b8 <xTaskRemoveFromEventList+0x5c>
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	4a16      	ldr	r2, [pc, #88]	; (800d810 <xTaskRemoveFromEventList+0xb4>)
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4a13      	ldr	r2, [pc, #76]	; (800d814 <xTaskRemoveFromEventList+0xb8>)
 800d7c6:	441a      	add	r2, r3
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	f7fe fdf1 	bl	800c3b6 <vListInsertEnd>
 800d7d4:	e005      	b.n	800d7e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3318      	adds	r3, #24
 800d7da:	4619      	mov	r1, r3
 800d7dc:	480e      	ldr	r0, [pc, #56]	; (800d818 <xTaskRemoveFromEventList+0xbc>)
 800d7de:	f7fe fdea 	bl	800c3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e6:	4b0d      	ldr	r3, [pc, #52]	; (800d81c <xTaskRemoveFromEventList+0xc0>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d905      	bls.n	800d7fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d7f4:	4b0a      	ldr	r3, [pc, #40]	; (800d820 <xTaskRemoveFromEventList+0xc4>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	e001      	b.n	800d800 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d800:	697b      	ldr	r3, [r7, #20]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3718      	adds	r7, #24
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20001588 	.word	0x20001588
 800d810:	20001568 	.word	0x20001568
 800d814:	20001090 	.word	0x20001090
 800d818:	20001520 	.word	0x20001520
 800d81c:	2000108c 	.word	0x2000108c
 800d820:	20001574 	.word	0x20001574

0800d824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d82c:	4b06      	ldr	r3, [pc, #24]	; (800d848 <vTaskInternalSetTimeOutState+0x24>)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d834:	4b05      	ldr	r3, [pc, #20]	; (800d84c <vTaskInternalSetTimeOutState+0x28>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	605a      	str	r2, [r3, #4]
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	20001578 	.word	0x20001578
 800d84c:	20001564 	.word	0x20001564

0800d850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10a      	bne.n	800d876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	613b      	str	r3, [r7, #16]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10a      	bne.n	800d892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	60fb      	str	r3, [r7, #12]
}
 800d88e:	bf00      	nop
 800d890:	e7fe      	b.n	800d890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d892:	f000 fe7f 	bl	800e594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d896:	4b1d      	ldr	r3, [pc, #116]	; (800d90c <xTaskCheckForTimeOut+0xbc>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	69ba      	ldr	r2, [r7, #24]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ae:	d102      	bne.n	800d8b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61fb      	str	r3, [r7, #28]
 800d8b4:	e023      	b.n	800d8fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	4b15      	ldr	r3, [pc, #84]	; (800d910 <xTaskCheckForTimeOut+0xc0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d007      	beq.n	800d8d2 <xTaskCheckForTimeOut+0x82>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d302      	bcc.n	800d8d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	61fb      	str	r3, [r7, #28]
 800d8d0:	e015      	b.n	800d8fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d20b      	bcs.n	800d8f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	1ad2      	subs	r2, r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7ff ff9b 	bl	800d824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	e004      	b.n	800d8fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d8fe:	f000 fe79 	bl	800e5f4 <vPortExitCritical>

	return xReturn;
 800d902:	69fb      	ldr	r3, [r7, #28]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	20001564 	.word	0x20001564
 800d910:	20001578 	.word	0x20001578

0800d914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d914:	b480      	push	{r7}
 800d916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d918:	4b03      	ldr	r3, [pc, #12]	; (800d928 <vTaskMissedYield+0x14>)
 800d91a:	2201      	movs	r2, #1
 800d91c:	601a      	str	r2, [r3, #0]
}
 800d91e:	bf00      	nop
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	20001574 	.word	0x20001574

0800d92c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d934:	f000 f852 	bl	800d9dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d938:	4b06      	ldr	r3, [pc, #24]	; (800d954 <prvIdleTask+0x28>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d9f9      	bls.n	800d934 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d940:	4b05      	ldr	r3, [pc, #20]	; (800d958 <prvIdleTask+0x2c>)
 800d942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d950:	e7f0      	b.n	800d934 <prvIdleTask+0x8>
 800d952:	bf00      	nop
 800d954:	20001090 	.word	0x20001090
 800d958:	e000ed04 	.word	0xe000ed04

0800d95c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d962:	2300      	movs	r3, #0
 800d964:	607b      	str	r3, [r7, #4]
 800d966:	e00c      	b.n	800d982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	4613      	mov	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4a12      	ldr	r2, [pc, #72]	; (800d9bc <prvInitialiseTaskLists+0x60>)
 800d974:	4413      	add	r3, r2
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe fcf0 	bl	800c35c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	3301      	adds	r3, #1
 800d980:	607b      	str	r3, [r7, #4]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b37      	cmp	r3, #55	; 0x37
 800d986:	d9ef      	bls.n	800d968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d988:	480d      	ldr	r0, [pc, #52]	; (800d9c0 <prvInitialiseTaskLists+0x64>)
 800d98a:	f7fe fce7 	bl	800c35c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d98e:	480d      	ldr	r0, [pc, #52]	; (800d9c4 <prvInitialiseTaskLists+0x68>)
 800d990:	f7fe fce4 	bl	800c35c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d994:	480c      	ldr	r0, [pc, #48]	; (800d9c8 <prvInitialiseTaskLists+0x6c>)
 800d996:	f7fe fce1 	bl	800c35c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d99a:	480c      	ldr	r0, [pc, #48]	; (800d9cc <prvInitialiseTaskLists+0x70>)
 800d99c:	f7fe fcde 	bl	800c35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9a0:	480b      	ldr	r0, [pc, #44]	; (800d9d0 <prvInitialiseTaskLists+0x74>)
 800d9a2:	f7fe fcdb 	bl	800c35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9a6:	4b0b      	ldr	r3, [pc, #44]	; (800d9d4 <prvInitialiseTaskLists+0x78>)
 800d9a8:	4a05      	ldr	r2, [pc, #20]	; (800d9c0 <prvInitialiseTaskLists+0x64>)
 800d9aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9ac:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <prvInitialiseTaskLists+0x7c>)
 800d9ae:	4a05      	ldr	r2, [pc, #20]	; (800d9c4 <prvInitialiseTaskLists+0x68>)
 800d9b0:	601a      	str	r2, [r3, #0]
}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	20001090 	.word	0x20001090
 800d9c0:	200014f0 	.word	0x200014f0
 800d9c4:	20001504 	.word	0x20001504
 800d9c8:	20001520 	.word	0x20001520
 800d9cc:	20001534 	.word	0x20001534
 800d9d0:	2000154c 	.word	0x2000154c
 800d9d4:	20001518 	.word	0x20001518
 800d9d8:	2000151c 	.word	0x2000151c

0800d9dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9e2:	e019      	b.n	800da18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d9e4:	f000 fdd6 	bl	800e594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e8:	4b10      	ldr	r3, [pc, #64]	; (800da2c <prvCheckTasksWaitingTermination+0x50>)
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3304      	adds	r3, #4
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe fd3b 	bl	800c470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d9fa:	4b0d      	ldr	r3, [pc, #52]	; (800da30 <prvCheckTasksWaitingTermination+0x54>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3b01      	subs	r3, #1
 800da00:	4a0b      	ldr	r2, [pc, #44]	; (800da30 <prvCheckTasksWaitingTermination+0x54>)
 800da02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da04:	4b0b      	ldr	r3, [pc, #44]	; (800da34 <prvCheckTasksWaitingTermination+0x58>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3b01      	subs	r3, #1
 800da0a:	4a0a      	ldr	r2, [pc, #40]	; (800da34 <prvCheckTasksWaitingTermination+0x58>)
 800da0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da0e:	f000 fdf1 	bl	800e5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f810 	bl	800da38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da18:	4b06      	ldr	r3, [pc, #24]	; (800da34 <prvCheckTasksWaitingTermination+0x58>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e1      	bne.n	800d9e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da20:	bf00      	nop
 800da22:	bf00      	nop
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20001534 	.word	0x20001534
 800da30:	20001560 	.word	0x20001560
 800da34:	20001548 	.word	0x20001548

0800da38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da46:	2b00      	cmp	r3, #0
 800da48:	d108      	bne.n	800da5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da4e:	4618      	mov	r0, r3
 800da50:	f000 ff8e 	bl	800e970 <vPortFree>
				vPortFree( pxTCB );
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 ff8b 	bl	800e970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da5a:	e018      	b.n	800da8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da62:	2b01      	cmp	r3, #1
 800da64:	d103      	bne.n	800da6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 ff82 	bl	800e970 <vPortFree>
	}
 800da6c:	e00f      	b.n	800da8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da74:	2b02      	cmp	r3, #2
 800da76:	d00a      	beq.n	800da8e <prvDeleteTCB+0x56>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	60fb      	str	r3, [r7, #12]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <prvDeleteTCB+0x54>
	}
 800da8e:	bf00      	nop
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
	...

0800da98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da9e:	4b0c      	ldr	r3, [pc, #48]	; (800dad0 <prvResetNextTaskUnblockTime+0x38>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d104      	bne.n	800dab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daa8:	4b0a      	ldr	r3, [pc, #40]	; (800dad4 <prvResetNextTaskUnblockTime+0x3c>)
 800daaa:	f04f 32ff 	mov.w	r2, #4294967295
 800daae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dab0:	e008      	b.n	800dac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab2:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <prvResetNextTaskUnblockTime+0x38>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4a04      	ldr	r2, [pc, #16]	; (800dad4 <prvResetNextTaskUnblockTime+0x3c>)
 800dac2:	6013      	str	r3, [r2, #0]
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	20001518 	.word	0x20001518
 800dad4:	20001580 	.word	0x20001580

0800dad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dade:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <xTaskGetSchedulerState+0x34>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dae6:	2301      	movs	r3, #1
 800dae8:	607b      	str	r3, [r7, #4]
 800daea:	e008      	b.n	800dafe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daec:	4b08      	ldr	r3, [pc, #32]	; (800db10 <xTaskGetSchedulerState+0x38>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d102      	bne.n	800dafa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800daf4:	2302      	movs	r3, #2
 800daf6:	607b      	str	r3, [r7, #4]
 800daf8:	e001      	b.n	800dafe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dafa:	2300      	movs	r3, #0
 800dafc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dafe:	687b      	ldr	r3, [r7, #4]
	}
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	2000156c 	.word	0x2000156c
 800db10:	20001588 	.word	0x20001588

0800db14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db20:	2300      	movs	r3, #0
 800db22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d056      	beq.n	800dbd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db2a:	4b2e      	ldr	r3, [pc, #184]	; (800dbe4 <xTaskPriorityDisinherit+0xd0>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	429a      	cmp	r2, r3
 800db32:	d00a      	beq.n	800db4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	60fb      	str	r3, [r7, #12]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d10a      	bne.n	800db68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	60bb      	str	r3, [r7, #8]
}
 800db64:	bf00      	nop
 800db66:	e7fe      	b.n	800db66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db6c:	1e5a      	subs	r2, r3, #1
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d02c      	beq.n	800dbd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db82:	2b00      	cmp	r3, #0
 800db84:	d128      	bne.n	800dbd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	3304      	adds	r3, #4
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe fc70 	bl	800c470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba8:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <xTaskPriorityDisinherit+0xd4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d903      	bls.n	800dbb8 <xTaskPriorityDisinherit+0xa4>
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	4a0c      	ldr	r2, [pc, #48]	; (800dbe8 <xTaskPriorityDisinherit+0xd4>)
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4a09      	ldr	r2, [pc, #36]	; (800dbec <xTaskPriorityDisinherit+0xd8>)
 800dbc6:	441a      	add	r2, r3
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	3304      	adds	r3, #4
 800dbcc:	4619      	mov	r1, r3
 800dbce:	4610      	mov	r0, r2
 800dbd0:	f7fe fbf1 	bl	800c3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbd8:	697b      	ldr	r3, [r7, #20]
	}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3718      	adds	r7, #24
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	2000108c 	.word	0x2000108c
 800dbe8:	20001568 	.word	0x20001568
 800dbec:	20001090 	.word	0x20001090

0800dbf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbfa:	4b21      	ldr	r3, [pc, #132]	; (800dc80 <prvAddCurrentTaskToDelayedList+0x90>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc00:	4b20      	ldr	r3, [pc, #128]	; (800dc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3304      	adds	r3, #4
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe fc32 	bl	800c470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc12:	d10a      	bne.n	800dc2a <prvAddCurrentTaskToDelayedList+0x3a>
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d007      	beq.n	800dc2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc1a:	4b1a      	ldr	r3, [pc, #104]	; (800dc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	3304      	adds	r3, #4
 800dc20:	4619      	mov	r1, r3
 800dc22:	4819      	ldr	r0, [pc, #100]	; (800dc88 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc24:	f7fe fbc7 	bl	800c3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc28:	e026      	b.n	800dc78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4413      	add	r3, r2
 800dc30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc32:	4b14      	ldr	r3, [pc, #80]	; (800dc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d209      	bcs.n	800dc56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3304      	adds	r3, #4
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	f7fe fbd5 	bl	800c3fe <vListInsert>
}
 800dc54:	e010      	b.n	800dc78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc56:	4b0e      	ldr	r3, [pc, #56]	; (800dc90 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4619      	mov	r1, r3
 800dc62:	4610      	mov	r0, r2
 800dc64:	f7fe fbcb 	bl	800c3fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc68:	4b0a      	ldr	r3, [pc, #40]	; (800dc94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d202      	bcs.n	800dc78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc72:	4a08      	ldr	r2, [pc, #32]	; (800dc94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	6013      	str	r3, [r2, #0]
}
 800dc78:	bf00      	nop
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	20001564 	.word	0x20001564
 800dc84:	2000108c 	.word	0x2000108c
 800dc88:	2000154c 	.word	0x2000154c
 800dc8c:	2000151c 	.word	0x2000151c
 800dc90:	20001518 	.word	0x20001518
 800dc94:	20001580 	.word	0x20001580

0800dc98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08a      	sub	sp, #40	; 0x28
 800dc9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dca2:	f000 fb07 	bl	800e2b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dca6:	4b1c      	ldr	r3, [pc, #112]	; (800dd18 <xTimerCreateTimerTask+0x80>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d021      	beq.n	800dcf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dcb6:	1d3a      	adds	r2, r7, #4
 800dcb8:	f107 0108 	add.w	r1, r7, #8
 800dcbc:	f107 030c 	add.w	r3, r7, #12
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe fb31 	bl	800c328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	9202      	str	r2, [sp, #8]
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	460a      	mov	r2, r1
 800dcd8:	4910      	ldr	r1, [pc, #64]	; (800dd1c <xTimerCreateTimerTask+0x84>)
 800dcda:	4811      	ldr	r0, [pc, #68]	; (800dd20 <xTimerCreateTimerTask+0x88>)
 800dcdc:	f7ff f8de 	bl	800ce9c <xTaskCreateStatic>
 800dce0:	4603      	mov	r3, r0
 800dce2:	4a10      	ldr	r2, [pc, #64]	; (800dd24 <xTimerCreateTimerTask+0x8c>)
 800dce4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dce6:	4b0f      	ldr	r3, [pc, #60]	; (800dd24 <xTimerCreateTimerTask+0x8c>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10a      	bne.n	800dd0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	613b      	str	r3, [r7, #16]
}
 800dd0a:	bf00      	nop
 800dd0c:	e7fe      	b.n	800dd0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd0e:	697b      	ldr	r3, [r7, #20]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	200015bc 	.word	0x200015bc
 800dd1c:	080102a8 	.word	0x080102a8
 800dd20:	0800de5d 	.word	0x0800de5d
 800dd24:	200015c0 	.word	0x200015c0

0800dd28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]
 800dd34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10a      	bne.n	800dd56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	623b      	str	r3, [r7, #32]
}
 800dd52:	bf00      	nop
 800dd54:	e7fe      	b.n	800dd54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd56:	4b1a      	ldr	r3, [pc, #104]	; (800ddc0 <xTimerGenericCommand+0x98>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d02a      	beq.n	800ddb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	2b05      	cmp	r3, #5
 800dd6e:	dc18      	bgt.n	800dda2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd70:	f7ff feb2 	bl	800dad8 <xTaskGetSchedulerState>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d109      	bne.n	800dd8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd7a:	4b11      	ldr	r3, [pc, #68]	; (800ddc0 <xTimerGenericCommand+0x98>)
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	f107 0110 	add.w	r1, r7, #16
 800dd82:	2300      	movs	r3, #0
 800dd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd86:	f7fe fca1 	bl	800c6cc <xQueueGenericSend>
 800dd8a:	6278      	str	r0, [r7, #36]	; 0x24
 800dd8c:	e012      	b.n	800ddb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd8e:	4b0c      	ldr	r3, [pc, #48]	; (800ddc0 <xTimerGenericCommand+0x98>)
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	f107 0110 	add.w	r1, r7, #16
 800dd96:	2300      	movs	r3, #0
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f7fe fc97 	bl	800c6cc <xQueueGenericSend>
 800dd9e:	6278      	str	r0, [r7, #36]	; 0x24
 800dda0:	e008      	b.n	800ddb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dda2:	4b07      	ldr	r3, [pc, #28]	; (800ddc0 <xTimerGenericCommand+0x98>)
 800dda4:	6818      	ldr	r0, [r3, #0]
 800dda6:	f107 0110 	add.w	r1, r7, #16
 800ddaa:	2300      	movs	r3, #0
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	f7fe fd8b 	bl	800c8c8 <xQueueGenericSendFromISR>
 800ddb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3728      	adds	r7, #40	; 0x28
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200015bc 	.word	0x200015bc

0800ddc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddce:	4b22      	ldr	r3, [pc, #136]	; (800de58 <prvProcessExpiredTimer+0x94>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	3304      	adds	r3, #4
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fe fb47 	bl	800c470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde8:	f003 0304 	and.w	r3, r3, #4
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d022      	beq.n	800de36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	699a      	ldr	r2, [r3, #24]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	18d1      	adds	r1, r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	6978      	ldr	r0, [r7, #20]
 800ddfe:	f000 f8d1 	bl	800dfa4 <prvInsertTimerInActiveList>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d01f      	beq.n	800de48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de08:	2300      	movs	r3, #0
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	2300      	movs	r3, #0
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	2100      	movs	r1, #0
 800de12:	6978      	ldr	r0, [r7, #20]
 800de14:	f7ff ff88 	bl	800dd28 <xTimerGenericCommand>
 800de18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d113      	bne.n	800de48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	60fb      	str	r3, [r7, #12]
}
 800de32:	bf00      	nop
 800de34:	e7fe      	b.n	800de34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de3c:	f023 0301 	bic.w	r3, r3, #1
 800de40:	b2da      	uxtb	r2, r3
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	6978      	ldr	r0, [r7, #20]
 800de4e:	4798      	blx	r3
}
 800de50:	bf00      	nop
 800de52:	3718      	adds	r7, #24
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	200015b4 	.word	0x200015b4

0800de5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de64:	f107 0308 	add.w	r3, r7, #8
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 f857 	bl	800df1c <prvGetNextExpireTime>
 800de6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4619      	mov	r1, r3
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f000 f803 	bl	800de80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de7a:	f000 f8d5 	bl	800e028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de7e:	e7f1      	b.n	800de64 <prvTimerTask+0x8>

0800de80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de8a:	f7ff fa43 	bl	800d314 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de8e:	f107 0308 	add.w	r3, r7, #8
 800de92:	4618      	mov	r0, r3
 800de94:	f000 f866 	bl	800df64 <prvSampleTimeNow>
 800de98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d130      	bne.n	800df02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10a      	bne.n	800debc <prvProcessTimerOrBlockTask+0x3c>
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d806      	bhi.n	800debc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800deae:	f7ff fa3f 	bl	800d330 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deb2:	68f9      	ldr	r1, [r7, #12]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff ff85 	bl	800ddc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800deba:	e024      	b.n	800df06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d008      	beq.n	800ded4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dec2:	4b13      	ldr	r3, [pc, #76]	; (800df10 <prvProcessTimerOrBlockTask+0x90>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d101      	bne.n	800ded0 <prvProcessTimerOrBlockTask+0x50>
 800decc:	2301      	movs	r3, #1
 800dece:	e000      	b.n	800ded2 <prvProcessTimerOrBlockTask+0x52>
 800ded0:	2300      	movs	r3, #0
 800ded2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ded4:	4b0f      	ldr	r3, [pc, #60]	; (800df14 <prvProcessTimerOrBlockTask+0x94>)
 800ded6:	6818      	ldr	r0, [r3, #0]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	4619      	mov	r1, r3
 800dee2:	f7fe ffa7 	bl	800ce34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dee6:	f7ff fa23 	bl	800d330 <xTaskResumeAll>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10a      	bne.n	800df06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800def0:	4b09      	ldr	r3, [pc, #36]	; (800df18 <prvProcessTimerOrBlockTask+0x98>)
 800def2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	f3bf 8f6f 	isb	sy
}
 800df00:	e001      	b.n	800df06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df02:	f7ff fa15 	bl	800d330 <xTaskResumeAll>
}
 800df06:	bf00      	nop
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	200015b8 	.word	0x200015b8
 800df14:	200015bc 	.word	0x200015bc
 800df18:	e000ed04 	.word	0xe000ed04

0800df1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df24:	4b0e      	ldr	r3, [pc, #56]	; (800df60 <prvGetNextExpireTime+0x44>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d101      	bne.n	800df32 <prvGetNextExpireTime+0x16>
 800df2e:	2201      	movs	r2, #1
 800df30:	e000      	b.n	800df34 <prvGetNextExpireTime+0x18>
 800df32:	2200      	movs	r2, #0
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d105      	bne.n	800df4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df40:	4b07      	ldr	r3, [pc, #28]	; (800df60 <prvGetNextExpireTime+0x44>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	60fb      	str	r3, [r7, #12]
 800df4a:	e001      	b.n	800df50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df4c:	2300      	movs	r3, #0
 800df4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df50:	68fb      	ldr	r3, [r7, #12]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop
 800df60:	200015b4 	.word	0x200015b4

0800df64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df6c:	f7ff fa7e 	bl	800d46c <xTaskGetTickCount>
 800df70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df72:	4b0b      	ldr	r3, [pc, #44]	; (800dfa0 <prvSampleTimeNow+0x3c>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d205      	bcs.n	800df88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df7c:	f000 f936 	bl	800e1ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	e002      	b.n	800df8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df8e:	4a04      	ldr	r2, [pc, #16]	; (800dfa0 <prvSampleTimeNow+0x3c>)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df94:	68fb      	ldr	r3, [r7, #12]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	200015c4 	.word	0x200015c4

0800dfa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
 800dfb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d812      	bhi.n	800dff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	1ad2      	subs	r2, r2, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d302      	bcc.n	800dfde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	617b      	str	r3, [r7, #20]
 800dfdc:	e01b      	b.n	800e016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dfde:	4b10      	ldr	r3, [pc, #64]	; (800e020 <prvInsertTimerInActiveList+0x7c>)
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7fe fa08 	bl	800c3fe <vListInsert>
 800dfee:	e012      	b.n	800e016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d206      	bcs.n	800e006 <prvInsertTimerInActiveList+0x62>
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d302      	bcc.n	800e006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e000:	2301      	movs	r3, #1
 800e002:	617b      	str	r3, [r7, #20]
 800e004:	e007      	b.n	800e016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e006:	4b07      	ldr	r3, [pc, #28]	; (800e024 <prvInsertTimerInActiveList+0x80>)
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3304      	adds	r3, #4
 800e00e:	4619      	mov	r1, r3
 800e010:	4610      	mov	r0, r2
 800e012:	f7fe f9f4 	bl	800c3fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e016:	697b      	ldr	r3, [r7, #20]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	200015b8 	.word	0x200015b8
 800e024:	200015b4 	.word	0x200015b4

0800e028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08e      	sub	sp, #56	; 0x38
 800e02c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e02e:	e0ca      	b.n	800e1c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	da18      	bge.n	800e068 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e036:	1d3b      	adds	r3, r7, #4
 800e038:	3304      	adds	r3, #4
 800e03a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10a      	bne.n	800e058 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	61fb      	str	r3, [r7, #28]
}
 800e054:	bf00      	nop
 800e056:	e7fe      	b.n	800e056 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e05e:	6850      	ldr	r0, [r2, #4]
 800e060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e062:	6892      	ldr	r2, [r2, #8]
 800e064:	4611      	mov	r1, r2
 800e066:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f2c0 80ab 	blt.w	800e1c6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d004      	beq.n	800e086 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07e:	3304      	adds	r3, #4
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe f9f5 	bl	800c470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e086:	463b      	mov	r3, r7
 800e088:	4618      	mov	r0, r3
 800e08a:	f7ff ff6b 	bl	800df64 <prvSampleTimeNow>
 800e08e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b09      	cmp	r3, #9
 800e094:	f200 8096 	bhi.w	800e1c4 <prvProcessReceivedCommands+0x19c>
 800e098:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <prvProcessReceivedCommands+0x78>)
 800e09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09e:	bf00      	nop
 800e0a0:	0800e0c9 	.word	0x0800e0c9
 800e0a4:	0800e0c9 	.word	0x0800e0c9
 800e0a8:	0800e0c9 	.word	0x0800e0c9
 800e0ac:	0800e13d 	.word	0x0800e13d
 800e0b0:	0800e151 	.word	0x0800e151
 800e0b4:	0800e19b 	.word	0x0800e19b
 800e0b8:	0800e0c9 	.word	0x0800e0c9
 800e0bc:	0800e0c9 	.word	0x0800e0c9
 800e0c0:	0800e13d 	.word	0x0800e13d
 800e0c4:	0800e151 	.word	0x0800e151
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0ce:	f043 0301 	orr.w	r3, r3, #1
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	18d1      	adds	r1, r2, r3
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0e8:	f7ff ff5c 	bl	800dfa4 <prvInsertTimerInActiveList>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d069      	beq.n	800e1c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e100:	f003 0304 	and.w	r3, r3, #4
 800e104:	2b00      	cmp	r3, #0
 800e106:	d05e      	beq.n	800e1c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10c:	699b      	ldr	r3, [r3, #24]
 800e10e:	441a      	add	r2, r3
 800e110:	2300      	movs	r3, #0
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	2300      	movs	r3, #0
 800e116:	2100      	movs	r1, #0
 800e118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e11a:	f7ff fe05 	bl	800dd28 <xTimerGenericCommand>
 800e11e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d14f      	bne.n	800e1c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	61bb      	str	r3, [r7, #24]
}
 800e138:	bf00      	nop
 800e13a:	e7fe      	b.n	800e13a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e142:	f023 0301 	bic.w	r3, r3, #1
 800e146:	b2da      	uxtb	r2, r3
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e14e:	e03a      	b.n	800e1c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e156:	f043 0301 	orr.w	r3, r3, #1
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e162:	68ba      	ldr	r2, [r7, #8]
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	699b      	ldr	r3, [r3, #24]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10a      	bne.n	800e186 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	f383 8811 	msr	BASEPRI, r3
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	617b      	str	r3, [r7, #20]
}
 800e182:	bf00      	nop
 800e184:	e7fe      	b.n	800e184 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	699a      	ldr	r2, [r3, #24]
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	18d1      	adds	r1, r2, r3
 800e18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e194:	f7ff ff06 	bl	800dfa4 <prvInsertTimerInActiveList>
					break;
 800e198:	e015      	b.n	800e1c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1a0:	f003 0302 	and.w	r3, r3, #2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d103      	bne.n	800e1b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1aa:	f000 fbe1 	bl	800e970 <vPortFree>
 800e1ae:	e00a      	b.n	800e1c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1b6:	f023 0301 	bic.w	r3, r3, #1
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1c2:	e000      	b.n	800e1c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e1c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1c6:	4b08      	ldr	r3, [pc, #32]	; (800e1e8 <prvProcessReceivedCommands+0x1c0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	1d39      	adds	r1, r7, #4
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe fc16 	bl	800ca00 <xQueueReceive>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f47f af2a 	bne.w	800e030 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e1dc:	bf00      	nop
 800e1de:	bf00      	nop
 800e1e0:	3730      	adds	r7, #48	; 0x30
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200015bc 	.word	0x200015bc

0800e1ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b088      	sub	sp, #32
 800e1f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1f2:	e048      	b.n	800e286 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1f4:	4b2d      	ldr	r3, [pc, #180]	; (800e2ac <prvSwitchTimerLists+0xc0>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1fe:	4b2b      	ldr	r3, [pc, #172]	; (800e2ac <prvSwitchTimerLists+0xc0>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	3304      	adds	r3, #4
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe f92f 	bl	800c470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6a1b      	ldr	r3, [r3, #32]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e220:	f003 0304 	and.w	r3, r3, #4
 800e224:	2b00      	cmp	r3, #0
 800e226:	d02e      	beq.n	800e286 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	693a      	ldr	r2, [r7, #16]
 800e22e:	4413      	add	r3, r2
 800e230:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	429a      	cmp	r2, r3
 800e238:	d90e      	bls.n	800e258 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e246:	4b19      	ldr	r3, [pc, #100]	; (800e2ac <prvSwitchTimerLists+0xc0>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f7fe f8d4 	bl	800c3fe <vListInsert>
 800e256:	e016      	b.n	800e286 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e258:	2300      	movs	r3, #0
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	2300      	movs	r3, #0
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	2100      	movs	r1, #0
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f7ff fd60 	bl	800dd28 <xTimerGenericCommand>
 800e268:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10a      	bne.n	800e286 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	603b      	str	r3, [r7, #0]
}
 800e282:	bf00      	nop
 800e284:	e7fe      	b.n	800e284 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e286:	4b09      	ldr	r3, [pc, #36]	; (800e2ac <prvSwitchTimerLists+0xc0>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1b1      	bne.n	800e1f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e290:	4b06      	ldr	r3, [pc, #24]	; (800e2ac <prvSwitchTimerLists+0xc0>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e296:	4b06      	ldr	r3, [pc, #24]	; (800e2b0 <prvSwitchTimerLists+0xc4>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a04      	ldr	r2, [pc, #16]	; (800e2ac <prvSwitchTimerLists+0xc0>)
 800e29c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e29e:	4a04      	ldr	r2, [pc, #16]	; (800e2b0 <prvSwitchTimerLists+0xc4>)
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	6013      	str	r3, [r2, #0]
}
 800e2a4:	bf00      	nop
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	200015b4 	.word	0x200015b4
 800e2b0:	200015b8 	.word	0x200015b8

0800e2b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2ba:	f000 f96b 	bl	800e594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2be:	4b15      	ldr	r3, [pc, #84]	; (800e314 <prvCheckForValidListAndQueue+0x60>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d120      	bne.n	800e308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2c6:	4814      	ldr	r0, [pc, #80]	; (800e318 <prvCheckForValidListAndQueue+0x64>)
 800e2c8:	f7fe f848 	bl	800c35c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2cc:	4813      	ldr	r0, [pc, #76]	; (800e31c <prvCheckForValidListAndQueue+0x68>)
 800e2ce:	f7fe f845 	bl	800c35c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2d2:	4b13      	ldr	r3, [pc, #76]	; (800e320 <prvCheckForValidListAndQueue+0x6c>)
 800e2d4:	4a10      	ldr	r2, [pc, #64]	; (800e318 <prvCheckForValidListAndQueue+0x64>)
 800e2d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2d8:	4b12      	ldr	r3, [pc, #72]	; (800e324 <prvCheckForValidListAndQueue+0x70>)
 800e2da:	4a10      	ldr	r2, [pc, #64]	; (800e31c <prvCheckForValidListAndQueue+0x68>)
 800e2dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2de:	2300      	movs	r3, #0
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	4b11      	ldr	r3, [pc, #68]	; (800e328 <prvCheckForValidListAndQueue+0x74>)
 800e2e4:	4a11      	ldr	r2, [pc, #68]	; (800e32c <prvCheckForValidListAndQueue+0x78>)
 800e2e6:	2110      	movs	r1, #16
 800e2e8:	200a      	movs	r0, #10
 800e2ea:	f7fe f953 	bl	800c594 <xQueueGenericCreateStatic>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4a08      	ldr	r2, [pc, #32]	; (800e314 <prvCheckForValidListAndQueue+0x60>)
 800e2f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2f4:	4b07      	ldr	r3, [pc, #28]	; (800e314 <prvCheckForValidListAndQueue+0x60>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d005      	beq.n	800e308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2fc:	4b05      	ldr	r3, [pc, #20]	; (800e314 <prvCheckForValidListAndQueue+0x60>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	490b      	ldr	r1, [pc, #44]	; (800e330 <prvCheckForValidListAndQueue+0x7c>)
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fd6c 	bl	800cde0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e308:	f000 f974 	bl	800e5f4 <vPortExitCritical>
}
 800e30c:	bf00      	nop
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	200015bc 	.word	0x200015bc
 800e318:	2000158c 	.word	0x2000158c
 800e31c:	200015a0 	.word	0x200015a0
 800e320:	200015b4 	.word	0x200015b4
 800e324:	200015b8 	.word	0x200015b8
 800e328:	20001668 	.word	0x20001668
 800e32c:	200015c8 	.word	0x200015c8
 800e330:	080102b0 	.word	0x080102b0

0800e334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	3b04      	subs	r3, #4
 800e344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e34c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3b04      	subs	r3, #4
 800e352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	f023 0201 	bic.w	r2, r3, #1
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3b04      	subs	r3, #4
 800e362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e364:	4a0c      	ldr	r2, [pc, #48]	; (800e398 <pxPortInitialiseStack+0x64>)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	3b14      	subs	r3, #20
 800e36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	3b04      	subs	r3, #4
 800e37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f06f 0202 	mvn.w	r2, #2
 800e382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	3b20      	subs	r3, #32
 800e388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e38a:	68fb      	ldr	r3, [r7, #12]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr
 800e398:	0800e39d 	.word	0x0800e39d

0800e39c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3a6:	4b12      	ldr	r3, [pc, #72]	; (800e3f0 <prvTaskExitError+0x54>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ae:	d00a      	beq.n	800e3c6 <prvTaskExitError+0x2a>
	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	60fb      	str	r3, [r7, #12]
}
 800e3c2:	bf00      	nop
 800e3c4:	e7fe      	b.n	800e3c4 <prvTaskExitError+0x28>
	__asm volatile
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	60bb      	str	r3, [r7, #8]
}
 800e3d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3da:	bf00      	nop
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0fc      	beq.n	800e3dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3e2:	bf00      	nop
 800e3e4:	bf00      	nop
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	2000014c 	.word	0x2000014c
	...

0800e400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e400:	4b07      	ldr	r3, [pc, #28]	; (800e420 <pxCurrentTCBConst2>)
 800e402:	6819      	ldr	r1, [r3, #0]
 800e404:	6808      	ldr	r0, [r1, #0]
 800e406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40a:	f380 8809 	msr	PSP, r0
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f04f 0000 	mov.w	r0, #0
 800e416:	f380 8811 	msr	BASEPRI, r0
 800e41a:	4770      	bx	lr
 800e41c:	f3af 8000 	nop.w

0800e420 <pxCurrentTCBConst2>:
 800e420:	2000108c 	.word	0x2000108c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop

0800e428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e428:	4808      	ldr	r0, [pc, #32]	; (800e44c <prvPortStartFirstTask+0x24>)
 800e42a:	6800      	ldr	r0, [r0, #0]
 800e42c:	6800      	ldr	r0, [r0, #0]
 800e42e:	f380 8808 	msr	MSP, r0
 800e432:	f04f 0000 	mov.w	r0, #0
 800e436:	f380 8814 	msr	CONTROL, r0
 800e43a:	b662      	cpsie	i
 800e43c:	b661      	cpsie	f
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	df00      	svc	0
 800e448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e44a:	bf00      	nop
 800e44c:	e000ed08 	.word	0xe000ed08

0800e450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e456:	4b46      	ldr	r3, [pc, #280]	; (800e570 <xPortStartScheduler+0x120>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a46      	ldr	r2, [pc, #280]	; (800e574 <xPortStartScheduler+0x124>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d10a      	bne.n	800e476 <xPortStartScheduler+0x26>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	613b      	str	r3, [r7, #16]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e476:	4b3e      	ldr	r3, [pc, #248]	; (800e570 <xPortStartScheduler+0x120>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a3f      	ldr	r2, [pc, #252]	; (800e578 <xPortStartScheduler+0x128>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d10a      	bne.n	800e496 <xPortStartScheduler+0x46>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	60fb      	str	r3, [r7, #12]
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e496:	4b39      	ldr	r3, [pc, #228]	; (800e57c <xPortStartScheduler+0x12c>)
 800e498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	22ff      	movs	r2, #255	; 0xff
 800e4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4b0:	78fb      	ldrb	r3, [r7, #3]
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	4b31      	ldr	r3, [pc, #196]	; (800e580 <xPortStartScheduler+0x130>)
 800e4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4be:	4b31      	ldr	r3, [pc, #196]	; (800e584 <xPortStartScheduler+0x134>)
 800e4c0:	2207      	movs	r2, #7
 800e4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4c4:	e009      	b.n	800e4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e4c6:	4b2f      	ldr	r3, [pc, #188]	; (800e584 <xPortStartScheduler+0x134>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	4a2d      	ldr	r2, [pc, #180]	; (800e584 <xPortStartScheduler+0x134>)
 800e4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4d0:	78fb      	ldrb	r3, [r7, #3]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	005b      	lsls	r3, r3, #1
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4da:	78fb      	ldrb	r3, [r7, #3]
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4e2:	2b80      	cmp	r3, #128	; 0x80
 800e4e4:	d0ef      	beq.n	800e4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4e6:	4b27      	ldr	r3, [pc, #156]	; (800e584 <xPortStartScheduler+0x134>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f1c3 0307 	rsb	r3, r3, #7
 800e4ee:	2b04      	cmp	r3, #4
 800e4f0:	d00a      	beq.n	800e508 <xPortStartScheduler+0xb8>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	60bb      	str	r3, [r7, #8]
}
 800e504:	bf00      	nop
 800e506:	e7fe      	b.n	800e506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e508:	4b1e      	ldr	r3, [pc, #120]	; (800e584 <xPortStartScheduler+0x134>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	4a1d      	ldr	r2, [pc, #116]	; (800e584 <xPortStartScheduler+0x134>)
 800e510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e512:	4b1c      	ldr	r3, [pc, #112]	; (800e584 <xPortStartScheduler+0x134>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e51a:	4a1a      	ldr	r2, [pc, #104]	; (800e584 <xPortStartScheduler+0x134>)
 800e51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	b2da      	uxtb	r2, r3
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e526:	4b18      	ldr	r3, [pc, #96]	; (800e588 <xPortStartScheduler+0x138>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a17      	ldr	r2, [pc, #92]	; (800e588 <xPortStartScheduler+0x138>)
 800e52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e532:	4b15      	ldr	r3, [pc, #84]	; (800e588 <xPortStartScheduler+0x138>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a14      	ldr	r2, [pc, #80]	; (800e588 <xPortStartScheduler+0x138>)
 800e538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e53e:	f000 f8dd 	bl	800e6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e542:	4b12      	ldr	r3, [pc, #72]	; (800e58c <xPortStartScheduler+0x13c>)
 800e544:	2200      	movs	r2, #0
 800e546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e548:	f000 f8fc 	bl	800e744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e54c:	4b10      	ldr	r3, [pc, #64]	; (800e590 <xPortStartScheduler+0x140>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a0f      	ldr	r2, [pc, #60]	; (800e590 <xPortStartScheduler+0x140>)
 800e552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e558:	f7ff ff66 	bl	800e428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e55c:	f7ff f850 	bl	800d600 <vTaskSwitchContext>
	prvTaskExitError();
 800e560:	f7ff ff1c 	bl	800e39c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	e000ed00 	.word	0xe000ed00
 800e574:	410fc271 	.word	0x410fc271
 800e578:	410fc270 	.word	0x410fc270
 800e57c:	e000e400 	.word	0xe000e400
 800e580:	200016b8 	.word	0x200016b8
 800e584:	200016bc 	.word	0x200016bc
 800e588:	e000ed20 	.word	0xe000ed20
 800e58c:	2000014c 	.word	0x2000014c
 800e590:	e000ef34 	.word	0xe000ef34

0800e594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	607b      	str	r3, [r7, #4]
}
 800e5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5ae:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <vPortEnterCritical+0x58>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	4a0d      	ldr	r2, [pc, #52]	; (800e5ec <vPortEnterCritical+0x58>)
 800e5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5b8:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <vPortEnterCritical+0x58>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d10f      	bne.n	800e5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5c0:	4b0b      	ldr	r3, [pc, #44]	; (800e5f0 <vPortEnterCritical+0x5c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00a      	beq.n	800e5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	603b      	str	r3, [r7, #0]
}
 800e5dc:	bf00      	nop
 800e5de:	e7fe      	b.n	800e5de <vPortEnterCritical+0x4a>
	}
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	2000014c 	.word	0x2000014c
 800e5f0:	e000ed04 	.word	0xe000ed04

0800e5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5fa:	4b12      	ldr	r3, [pc, #72]	; (800e644 <vPortExitCritical+0x50>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10a      	bne.n	800e618 <vPortExitCritical+0x24>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	607b      	str	r3, [r7, #4]
}
 800e614:	bf00      	nop
 800e616:	e7fe      	b.n	800e616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e618:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <vPortExitCritical+0x50>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	4a09      	ldr	r2, [pc, #36]	; (800e644 <vPortExitCritical+0x50>)
 800e620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e622:	4b08      	ldr	r3, [pc, #32]	; (800e644 <vPortExitCritical+0x50>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d105      	bne.n	800e636 <vPortExitCritical+0x42>
 800e62a:	2300      	movs	r3, #0
 800e62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	f383 8811 	msr	BASEPRI, r3
}
 800e634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e636:	bf00      	nop
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	2000014c 	.word	0x2000014c
	...

0800e650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e650:	f3ef 8009 	mrs	r0, PSP
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	4b15      	ldr	r3, [pc, #84]	; (800e6b0 <pxCurrentTCBConst>)
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	f01e 0f10 	tst.w	lr, #16
 800e660:	bf08      	it	eq
 800e662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66a:	6010      	str	r0, [r2, #0]
 800e66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e674:	f380 8811 	msr	BASEPRI, r0
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f7fe ffbe 	bl	800d600 <vTaskSwitchContext>
 800e684:	f04f 0000 	mov.w	r0, #0
 800e688:	f380 8811 	msr	BASEPRI, r0
 800e68c:	bc09      	pop	{r0, r3}
 800e68e:	6819      	ldr	r1, [r3, #0]
 800e690:	6808      	ldr	r0, [r1, #0]
 800e692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e696:	f01e 0f10 	tst.w	lr, #16
 800e69a:	bf08      	it	eq
 800e69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6a0:	f380 8809 	msr	PSP, r0
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	f3af 8000 	nop.w

0800e6b0 <pxCurrentTCBConst>:
 800e6b0:	2000108c 	.word	0x2000108c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6b4:	bf00      	nop
 800e6b6:	bf00      	nop

0800e6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	607b      	str	r3, [r7, #4]
}
 800e6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6d2:	f7fe fedb 	bl	800d48c <xTaskIncrementTick>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6dc:	4b06      	ldr	r3, [pc, #24]	; (800e6f8 <xPortSysTickHandler+0x40>)
 800e6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	f383 8811 	msr	BASEPRI, r3
}
 800e6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	e000ed04 	.word	0xe000ed04

0800e6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e700:	4b0b      	ldr	r3, [pc, #44]	; (800e730 <vPortSetupTimerInterrupt+0x34>)
 800e702:	2200      	movs	r2, #0
 800e704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e706:	4b0b      	ldr	r3, [pc, #44]	; (800e734 <vPortSetupTimerInterrupt+0x38>)
 800e708:	2200      	movs	r2, #0
 800e70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e70c:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <vPortSetupTimerInterrupt+0x3c>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a0a      	ldr	r2, [pc, #40]	; (800e73c <vPortSetupTimerInterrupt+0x40>)
 800e712:	fba2 2303 	umull	r2, r3, r2, r3
 800e716:	099b      	lsrs	r3, r3, #6
 800e718:	4a09      	ldr	r2, [pc, #36]	; (800e740 <vPortSetupTimerInterrupt+0x44>)
 800e71a:	3b01      	subs	r3, #1
 800e71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e71e:	4b04      	ldr	r3, [pc, #16]	; (800e730 <vPortSetupTimerInterrupt+0x34>)
 800e720:	2207      	movs	r2, #7
 800e722:	601a      	str	r2, [r3, #0]
}
 800e724:	bf00      	nop
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	e000e010 	.word	0xe000e010
 800e734:	e000e018 	.word	0xe000e018
 800e738:	20000140 	.word	0x20000140
 800e73c:	10624dd3 	.word	0x10624dd3
 800e740:	e000e014 	.word	0xe000e014

0800e744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e754 <vPortEnableVFP+0x10>
 800e748:	6801      	ldr	r1, [r0, #0]
 800e74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e74e:	6001      	str	r1, [r0, #0]
 800e750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e752:	bf00      	nop
 800e754:	e000ed88 	.word	0xe000ed88

0800e758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e75e:	f3ef 8305 	mrs	r3, IPSR
 800e762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2b0f      	cmp	r3, #15
 800e768:	d914      	bls.n	800e794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e76a:	4a17      	ldr	r2, [pc, #92]	; (800e7c8 <vPortValidateInterruptPriority+0x70>)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	4413      	add	r3, r2
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e774:	4b15      	ldr	r3, [pc, #84]	; (800e7cc <vPortValidateInterruptPriority+0x74>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	7afa      	ldrb	r2, [r7, #11]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d20a      	bcs.n	800e794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	607b      	str	r3, [r7, #4]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e794:	4b0e      	ldr	r3, [pc, #56]	; (800e7d0 <vPortValidateInterruptPriority+0x78>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e79c:	4b0d      	ldr	r3, [pc, #52]	; (800e7d4 <vPortValidateInterruptPriority+0x7c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d90a      	bls.n	800e7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	603b      	str	r3, [r7, #0]
}
 800e7b6:	bf00      	nop
 800e7b8:	e7fe      	b.n	800e7b8 <vPortValidateInterruptPriority+0x60>
	}
 800e7ba:	bf00      	nop
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	e000e3f0 	.word	0xe000e3f0
 800e7cc:	200016b8 	.word	0x200016b8
 800e7d0:	e000ed0c 	.word	0xe000ed0c
 800e7d4:	200016bc 	.word	0x200016bc

0800e7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08a      	sub	sp, #40	; 0x28
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7e4:	f7fe fd96 	bl	800d314 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7e8:	4b5b      	ldr	r3, [pc, #364]	; (800e958 <pvPortMalloc+0x180>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d101      	bne.n	800e7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7f0:	f000 f920 	bl	800ea34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7f4:	4b59      	ldr	r3, [pc, #356]	; (800e95c <pvPortMalloc+0x184>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f040 8093 	bne.w	800e928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d01d      	beq.n	800e844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e808:	2208      	movs	r2, #8
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4413      	add	r3, r2
 800e80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f003 0307 	and.w	r3, r3, #7
 800e816:	2b00      	cmp	r3, #0
 800e818:	d014      	beq.n	800e844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f023 0307 	bic.w	r3, r3, #7
 800e820:	3308      	adds	r3, #8
 800e822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f003 0307 	and.w	r3, r3, #7
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00a      	beq.n	800e844 <pvPortMalloc+0x6c>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	617b      	str	r3, [r7, #20]
}
 800e840:	bf00      	nop
 800e842:	e7fe      	b.n	800e842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d06e      	beq.n	800e928 <pvPortMalloc+0x150>
 800e84a:	4b45      	ldr	r3, [pc, #276]	; (800e960 <pvPortMalloc+0x188>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	429a      	cmp	r2, r3
 800e852:	d869      	bhi.n	800e928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e854:	4b43      	ldr	r3, [pc, #268]	; (800e964 <pvPortMalloc+0x18c>)
 800e856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e858:	4b42      	ldr	r3, [pc, #264]	; (800e964 <pvPortMalloc+0x18c>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e85e:	e004      	b.n	800e86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d903      	bls.n	800e87c <pvPortMalloc+0xa4>
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1f1      	bne.n	800e860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e87c:	4b36      	ldr	r3, [pc, #216]	; (800e958 <pvPortMalloc+0x180>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e882:	429a      	cmp	r2, r3
 800e884:	d050      	beq.n	800e928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2208      	movs	r2, #8
 800e88c:	4413      	add	r3, r2
 800e88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	1ad2      	subs	r2, r2, r3
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	005b      	lsls	r3, r3, #1
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d91f      	bls.n	800e8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00a      	beq.n	800e8d0 <pvPortMalloc+0xf8>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	613b      	str	r3, [r7, #16]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	1ad2      	subs	r2, r2, r3
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8e2:	69b8      	ldr	r0, [r7, #24]
 800e8e4:	f000 f908 	bl	800eaf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8e8:	4b1d      	ldr	r3, [pc, #116]	; (800e960 <pvPortMalloc+0x188>)
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	4a1b      	ldr	r2, [pc, #108]	; (800e960 <pvPortMalloc+0x188>)
 800e8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8f6:	4b1a      	ldr	r3, [pc, #104]	; (800e960 <pvPortMalloc+0x188>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	4b1b      	ldr	r3, [pc, #108]	; (800e968 <pvPortMalloc+0x190>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d203      	bcs.n	800e90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e902:	4b17      	ldr	r3, [pc, #92]	; (800e960 <pvPortMalloc+0x188>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a18      	ldr	r2, [pc, #96]	; (800e968 <pvPortMalloc+0x190>)
 800e908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	4b13      	ldr	r3, [pc, #76]	; (800e95c <pvPortMalloc+0x184>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	431a      	orrs	r2, r3
 800e914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	2200      	movs	r2, #0
 800e91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e91e:	4b13      	ldr	r3, [pc, #76]	; (800e96c <pvPortMalloc+0x194>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	3301      	adds	r3, #1
 800e924:	4a11      	ldr	r2, [pc, #68]	; (800e96c <pvPortMalloc+0x194>)
 800e926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e928:	f7fe fd02 	bl	800d330 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	f003 0307 	and.w	r3, r3, #7
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00a      	beq.n	800e94c <pvPortMalloc+0x174>
	__asm volatile
 800e936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93a:	f383 8811 	msr	BASEPRI, r3
 800e93e:	f3bf 8f6f 	isb	sy
 800e942:	f3bf 8f4f 	dsb	sy
 800e946:	60fb      	str	r3, [r7, #12]
}
 800e948:	bf00      	nop
 800e94a:	e7fe      	b.n	800e94a <pvPortMalloc+0x172>
	return pvReturn;
 800e94c:	69fb      	ldr	r3, [r7, #28]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3728      	adds	r7, #40	; 0x28
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	200052c8 	.word	0x200052c8
 800e95c:	200052dc 	.word	0x200052dc
 800e960:	200052cc 	.word	0x200052cc
 800e964:	200052c0 	.word	0x200052c0
 800e968:	200052d0 	.word	0x200052d0
 800e96c:	200052d4 	.word	0x200052d4

0800e970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d04d      	beq.n	800ea1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e982:	2308      	movs	r3, #8
 800e984:	425b      	negs	r3, r3
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	4413      	add	r3, r2
 800e98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	685a      	ldr	r2, [r3, #4]
 800e994:	4b24      	ldr	r3, [pc, #144]	; (800ea28 <vPortFree+0xb8>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4013      	ands	r3, r2
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10a      	bne.n	800e9b4 <vPortFree+0x44>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	60fb      	str	r3, [r7, #12]
}
 800e9b0:	bf00      	nop
 800e9b2:	e7fe      	b.n	800e9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00a      	beq.n	800e9d2 <vPortFree+0x62>
	__asm volatile
 800e9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	60bb      	str	r3, [r7, #8]
}
 800e9ce:	bf00      	nop
 800e9d0:	e7fe      	b.n	800e9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <vPortFree+0xb8>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4013      	ands	r3, r2
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d01e      	beq.n	800ea1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d11a      	bne.n	800ea1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	685a      	ldr	r2, [r3, #4]
 800e9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ea28 <vPortFree+0xb8>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	43db      	mvns	r3, r3
 800e9f2:	401a      	ands	r2, r3
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9f8:	f7fe fc8c 	bl	800d314 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <vPortFree+0xbc>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4413      	add	r3, r2
 800ea06:	4a09      	ldr	r2, [pc, #36]	; (800ea2c <vPortFree+0xbc>)
 800ea08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea0a:	6938      	ldr	r0, [r7, #16]
 800ea0c:	f000 f874 	bl	800eaf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea10:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <vPortFree+0xc0>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3301      	adds	r3, #1
 800ea16:	4a06      	ldr	r2, [pc, #24]	; (800ea30 <vPortFree+0xc0>)
 800ea18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea1a:	f7fe fc89 	bl	800d330 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea1e:	bf00      	nop
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	200052dc 	.word	0x200052dc
 800ea2c:	200052cc 	.word	0x200052cc
 800ea30:	200052d8 	.word	0x200052d8

0800ea34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea40:	4b27      	ldr	r3, [pc, #156]	; (800eae0 <prvHeapInit+0xac>)
 800ea42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f003 0307 	and.w	r3, r3, #7
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00c      	beq.n	800ea68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3307      	adds	r3, #7
 800ea52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f023 0307 	bic.w	r3, r3, #7
 800ea5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	4a1f      	ldr	r2, [pc, #124]	; (800eae0 <prvHeapInit+0xac>)
 800ea64:	4413      	add	r3, r2
 800ea66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea6c:	4a1d      	ldr	r2, [pc, #116]	; (800eae4 <prvHeapInit+0xb0>)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea72:	4b1c      	ldr	r3, [pc, #112]	; (800eae4 <prvHeapInit+0xb0>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	68ba      	ldr	r2, [r7, #8]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea80:	2208      	movs	r2, #8
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	1a9b      	subs	r3, r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f023 0307 	bic.w	r3, r3, #7
 800ea8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	4a15      	ldr	r2, [pc, #84]	; (800eae8 <prvHeapInit+0xb4>)
 800ea94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea96:	4b14      	ldr	r3, [pc, #80]	; (800eae8 <prvHeapInit+0xb4>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea9e:	4b12      	ldr	r3, [pc, #72]	; (800eae8 <prvHeapInit+0xb4>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eab4:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <prvHeapInit+0xb4>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	4a0a      	ldr	r2, [pc, #40]	; (800eaec <prvHeapInit+0xb8>)
 800eac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	4a09      	ldr	r2, [pc, #36]	; (800eaf0 <prvHeapInit+0xbc>)
 800eaca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eacc:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <prvHeapInit+0xc0>)
 800eace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ead2:	601a      	str	r2, [r3, #0]
}
 800ead4:	bf00      	nop
 800ead6:	3714      	adds	r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	200016c0 	.word	0x200016c0
 800eae4:	200052c0 	.word	0x200052c0
 800eae8:	200052c8 	.word	0x200052c8
 800eaec:	200052d0 	.word	0x200052d0
 800eaf0:	200052cc 	.word	0x200052cc
 800eaf4:	200052dc 	.word	0x200052dc

0800eaf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb00:	4b28      	ldr	r3, [pc, #160]	; (800eba4 <prvInsertBlockIntoFreeList+0xac>)
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	e002      	b.n	800eb0c <prvInsertBlockIntoFreeList+0x14>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	60fb      	str	r3, [r7, #12]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d8f7      	bhi.n	800eb06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	4413      	add	r3, r2
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d108      	bne.n	800eb3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	685a      	ldr	r2, [r3, #4]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	441a      	add	r2, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	441a      	add	r2, r3
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d118      	bne.n	800eb80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	4b15      	ldr	r3, [pc, #84]	; (800eba8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d00d      	beq.n	800eb76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	441a      	add	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	601a      	str	r2, [r3, #0]
 800eb74:	e008      	b.n	800eb88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb76:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	e003      	b.n	800eb88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d002      	beq.n	800eb96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb96:	bf00      	nop
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	200052c0 	.word	0x200052c0
 800eba8:	200052c8 	.word	0x200052c8

0800ebac <sniprintf>:
 800ebac:	b40c      	push	{r2, r3}
 800ebae:	b530      	push	{r4, r5, lr}
 800ebb0:	4b17      	ldr	r3, [pc, #92]	; (800ec10 <sniprintf+0x64>)
 800ebb2:	1e0c      	subs	r4, r1, #0
 800ebb4:	681d      	ldr	r5, [r3, #0]
 800ebb6:	b09d      	sub	sp, #116	; 0x74
 800ebb8:	da08      	bge.n	800ebcc <sniprintf+0x20>
 800ebba:	238b      	movs	r3, #139	; 0x8b
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc2:	b01d      	add	sp, #116	; 0x74
 800ebc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebc8:	b002      	add	sp, #8
 800ebca:	4770      	bx	lr
 800ebcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ebd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ebd4:	bf14      	ite	ne
 800ebd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ebda:	4623      	moveq	r3, r4
 800ebdc:	9304      	str	r3, [sp, #16]
 800ebde:	9307      	str	r3, [sp, #28]
 800ebe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe4:	9002      	str	r0, [sp, #8]
 800ebe6:	9006      	str	r0, [sp, #24]
 800ebe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ebec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebee:	ab21      	add	r3, sp, #132	; 0x84
 800ebf0:	a902      	add	r1, sp, #8
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	f000 f9a1 	bl	800ef3c <_svfiprintf_r>
 800ebfa:	1c43      	adds	r3, r0, #1
 800ebfc:	bfbc      	itt	lt
 800ebfe:	238b      	movlt	r3, #139	; 0x8b
 800ec00:	602b      	strlt	r3, [r5, #0]
 800ec02:	2c00      	cmp	r4, #0
 800ec04:	d0dd      	beq.n	800ebc2 <sniprintf+0x16>
 800ec06:	9b02      	ldr	r3, [sp, #8]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	701a      	strb	r2, [r3, #0]
 800ec0c:	e7d9      	b.n	800ebc2 <sniprintf+0x16>
 800ec0e:	bf00      	nop
 800ec10:	2000019c 	.word	0x2000019c

0800ec14 <memset>:
 800ec14:	4402      	add	r2, r0
 800ec16:	4603      	mov	r3, r0
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d100      	bne.n	800ec1e <memset+0xa>
 800ec1c:	4770      	bx	lr
 800ec1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ec22:	e7f9      	b.n	800ec18 <memset+0x4>

0800ec24 <__errno>:
 800ec24:	4b01      	ldr	r3, [pc, #4]	; (800ec2c <__errno+0x8>)
 800ec26:	6818      	ldr	r0, [r3, #0]
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	2000019c 	.word	0x2000019c

0800ec30 <__libc_init_array>:
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	4d0d      	ldr	r5, [pc, #52]	; (800ec68 <__libc_init_array+0x38>)
 800ec34:	4c0d      	ldr	r4, [pc, #52]	; (800ec6c <__libc_init_array+0x3c>)
 800ec36:	1b64      	subs	r4, r4, r5
 800ec38:	10a4      	asrs	r4, r4, #2
 800ec3a:	2600      	movs	r6, #0
 800ec3c:	42a6      	cmp	r6, r4
 800ec3e:	d109      	bne.n	800ec54 <__libc_init_array+0x24>
 800ec40:	4d0b      	ldr	r5, [pc, #44]	; (800ec70 <__libc_init_array+0x40>)
 800ec42:	4c0c      	ldr	r4, [pc, #48]	; (800ec74 <__libc_init_array+0x44>)
 800ec44:	f001 faba 	bl	80101bc <_init>
 800ec48:	1b64      	subs	r4, r4, r5
 800ec4a:	10a4      	asrs	r4, r4, #2
 800ec4c:	2600      	movs	r6, #0
 800ec4e:	42a6      	cmp	r6, r4
 800ec50:	d105      	bne.n	800ec5e <__libc_init_array+0x2e>
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec58:	4798      	blx	r3
 800ec5a:	3601      	adds	r6, #1
 800ec5c:	e7ee      	b.n	800ec3c <__libc_init_array+0xc>
 800ec5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec62:	4798      	blx	r3
 800ec64:	3601      	adds	r6, #1
 800ec66:	e7f2      	b.n	800ec4e <__libc_init_array+0x1e>
 800ec68:	08010d44 	.word	0x08010d44
 800ec6c:	08010d44 	.word	0x08010d44
 800ec70:	08010d44 	.word	0x08010d44
 800ec74:	08010d48 	.word	0x08010d48

0800ec78 <__retarget_lock_acquire_recursive>:
 800ec78:	4770      	bx	lr

0800ec7a <__retarget_lock_release_recursive>:
 800ec7a:	4770      	bx	lr

0800ec7c <memcpy>:
 800ec7c:	440a      	add	r2, r1
 800ec7e:	4291      	cmp	r1, r2
 800ec80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec84:	d100      	bne.n	800ec88 <memcpy+0xc>
 800ec86:	4770      	bx	lr
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec92:	4291      	cmp	r1, r2
 800ec94:	d1f9      	bne.n	800ec8a <memcpy+0xe>
 800ec96:	bd10      	pop	{r4, pc}

0800ec98 <_free_r>:
 800ec98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec9a:	2900      	cmp	r1, #0
 800ec9c:	d044      	beq.n	800ed28 <_free_r+0x90>
 800ec9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eca2:	9001      	str	r0, [sp, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f1a1 0404 	sub.w	r4, r1, #4
 800ecaa:	bfb8      	it	lt
 800ecac:	18e4      	addlt	r4, r4, r3
 800ecae:	f000 f8df 	bl	800ee70 <__malloc_lock>
 800ecb2:	4a1e      	ldr	r2, [pc, #120]	; (800ed2c <_free_r+0x94>)
 800ecb4:	9801      	ldr	r0, [sp, #4]
 800ecb6:	6813      	ldr	r3, [r2, #0]
 800ecb8:	b933      	cbnz	r3, 800ecc8 <_free_r+0x30>
 800ecba:	6063      	str	r3, [r4, #4]
 800ecbc:	6014      	str	r4, [r2, #0]
 800ecbe:	b003      	add	sp, #12
 800ecc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecc4:	f000 b8da 	b.w	800ee7c <__malloc_unlock>
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	d908      	bls.n	800ecde <_free_r+0x46>
 800eccc:	6825      	ldr	r5, [r4, #0]
 800ecce:	1961      	adds	r1, r4, r5
 800ecd0:	428b      	cmp	r3, r1
 800ecd2:	bf01      	itttt	eq
 800ecd4:	6819      	ldreq	r1, [r3, #0]
 800ecd6:	685b      	ldreq	r3, [r3, #4]
 800ecd8:	1949      	addeq	r1, r1, r5
 800ecda:	6021      	streq	r1, [r4, #0]
 800ecdc:	e7ed      	b.n	800ecba <_free_r+0x22>
 800ecde:	461a      	mov	r2, r3
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	b10b      	cbz	r3, 800ece8 <_free_r+0x50>
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d9fa      	bls.n	800ecde <_free_r+0x46>
 800ece8:	6811      	ldr	r1, [r2, #0]
 800ecea:	1855      	adds	r5, r2, r1
 800ecec:	42a5      	cmp	r5, r4
 800ecee:	d10b      	bne.n	800ed08 <_free_r+0x70>
 800ecf0:	6824      	ldr	r4, [r4, #0]
 800ecf2:	4421      	add	r1, r4
 800ecf4:	1854      	adds	r4, r2, r1
 800ecf6:	42a3      	cmp	r3, r4
 800ecf8:	6011      	str	r1, [r2, #0]
 800ecfa:	d1e0      	bne.n	800ecbe <_free_r+0x26>
 800ecfc:	681c      	ldr	r4, [r3, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	6053      	str	r3, [r2, #4]
 800ed02:	440c      	add	r4, r1
 800ed04:	6014      	str	r4, [r2, #0]
 800ed06:	e7da      	b.n	800ecbe <_free_r+0x26>
 800ed08:	d902      	bls.n	800ed10 <_free_r+0x78>
 800ed0a:	230c      	movs	r3, #12
 800ed0c:	6003      	str	r3, [r0, #0]
 800ed0e:	e7d6      	b.n	800ecbe <_free_r+0x26>
 800ed10:	6825      	ldr	r5, [r4, #0]
 800ed12:	1961      	adds	r1, r4, r5
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf04      	itt	eq
 800ed18:	6819      	ldreq	r1, [r3, #0]
 800ed1a:	685b      	ldreq	r3, [r3, #4]
 800ed1c:	6063      	str	r3, [r4, #4]
 800ed1e:	bf04      	itt	eq
 800ed20:	1949      	addeq	r1, r1, r5
 800ed22:	6021      	streq	r1, [r4, #0]
 800ed24:	6054      	str	r4, [r2, #4]
 800ed26:	e7ca      	b.n	800ecbe <_free_r+0x26>
 800ed28:	b003      	add	sp, #12
 800ed2a:	bd30      	pop	{r4, r5, pc}
 800ed2c:	20005420 	.word	0x20005420

0800ed30 <sbrk_aligned>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	4e0e      	ldr	r6, [pc, #56]	; (800ed6c <sbrk_aligned+0x3c>)
 800ed34:	460c      	mov	r4, r1
 800ed36:	6831      	ldr	r1, [r6, #0]
 800ed38:	4605      	mov	r5, r0
 800ed3a:	b911      	cbnz	r1, 800ed42 <sbrk_aligned+0x12>
 800ed3c:	f000 fba6 	bl	800f48c <_sbrk_r>
 800ed40:	6030      	str	r0, [r6, #0]
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f000 fba1 	bl	800f48c <_sbrk_r>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d00a      	beq.n	800ed64 <sbrk_aligned+0x34>
 800ed4e:	1cc4      	adds	r4, r0, #3
 800ed50:	f024 0403 	bic.w	r4, r4, #3
 800ed54:	42a0      	cmp	r0, r4
 800ed56:	d007      	beq.n	800ed68 <sbrk_aligned+0x38>
 800ed58:	1a21      	subs	r1, r4, r0
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f000 fb96 	bl	800f48c <_sbrk_r>
 800ed60:	3001      	adds	r0, #1
 800ed62:	d101      	bne.n	800ed68 <sbrk_aligned+0x38>
 800ed64:	f04f 34ff 	mov.w	r4, #4294967295
 800ed68:	4620      	mov	r0, r4
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	20005424 	.word	0x20005424

0800ed70 <_malloc_r>:
 800ed70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed74:	1ccd      	adds	r5, r1, #3
 800ed76:	f025 0503 	bic.w	r5, r5, #3
 800ed7a:	3508      	adds	r5, #8
 800ed7c:	2d0c      	cmp	r5, #12
 800ed7e:	bf38      	it	cc
 800ed80:	250c      	movcc	r5, #12
 800ed82:	2d00      	cmp	r5, #0
 800ed84:	4607      	mov	r7, r0
 800ed86:	db01      	blt.n	800ed8c <_malloc_r+0x1c>
 800ed88:	42a9      	cmp	r1, r5
 800ed8a:	d905      	bls.n	800ed98 <_malloc_r+0x28>
 800ed8c:	230c      	movs	r3, #12
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	2600      	movs	r6, #0
 800ed92:	4630      	mov	r0, r6
 800ed94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee6c <_malloc_r+0xfc>
 800ed9c:	f000 f868 	bl	800ee70 <__malloc_lock>
 800eda0:	f8d8 3000 	ldr.w	r3, [r8]
 800eda4:	461c      	mov	r4, r3
 800eda6:	bb5c      	cbnz	r4, 800ee00 <_malloc_r+0x90>
 800eda8:	4629      	mov	r1, r5
 800edaa:	4638      	mov	r0, r7
 800edac:	f7ff ffc0 	bl	800ed30 <sbrk_aligned>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	4604      	mov	r4, r0
 800edb4:	d155      	bne.n	800ee62 <_malloc_r+0xf2>
 800edb6:	f8d8 4000 	ldr.w	r4, [r8]
 800edba:	4626      	mov	r6, r4
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	d145      	bne.n	800ee4c <_malloc_r+0xdc>
 800edc0:	2c00      	cmp	r4, #0
 800edc2:	d048      	beq.n	800ee56 <_malloc_r+0xe6>
 800edc4:	6823      	ldr	r3, [r4, #0]
 800edc6:	4631      	mov	r1, r6
 800edc8:	4638      	mov	r0, r7
 800edca:	eb04 0903 	add.w	r9, r4, r3
 800edce:	f000 fb5d 	bl	800f48c <_sbrk_r>
 800edd2:	4581      	cmp	r9, r0
 800edd4:	d13f      	bne.n	800ee56 <_malloc_r+0xe6>
 800edd6:	6821      	ldr	r1, [r4, #0]
 800edd8:	1a6d      	subs	r5, r5, r1
 800edda:	4629      	mov	r1, r5
 800eddc:	4638      	mov	r0, r7
 800edde:	f7ff ffa7 	bl	800ed30 <sbrk_aligned>
 800ede2:	3001      	adds	r0, #1
 800ede4:	d037      	beq.n	800ee56 <_malloc_r+0xe6>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	442b      	add	r3, r5
 800edea:	6023      	str	r3, [r4, #0]
 800edec:	f8d8 3000 	ldr.w	r3, [r8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d038      	beq.n	800ee66 <_malloc_r+0xf6>
 800edf4:	685a      	ldr	r2, [r3, #4]
 800edf6:	42a2      	cmp	r2, r4
 800edf8:	d12b      	bne.n	800ee52 <_malloc_r+0xe2>
 800edfa:	2200      	movs	r2, #0
 800edfc:	605a      	str	r2, [r3, #4]
 800edfe:	e00f      	b.n	800ee20 <_malloc_r+0xb0>
 800ee00:	6822      	ldr	r2, [r4, #0]
 800ee02:	1b52      	subs	r2, r2, r5
 800ee04:	d41f      	bmi.n	800ee46 <_malloc_r+0xd6>
 800ee06:	2a0b      	cmp	r2, #11
 800ee08:	d917      	bls.n	800ee3a <_malloc_r+0xca>
 800ee0a:	1961      	adds	r1, r4, r5
 800ee0c:	42a3      	cmp	r3, r4
 800ee0e:	6025      	str	r5, [r4, #0]
 800ee10:	bf18      	it	ne
 800ee12:	6059      	strne	r1, [r3, #4]
 800ee14:	6863      	ldr	r3, [r4, #4]
 800ee16:	bf08      	it	eq
 800ee18:	f8c8 1000 	streq.w	r1, [r8]
 800ee1c:	5162      	str	r2, [r4, r5]
 800ee1e:	604b      	str	r3, [r1, #4]
 800ee20:	4638      	mov	r0, r7
 800ee22:	f104 060b 	add.w	r6, r4, #11
 800ee26:	f000 f829 	bl	800ee7c <__malloc_unlock>
 800ee2a:	f026 0607 	bic.w	r6, r6, #7
 800ee2e:	1d23      	adds	r3, r4, #4
 800ee30:	1af2      	subs	r2, r6, r3
 800ee32:	d0ae      	beq.n	800ed92 <_malloc_r+0x22>
 800ee34:	1b9b      	subs	r3, r3, r6
 800ee36:	50a3      	str	r3, [r4, r2]
 800ee38:	e7ab      	b.n	800ed92 <_malloc_r+0x22>
 800ee3a:	42a3      	cmp	r3, r4
 800ee3c:	6862      	ldr	r2, [r4, #4]
 800ee3e:	d1dd      	bne.n	800edfc <_malloc_r+0x8c>
 800ee40:	f8c8 2000 	str.w	r2, [r8]
 800ee44:	e7ec      	b.n	800ee20 <_malloc_r+0xb0>
 800ee46:	4623      	mov	r3, r4
 800ee48:	6864      	ldr	r4, [r4, #4]
 800ee4a:	e7ac      	b.n	800eda6 <_malloc_r+0x36>
 800ee4c:	4634      	mov	r4, r6
 800ee4e:	6876      	ldr	r6, [r6, #4]
 800ee50:	e7b4      	b.n	800edbc <_malloc_r+0x4c>
 800ee52:	4613      	mov	r3, r2
 800ee54:	e7cc      	b.n	800edf0 <_malloc_r+0x80>
 800ee56:	230c      	movs	r3, #12
 800ee58:	603b      	str	r3, [r7, #0]
 800ee5a:	4638      	mov	r0, r7
 800ee5c:	f000 f80e 	bl	800ee7c <__malloc_unlock>
 800ee60:	e797      	b.n	800ed92 <_malloc_r+0x22>
 800ee62:	6025      	str	r5, [r4, #0]
 800ee64:	e7dc      	b.n	800ee20 <_malloc_r+0xb0>
 800ee66:	605b      	str	r3, [r3, #4]
 800ee68:	deff      	udf	#255	; 0xff
 800ee6a:	bf00      	nop
 800ee6c:	20005420 	.word	0x20005420

0800ee70 <__malloc_lock>:
 800ee70:	4801      	ldr	r0, [pc, #4]	; (800ee78 <__malloc_lock+0x8>)
 800ee72:	f7ff bf01 	b.w	800ec78 <__retarget_lock_acquire_recursive>
 800ee76:	bf00      	nop
 800ee78:	2000541c 	.word	0x2000541c

0800ee7c <__malloc_unlock>:
 800ee7c:	4801      	ldr	r0, [pc, #4]	; (800ee84 <__malloc_unlock+0x8>)
 800ee7e:	f7ff befc 	b.w	800ec7a <__retarget_lock_release_recursive>
 800ee82:	bf00      	nop
 800ee84:	2000541c 	.word	0x2000541c

0800ee88 <__ssputs_r>:
 800ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8c:	688e      	ldr	r6, [r1, #8]
 800ee8e:	461f      	mov	r7, r3
 800ee90:	42be      	cmp	r6, r7
 800ee92:	680b      	ldr	r3, [r1, #0]
 800ee94:	4682      	mov	sl, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	4690      	mov	r8, r2
 800ee9a:	d82c      	bhi.n	800eef6 <__ssputs_r+0x6e>
 800ee9c:	898a      	ldrh	r2, [r1, #12]
 800ee9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eea2:	d026      	beq.n	800eef2 <__ssputs_r+0x6a>
 800eea4:	6965      	ldr	r5, [r4, #20]
 800eea6:	6909      	ldr	r1, [r1, #16]
 800eea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeac:	eba3 0901 	sub.w	r9, r3, r1
 800eeb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eeb4:	1c7b      	adds	r3, r7, #1
 800eeb6:	444b      	add	r3, r9
 800eeb8:	106d      	asrs	r5, r5, #1
 800eeba:	429d      	cmp	r5, r3
 800eebc:	bf38      	it	cc
 800eebe:	461d      	movcc	r5, r3
 800eec0:	0553      	lsls	r3, r2, #21
 800eec2:	d527      	bpl.n	800ef14 <__ssputs_r+0x8c>
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7ff ff53 	bl	800ed70 <_malloc_r>
 800eeca:	4606      	mov	r6, r0
 800eecc:	b360      	cbz	r0, 800ef28 <__ssputs_r+0xa0>
 800eece:	6921      	ldr	r1, [r4, #16]
 800eed0:	464a      	mov	r2, r9
 800eed2:	f7ff fed3 	bl	800ec7c <memcpy>
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	6126      	str	r6, [r4, #16]
 800eee4:	6165      	str	r5, [r4, #20]
 800eee6:	444e      	add	r6, r9
 800eee8:	eba5 0509 	sub.w	r5, r5, r9
 800eeec:	6026      	str	r6, [r4, #0]
 800eeee:	60a5      	str	r5, [r4, #8]
 800eef0:	463e      	mov	r6, r7
 800eef2:	42be      	cmp	r6, r7
 800eef4:	d900      	bls.n	800eef8 <__ssputs_r+0x70>
 800eef6:	463e      	mov	r6, r7
 800eef8:	6820      	ldr	r0, [r4, #0]
 800eefa:	4632      	mov	r2, r6
 800eefc:	4641      	mov	r1, r8
 800eefe:	f000 faab 	bl	800f458 <memmove>
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	1b9b      	subs	r3, r3, r6
 800ef06:	60a3      	str	r3, [r4, #8]
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	4433      	add	r3, r6
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	2000      	movs	r0, #0
 800ef10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef14:	462a      	mov	r2, r5
 800ef16:	f000 fac9 	bl	800f4ac <_realloc_r>
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d1e0      	bne.n	800eee2 <__ssputs_r+0x5a>
 800ef20:	6921      	ldr	r1, [r4, #16]
 800ef22:	4650      	mov	r0, sl
 800ef24:	f7ff feb8 	bl	800ec98 <_free_r>
 800ef28:	230c      	movs	r3, #12
 800ef2a:	f8ca 3000 	str.w	r3, [sl]
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3a:	e7e9      	b.n	800ef10 <__ssputs_r+0x88>

0800ef3c <_svfiprintf_r>:
 800ef3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef40:	4698      	mov	r8, r3
 800ef42:	898b      	ldrh	r3, [r1, #12]
 800ef44:	061b      	lsls	r3, r3, #24
 800ef46:	b09d      	sub	sp, #116	; 0x74
 800ef48:	4607      	mov	r7, r0
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	4614      	mov	r4, r2
 800ef4e:	d50e      	bpl.n	800ef6e <_svfiprintf_r+0x32>
 800ef50:	690b      	ldr	r3, [r1, #16]
 800ef52:	b963      	cbnz	r3, 800ef6e <_svfiprintf_r+0x32>
 800ef54:	2140      	movs	r1, #64	; 0x40
 800ef56:	f7ff ff0b 	bl	800ed70 <_malloc_r>
 800ef5a:	6028      	str	r0, [r5, #0]
 800ef5c:	6128      	str	r0, [r5, #16]
 800ef5e:	b920      	cbnz	r0, 800ef6a <_svfiprintf_r+0x2e>
 800ef60:	230c      	movs	r3, #12
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	f04f 30ff 	mov.w	r0, #4294967295
 800ef68:	e0d0      	b.n	800f10c <_svfiprintf_r+0x1d0>
 800ef6a:	2340      	movs	r3, #64	; 0x40
 800ef6c:	616b      	str	r3, [r5, #20]
 800ef6e:	2300      	movs	r3, #0
 800ef70:	9309      	str	r3, [sp, #36]	; 0x24
 800ef72:	2320      	movs	r3, #32
 800ef74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef7c:	2330      	movs	r3, #48	; 0x30
 800ef7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f124 <_svfiprintf_r+0x1e8>
 800ef82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef86:	f04f 0901 	mov.w	r9, #1
 800ef8a:	4623      	mov	r3, r4
 800ef8c:	469a      	mov	sl, r3
 800ef8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef92:	b10a      	cbz	r2, 800ef98 <_svfiprintf_r+0x5c>
 800ef94:	2a25      	cmp	r2, #37	; 0x25
 800ef96:	d1f9      	bne.n	800ef8c <_svfiprintf_r+0x50>
 800ef98:	ebba 0b04 	subs.w	fp, sl, r4
 800ef9c:	d00b      	beq.n	800efb6 <_svfiprintf_r+0x7a>
 800ef9e:	465b      	mov	r3, fp
 800efa0:	4622      	mov	r2, r4
 800efa2:	4629      	mov	r1, r5
 800efa4:	4638      	mov	r0, r7
 800efa6:	f7ff ff6f 	bl	800ee88 <__ssputs_r>
 800efaa:	3001      	adds	r0, #1
 800efac:	f000 80a9 	beq.w	800f102 <_svfiprintf_r+0x1c6>
 800efb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efb2:	445a      	add	r2, fp
 800efb4:	9209      	str	r2, [sp, #36]	; 0x24
 800efb6:	f89a 3000 	ldrb.w	r3, [sl]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 80a1 	beq.w	800f102 <_svfiprintf_r+0x1c6>
 800efc0:	2300      	movs	r3, #0
 800efc2:	f04f 32ff 	mov.w	r2, #4294967295
 800efc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efca:	f10a 0a01 	add.w	sl, sl, #1
 800efce:	9304      	str	r3, [sp, #16]
 800efd0:	9307      	str	r3, [sp, #28]
 800efd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efd6:	931a      	str	r3, [sp, #104]	; 0x68
 800efd8:	4654      	mov	r4, sl
 800efda:	2205      	movs	r2, #5
 800efdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe0:	4850      	ldr	r0, [pc, #320]	; (800f124 <_svfiprintf_r+0x1e8>)
 800efe2:	f7f1 f8f5 	bl	80001d0 <memchr>
 800efe6:	9a04      	ldr	r2, [sp, #16]
 800efe8:	b9d8      	cbnz	r0, 800f022 <_svfiprintf_r+0xe6>
 800efea:	06d0      	lsls	r0, r2, #27
 800efec:	bf44      	itt	mi
 800efee:	2320      	movmi	r3, #32
 800eff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eff4:	0711      	lsls	r1, r2, #28
 800eff6:	bf44      	itt	mi
 800eff8:	232b      	movmi	r3, #43	; 0x2b
 800effa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800effe:	f89a 3000 	ldrb.w	r3, [sl]
 800f002:	2b2a      	cmp	r3, #42	; 0x2a
 800f004:	d015      	beq.n	800f032 <_svfiprintf_r+0xf6>
 800f006:	9a07      	ldr	r2, [sp, #28]
 800f008:	4654      	mov	r4, sl
 800f00a:	2000      	movs	r0, #0
 800f00c:	f04f 0c0a 	mov.w	ip, #10
 800f010:	4621      	mov	r1, r4
 800f012:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f016:	3b30      	subs	r3, #48	; 0x30
 800f018:	2b09      	cmp	r3, #9
 800f01a:	d94d      	bls.n	800f0b8 <_svfiprintf_r+0x17c>
 800f01c:	b1b0      	cbz	r0, 800f04c <_svfiprintf_r+0x110>
 800f01e:	9207      	str	r2, [sp, #28]
 800f020:	e014      	b.n	800f04c <_svfiprintf_r+0x110>
 800f022:	eba0 0308 	sub.w	r3, r0, r8
 800f026:	fa09 f303 	lsl.w	r3, r9, r3
 800f02a:	4313      	orrs	r3, r2
 800f02c:	9304      	str	r3, [sp, #16]
 800f02e:	46a2      	mov	sl, r4
 800f030:	e7d2      	b.n	800efd8 <_svfiprintf_r+0x9c>
 800f032:	9b03      	ldr	r3, [sp, #12]
 800f034:	1d19      	adds	r1, r3, #4
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	9103      	str	r1, [sp, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	bfbb      	ittet	lt
 800f03e:	425b      	neglt	r3, r3
 800f040:	f042 0202 	orrlt.w	r2, r2, #2
 800f044:	9307      	strge	r3, [sp, #28]
 800f046:	9307      	strlt	r3, [sp, #28]
 800f048:	bfb8      	it	lt
 800f04a:	9204      	strlt	r2, [sp, #16]
 800f04c:	7823      	ldrb	r3, [r4, #0]
 800f04e:	2b2e      	cmp	r3, #46	; 0x2e
 800f050:	d10c      	bne.n	800f06c <_svfiprintf_r+0x130>
 800f052:	7863      	ldrb	r3, [r4, #1]
 800f054:	2b2a      	cmp	r3, #42	; 0x2a
 800f056:	d134      	bne.n	800f0c2 <_svfiprintf_r+0x186>
 800f058:	9b03      	ldr	r3, [sp, #12]
 800f05a:	1d1a      	adds	r2, r3, #4
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	9203      	str	r2, [sp, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	bfb8      	it	lt
 800f064:	f04f 33ff 	movlt.w	r3, #4294967295
 800f068:	3402      	adds	r4, #2
 800f06a:	9305      	str	r3, [sp, #20]
 800f06c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f134 <_svfiprintf_r+0x1f8>
 800f070:	7821      	ldrb	r1, [r4, #0]
 800f072:	2203      	movs	r2, #3
 800f074:	4650      	mov	r0, sl
 800f076:	f7f1 f8ab 	bl	80001d0 <memchr>
 800f07a:	b138      	cbz	r0, 800f08c <_svfiprintf_r+0x150>
 800f07c:	9b04      	ldr	r3, [sp, #16]
 800f07e:	eba0 000a 	sub.w	r0, r0, sl
 800f082:	2240      	movs	r2, #64	; 0x40
 800f084:	4082      	lsls	r2, r0
 800f086:	4313      	orrs	r3, r2
 800f088:	3401      	adds	r4, #1
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f090:	4825      	ldr	r0, [pc, #148]	; (800f128 <_svfiprintf_r+0x1ec>)
 800f092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f096:	2206      	movs	r2, #6
 800f098:	f7f1 f89a 	bl	80001d0 <memchr>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d038      	beq.n	800f112 <_svfiprintf_r+0x1d6>
 800f0a0:	4b22      	ldr	r3, [pc, #136]	; (800f12c <_svfiprintf_r+0x1f0>)
 800f0a2:	bb1b      	cbnz	r3, 800f0ec <_svfiprintf_r+0x1b0>
 800f0a4:	9b03      	ldr	r3, [sp, #12]
 800f0a6:	3307      	adds	r3, #7
 800f0a8:	f023 0307 	bic.w	r3, r3, #7
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b2:	4433      	add	r3, r6
 800f0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b6:	e768      	b.n	800ef8a <_svfiprintf_r+0x4e>
 800f0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0bc:	460c      	mov	r4, r1
 800f0be:	2001      	movs	r0, #1
 800f0c0:	e7a6      	b.n	800f010 <_svfiprintf_r+0xd4>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	3401      	adds	r4, #1
 800f0c6:	9305      	str	r3, [sp, #20]
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	f04f 0c0a 	mov.w	ip, #10
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0d4:	3a30      	subs	r2, #48	; 0x30
 800f0d6:	2a09      	cmp	r2, #9
 800f0d8:	d903      	bls.n	800f0e2 <_svfiprintf_r+0x1a6>
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d0c6      	beq.n	800f06c <_svfiprintf_r+0x130>
 800f0de:	9105      	str	r1, [sp, #20]
 800f0e0:	e7c4      	b.n	800f06c <_svfiprintf_r+0x130>
 800f0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e7f0      	b.n	800f0ce <_svfiprintf_r+0x192>
 800f0ec:	ab03      	add	r3, sp, #12
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	462a      	mov	r2, r5
 800f0f2:	4b0f      	ldr	r3, [pc, #60]	; (800f130 <_svfiprintf_r+0x1f4>)
 800f0f4:	a904      	add	r1, sp, #16
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	f3af 8000 	nop.w
 800f0fc:	1c42      	adds	r2, r0, #1
 800f0fe:	4606      	mov	r6, r0
 800f100:	d1d6      	bne.n	800f0b0 <_svfiprintf_r+0x174>
 800f102:	89ab      	ldrh	r3, [r5, #12]
 800f104:	065b      	lsls	r3, r3, #25
 800f106:	f53f af2d 	bmi.w	800ef64 <_svfiprintf_r+0x28>
 800f10a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f10c:	b01d      	add	sp, #116	; 0x74
 800f10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f112:	ab03      	add	r3, sp, #12
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	462a      	mov	r2, r5
 800f118:	4b05      	ldr	r3, [pc, #20]	; (800f130 <_svfiprintf_r+0x1f4>)
 800f11a:	a904      	add	r1, sp, #16
 800f11c:	4638      	mov	r0, r7
 800f11e:	f000 f879 	bl	800f214 <_printf_i>
 800f122:	e7eb      	b.n	800f0fc <_svfiprintf_r+0x1c0>
 800f124:	08010918 	.word	0x08010918
 800f128:	08010922 	.word	0x08010922
 800f12c:	00000000 	.word	0x00000000
 800f130:	0800ee89 	.word	0x0800ee89
 800f134:	0801091e 	.word	0x0801091e

0800f138 <_printf_common>:
 800f138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f13c:	4616      	mov	r6, r2
 800f13e:	4699      	mov	r9, r3
 800f140:	688a      	ldr	r2, [r1, #8]
 800f142:	690b      	ldr	r3, [r1, #16]
 800f144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f148:	4293      	cmp	r3, r2
 800f14a:	bfb8      	it	lt
 800f14c:	4613      	movlt	r3, r2
 800f14e:	6033      	str	r3, [r6, #0]
 800f150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f154:	4607      	mov	r7, r0
 800f156:	460c      	mov	r4, r1
 800f158:	b10a      	cbz	r2, 800f15e <_printf_common+0x26>
 800f15a:	3301      	adds	r3, #1
 800f15c:	6033      	str	r3, [r6, #0]
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	0699      	lsls	r1, r3, #26
 800f162:	bf42      	ittt	mi
 800f164:	6833      	ldrmi	r3, [r6, #0]
 800f166:	3302      	addmi	r3, #2
 800f168:	6033      	strmi	r3, [r6, #0]
 800f16a:	6825      	ldr	r5, [r4, #0]
 800f16c:	f015 0506 	ands.w	r5, r5, #6
 800f170:	d106      	bne.n	800f180 <_printf_common+0x48>
 800f172:	f104 0a19 	add.w	sl, r4, #25
 800f176:	68e3      	ldr	r3, [r4, #12]
 800f178:	6832      	ldr	r2, [r6, #0]
 800f17a:	1a9b      	subs	r3, r3, r2
 800f17c:	42ab      	cmp	r3, r5
 800f17e:	dc26      	bgt.n	800f1ce <_printf_common+0x96>
 800f180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f184:	1e13      	subs	r3, r2, #0
 800f186:	6822      	ldr	r2, [r4, #0]
 800f188:	bf18      	it	ne
 800f18a:	2301      	movne	r3, #1
 800f18c:	0692      	lsls	r2, r2, #26
 800f18e:	d42b      	bmi.n	800f1e8 <_printf_common+0xb0>
 800f190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f194:	4649      	mov	r1, r9
 800f196:	4638      	mov	r0, r7
 800f198:	47c0      	blx	r8
 800f19a:	3001      	adds	r0, #1
 800f19c:	d01e      	beq.n	800f1dc <_printf_common+0xa4>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	6922      	ldr	r2, [r4, #16]
 800f1a2:	f003 0306 	and.w	r3, r3, #6
 800f1a6:	2b04      	cmp	r3, #4
 800f1a8:	bf02      	ittt	eq
 800f1aa:	68e5      	ldreq	r5, [r4, #12]
 800f1ac:	6833      	ldreq	r3, [r6, #0]
 800f1ae:	1aed      	subeq	r5, r5, r3
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	bf0c      	ite	eq
 800f1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1b8:	2500      	movne	r5, #0
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	bfc4      	itt	gt
 800f1be:	1a9b      	subgt	r3, r3, r2
 800f1c0:	18ed      	addgt	r5, r5, r3
 800f1c2:	2600      	movs	r6, #0
 800f1c4:	341a      	adds	r4, #26
 800f1c6:	42b5      	cmp	r5, r6
 800f1c8:	d11a      	bne.n	800f200 <_printf_common+0xc8>
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	e008      	b.n	800f1e0 <_printf_common+0xa8>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4652      	mov	r2, sl
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	4638      	mov	r0, r7
 800f1d6:	47c0      	blx	r8
 800f1d8:	3001      	adds	r0, #1
 800f1da:	d103      	bne.n	800f1e4 <_printf_common+0xac>
 800f1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1e4:	3501      	adds	r5, #1
 800f1e6:	e7c6      	b.n	800f176 <_printf_common+0x3e>
 800f1e8:	18e1      	adds	r1, r4, r3
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	2030      	movs	r0, #48	; 0x30
 800f1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1f2:	4422      	add	r2, r4
 800f1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f1f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f1fc:	3302      	adds	r3, #2
 800f1fe:	e7c7      	b.n	800f190 <_printf_common+0x58>
 800f200:	2301      	movs	r3, #1
 800f202:	4622      	mov	r2, r4
 800f204:	4649      	mov	r1, r9
 800f206:	4638      	mov	r0, r7
 800f208:	47c0      	blx	r8
 800f20a:	3001      	adds	r0, #1
 800f20c:	d0e6      	beq.n	800f1dc <_printf_common+0xa4>
 800f20e:	3601      	adds	r6, #1
 800f210:	e7d9      	b.n	800f1c6 <_printf_common+0x8e>
	...

0800f214 <_printf_i>:
 800f214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f218:	7e0f      	ldrb	r7, [r1, #24]
 800f21a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f21c:	2f78      	cmp	r7, #120	; 0x78
 800f21e:	4691      	mov	r9, r2
 800f220:	4680      	mov	r8, r0
 800f222:	460c      	mov	r4, r1
 800f224:	469a      	mov	sl, r3
 800f226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f22a:	d807      	bhi.n	800f23c <_printf_i+0x28>
 800f22c:	2f62      	cmp	r7, #98	; 0x62
 800f22e:	d80a      	bhi.n	800f246 <_printf_i+0x32>
 800f230:	2f00      	cmp	r7, #0
 800f232:	f000 80d4 	beq.w	800f3de <_printf_i+0x1ca>
 800f236:	2f58      	cmp	r7, #88	; 0x58
 800f238:	f000 80c0 	beq.w	800f3bc <_printf_i+0x1a8>
 800f23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f244:	e03a      	b.n	800f2bc <_printf_i+0xa8>
 800f246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f24a:	2b15      	cmp	r3, #21
 800f24c:	d8f6      	bhi.n	800f23c <_printf_i+0x28>
 800f24e:	a101      	add	r1, pc, #4	; (adr r1, 800f254 <_printf_i+0x40>)
 800f250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f254:	0800f2ad 	.word	0x0800f2ad
 800f258:	0800f2c1 	.word	0x0800f2c1
 800f25c:	0800f23d 	.word	0x0800f23d
 800f260:	0800f23d 	.word	0x0800f23d
 800f264:	0800f23d 	.word	0x0800f23d
 800f268:	0800f23d 	.word	0x0800f23d
 800f26c:	0800f2c1 	.word	0x0800f2c1
 800f270:	0800f23d 	.word	0x0800f23d
 800f274:	0800f23d 	.word	0x0800f23d
 800f278:	0800f23d 	.word	0x0800f23d
 800f27c:	0800f23d 	.word	0x0800f23d
 800f280:	0800f3c5 	.word	0x0800f3c5
 800f284:	0800f2ed 	.word	0x0800f2ed
 800f288:	0800f37f 	.word	0x0800f37f
 800f28c:	0800f23d 	.word	0x0800f23d
 800f290:	0800f23d 	.word	0x0800f23d
 800f294:	0800f3e7 	.word	0x0800f3e7
 800f298:	0800f23d 	.word	0x0800f23d
 800f29c:	0800f2ed 	.word	0x0800f2ed
 800f2a0:	0800f23d 	.word	0x0800f23d
 800f2a4:	0800f23d 	.word	0x0800f23d
 800f2a8:	0800f387 	.word	0x0800f387
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	1d1a      	adds	r2, r3, #4
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	602a      	str	r2, [r5, #0]
 800f2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e09f      	b.n	800f400 <_printf_i+0x1ec>
 800f2c0:	6820      	ldr	r0, [r4, #0]
 800f2c2:	682b      	ldr	r3, [r5, #0]
 800f2c4:	0607      	lsls	r7, r0, #24
 800f2c6:	f103 0104 	add.w	r1, r3, #4
 800f2ca:	6029      	str	r1, [r5, #0]
 800f2cc:	d501      	bpl.n	800f2d2 <_printf_i+0xbe>
 800f2ce:	681e      	ldr	r6, [r3, #0]
 800f2d0:	e003      	b.n	800f2da <_printf_i+0xc6>
 800f2d2:	0646      	lsls	r6, r0, #25
 800f2d4:	d5fb      	bpl.n	800f2ce <_printf_i+0xba>
 800f2d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f2da:	2e00      	cmp	r6, #0
 800f2dc:	da03      	bge.n	800f2e6 <_printf_i+0xd2>
 800f2de:	232d      	movs	r3, #45	; 0x2d
 800f2e0:	4276      	negs	r6, r6
 800f2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2e6:	485a      	ldr	r0, [pc, #360]	; (800f450 <_printf_i+0x23c>)
 800f2e8:	230a      	movs	r3, #10
 800f2ea:	e012      	b.n	800f312 <_printf_i+0xfe>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	6820      	ldr	r0, [r4, #0]
 800f2f0:	1d19      	adds	r1, r3, #4
 800f2f2:	6029      	str	r1, [r5, #0]
 800f2f4:	0605      	lsls	r5, r0, #24
 800f2f6:	d501      	bpl.n	800f2fc <_printf_i+0xe8>
 800f2f8:	681e      	ldr	r6, [r3, #0]
 800f2fa:	e002      	b.n	800f302 <_printf_i+0xee>
 800f2fc:	0641      	lsls	r1, r0, #25
 800f2fe:	d5fb      	bpl.n	800f2f8 <_printf_i+0xe4>
 800f300:	881e      	ldrh	r6, [r3, #0]
 800f302:	4853      	ldr	r0, [pc, #332]	; (800f450 <_printf_i+0x23c>)
 800f304:	2f6f      	cmp	r7, #111	; 0x6f
 800f306:	bf0c      	ite	eq
 800f308:	2308      	moveq	r3, #8
 800f30a:	230a      	movne	r3, #10
 800f30c:	2100      	movs	r1, #0
 800f30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f312:	6865      	ldr	r5, [r4, #4]
 800f314:	60a5      	str	r5, [r4, #8]
 800f316:	2d00      	cmp	r5, #0
 800f318:	bfa2      	ittt	ge
 800f31a:	6821      	ldrge	r1, [r4, #0]
 800f31c:	f021 0104 	bicge.w	r1, r1, #4
 800f320:	6021      	strge	r1, [r4, #0]
 800f322:	b90e      	cbnz	r6, 800f328 <_printf_i+0x114>
 800f324:	2d00      	cmp	r5, #0
 800f326:	d04b      	beq.n	800f3c0 <_printf_i+0x1ac>
 800f328:	4615      	mov	r5, r2
 800f32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f32e:	fb03 6711 	mls	r7, r3, r1, r6
 800f332:	5dc7      	ldrb	r7, [r0, r7]
 800f334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f338:	4637      	mov	r7, r6
 800f33a:	42bb      	cmp	r3, r7
 800f33c:	460e      	mov	r6, r1
 800f33e:	d9f4      	bls.n	800f32a <_printf_i+0x116>
 800f340:	2b08      	cmp	r3, #8
 800f342:	d10b      	bne.n	800f35c <_printf_i+0x148>
 800f344:	6823      	ldr	r3, [r4, #0]
 800f346:	07de      	lsls	r6, r3, #31
 800f348:	d508      	bpl.n	800f35c <_printf_i+0x148>
 800f34a:	6923      	ldr	r3, [r4, #16]
 800f34c:	6861      	ldr	r1, [r4, #4]
 800f34e:	4299      	cmp	r1, r3
 800f350:	bfde      	ittt	le
 800f352:	2330      	movle	r3, #48	; 0x30
 800f354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f35c:	1b52      	subs	r2, r2, r5
 800f35e:	6122      	str	r2, [r4, #16]
 800f360:	f8cd a000 	str.w	sl, [sp]
 800f364:	464b      	mov	r3, r9
 800f366:	aa03      	add	r2, sp, #12
 800f368:	4621      	mov	r1, r4
 800f36a:	4640      	mov	r0, r8
 800f36c:	f7ff fee4 	bl	800f138 <_printf_common>
 800f370:	3001      	adds	r0, #1
 800f372:	d14a      	bne.n	800f40a <_printf_i+0x1f6>
 800f374:	f04f 30ff 	mov.w	r0, #4294967295
 800f378:	b004      	add	sp, #16
 800f37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	f043 0320 	orr.w	r3, r3, #32
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	4833      	ldr	r0, [pc, #204]	; (800f454 <_printf_i+0x240>)
 800f388:	2778      	movs	r7, #120	; 0x78
 800f38a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	6829      	ldr	r1, [r5, #0]
 800f392:	061f      	lsls	r7, r3, #24
 800f394:	f851 6b04 	ldr.w	r6, [r1], #4
 800f398:	d402      	bmi.n	800f3a0 <_printf_i+0x18c>
 800f39a:	065f      	lsls	r7, r3, #25
 800f39c:	bf48      	it	mi
 800f39e:	b2b6      	uxthmi	r6, r6
 800f3a0:	07df      	lsls	r7, r3, #31
 800f3a2:	bf48      	it	mi
 800f3a4:	f043 0320 	orrmi.w	r3, r3, #32
 800f3a8:	6029      	str	r1, [r5, #0]
 800f3aa:	bf48      	it	mi
 800f3ac:	6023      	strmi	r3, [r4, #0]
 800f3ae:	b91e      	cbnz	r6, 800f3b8 <_printf_i+0x1a4>
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	f023 0320 	bic.w	r3, r3, #32
 800f3b6:	6023      	str	r3, [r4, #0]
 800f3b8:	2310      	movs	r3, #16
 800f3ba:	e7a7      	b.n	800f30c <_printf_i+0xf8>
 800f3bc:	4824      	ldr	r0, [pc, #144]	; (800f450 <_printf_i+0x23c>)
 800f3be:	e7e4      	b.n	800f38a <_printf_i+0x176>
 800f3c0:	4615      	mov	r5, r2
 800f3c2:	e7bd      	b.n	800f340 <_printf_i+0x12c>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	6826      	ldr	r6, [r4, #0]
 800f3c8:	6961      	ldr	r1, [r4, #20]
 800f3ca:	1d18      	adds	r0, r3, #4
 800f3cc:	6028      	str	r0, [r5, #0]
 800f3ce:	0635      	lsls	r5, r6, #24
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	d501      	bpl.n	800f3d8 <_printf_i+0x1c4>
 800f3d4:	6019      	str	r1, [r3, #0]
 800f3d6:	e002      	b.n	800f3de <_printf_i+0x1ca>
 800f3d8:	0670      	lsls	r0, r6, #25
 800f3da:	d5fb      	bpl.n	800f3d4 <_printf_i+0x1c0>
 800f3dc:	8019      	strh	r1, [r3, #0]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	6123      	str	r3, [r4, #16]
 800f3e2:	4615      	mov	r5, r2
 800f3e4:	e7bc      	b.n	800f360 <_printf_i+0x14c>
 800f3e6:	682b      	ldr	r3, [r5, #0]
 800f3e8:	1d1a      	adds	r2, r3, #4
 800f3ea:	602a      	str	r2, [r5, #0]
 800f3ec:	681d      	ldr	r5, [r3, #0]
 800f3ee:	6862      	ldr	r2, [r4, #4]
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f7f0 feec 	bl	80001d0 <memchr>
 800f3f8:	b108      	cbz	r0, 800f3fe <_printf_i+0x1ea>
 800f3fa:	1b40      	subs	r0, r0, r5
 800f3fc:	6060      	str	r0, [r4, #4]
 800f3fe:	6863      	ldr	r3, [r4, #4]
 800f400:	6123      	str	r3, [r4, #16]
 800f402:	2300      	movs	r3, #0
 800f404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f408:	e7aa      	b.n	800f360 <_printf_i+0x14c>
 800f40a:	6923      	ldr	r3, [r4, #16]
 800f40c:	462a      	mov	r2, r5
 800f40e:	4649      	mov	r1, r9
 800f410:	4640      	mov	r0, r8
 800f412:	47d0      	blx	sl
 800f414:	3001      	adds	r0, #1
 800f416:	d0ad      	beq.n	800f374 <_printf_i+0x160>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	079b      	lsls	r3, r3, #30
 800f41c:	d413      	bmi.n	800f446 <_printf_i+0x232>
 800f41e:	68e0      	ldr	r0, [r4, #12]
 800f420:	9b03      	ldr	r3, [sp, #12]
 800f422:	4298      	cmp	r0, r3
 800f424:	bfb8      	it	lt
 800f426:	4618      	movlt	r0, r3
 800f428:	e7a6      	b.n	800f378 <_printf_i+0x164>
 800f42a:	2301      	movs	r3, #1
 800f42c:	4632      	mov	r2, r6
 800f42e:	4649      	mov	r1, r9
 800f430:	4640      	mov	r0, r8
 800f432:	47d0      	blx	sl
 800f434:	3001      	adds	r0, #1
 800f436:	d09d      	beq.n	800f374 <_printf_i+0x160>
 800f438:	3501      	adds	r5, #1
 800f43a:	68e3      	ldr	r3, [r4, #12]
 800f43c:	9903      	ldr	r1, [sp, #12]
 800f43e:	1a5b      	subs	r3, r3, r1
 800f440:	42ab      	cmp	r3, r5
 800f442:	dcf2      	bgt.n	800f42a <_printf_i+0x216>
 800f444:	e7eb      	b.n	800f41e <_printf_i+0x20a>
 800f446:	2500      	movs	r5, #0
 800f448:	f104 0619 	add.w	r6, r4, #25
 800f44c:	e7f5      	b.n	800f43a <_printf_i+0x226>
 800f44e:	bf00      	nop
 800f450:	08010929 	.word	0x08010929
 800f454:	0801093a 	.word	0x0801093a

0800f458 <memmove>:
 800f458:	4288      	cmp	r0, r1
 800f45a:	b510      	push	{r4, lr}
 800f45c:	eb01 0402 	add.w	r4, r1, r2
 800f460:	d902      	bls.n	800f468 <memmove+0x10>
 800f462:	4284      	cmp	r4, r0
 800f464:	4623      	mov	r3, r4
 800f466:	d807      	bhi.n	800f478 <memmove+0x20>
 800f468:	1e43      	subs	r3, r0, #1
 800f46a:	42a1      	cmp	r1, r4
 800f46c:	d008      	beq.n	800f480 <memmove+0x28>
 800f46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f476:	e7f8      	b.n	800f46a <memmove+0x12>
 800f478:	4402      	add	r2, r0
 800f47a:	4601      	mov	r1, r0
 800f47c:	428a      	cmp	r2, r1
 800f47e:	d100      	bne.n	800f482 <memmove+0x2a>
 800f480:	bd10      	pop	{r4, pc}
 800f482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f48a:	e7f7      	b.n	800f47c <memmove+0x24>

0800f48c <_sbrk_r>:
 800f48c:	b538      	push	{r3, r4, r5, lr}
 800f48e:	4d06      	ldr	r5, [pc, #24]	; (800f4a8 <_sbrk_r+0x1c>)
 800f490:	2300      	movs	r3, #0
 800f492:	4604      	mov	r4, r0
 800f494:	4608      	mov	r0, r1
 800f496:	602b      	str	r3, [r5, #0]
 800f498:	f7f7 fb52 	bl	8006b40 <_sbrk>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d102      	bne.n	800f4a6 <_sbrk_r+0x1a>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	b103      	cbz	r3, 800f4a6 <_sbrk_r+0x1a>
 800f4a4:	6023      	str	r3, [r4, #0]
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}
 800f4a8:	20005418 	.word	0x20005418

0800f4ac <_realloc_r>:
 800f4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b0:	4680      	mov	r8, r0
 800f4b2:	4614      	mov	r4, r2
 800f4b4:	460e      	mov	r6, r1
 800f4b6:	b921      	cbnz	r1, 800f4c2 <_realloc_r+0x16>
 800f4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4bc:	4611      	mov	r1, r2
 800f4be:	f7ff bc57 	b.w	800ed70 <_malloc_r>
 800f4c2:	b92a      	cbnz	r2, 800f4d0 <_realloc_r+0x24>
 800f4c4:	f7ff fbe8 	bl	800ec98 <_free_r>
 800f4c8:	4625      	mov	r5, r4
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d0:	f000 f81b 	bl	800f50a <_malloc_usable_size_r>
 800f4d4:	4284      	cmp	r4, r0
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	d802      	bhi.n	800f4e0 <_realloc_r+0x34>
 800f4da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4de:	d812      	bhi.n	800f506 <_realloc_r+0x5a>
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	4640      	mov	r0, r8
 800f4e4:	f7ff fc44 	bl	800ed70 <_malloc_r>
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d0ed      	beq.n	800f4ca <_realloc_r+0x1e>
 800f4ee:	42bc      	cmp	r4, r7
 800f4f0:	4622      	mov	r2, r4
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	bf28      	it	cs
 800f4f6:	463a      	movcs	r2, r7
 800f4f8:	f7ff fbc0 	bl	800ec7c <memcpy>
 800f4fc:	4631      	mov	r1, r6
 800f4fe:	4640      	mov	r0, r8
 800f500:	f7ff fbca 	bl	800ec98 <_free_r>
 800f504:	e7e1      	b.n	800f4ca <_realloc_r+0x1e>
 800f506:	4635      	mov	r5, r6
 800f508:	e7df      	b.n	800f4ca <_realloc_r+0x1e>

0800f50a <_malloc_usable_size_r>:
 800f50a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f50e:	1f18      	subs	r0, r3, #4
 800f510:	2b00      	cmp	r3, #0
 800f512:	bfbc      	itt	lt
 800f514:	580b      	ldrlt	r3, [r1, r0]
 800f516:	18c0      	addlt	r0, r0, r3
 800f518:	4770      	bx	lr
	...

0800f51c <sqrtf>:
 800f51c:	b508      	push	{r3, lr}
 800f51e:	ed2d 8b02 	vpush	{d8}
 800f522:	eeb0 8a40 	vmov.f32	s16, s0
 800f526:	f000 f91f 	bl	800f768 <__ieee754_sqrtf>
 800f52a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f532:	d60c      	bvs.n	800f54e <sqrtf+0x32>
 800f534:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f554 <sqrtf+0x38>
 800f538:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f540:	d505      	bpl.n	800f54e <sqrtf+0x32>
 800f542:	f7ff fb6f 	bl	800ec24 <__errno>
 800f546:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f54a:	2321      	movs	r3, #33	; 0x21
 800f54c:	6003      	str	r3, [r0, #0]
 800f54e:	ecbd 8b02 	vpop	{d8}
 800f552:	bd08      	pop	{r3, pc}
 800f554:	00000000 	.word	0x00000000

0800f558 <atanf>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	ee10 5a10 	vmov	r5, s0
 800f55e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f562:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f566:	eef0 7a40 	vmov.f32	s15, s0
 800f56a:	db10      	blt.n	800f58e <atanf+0x36>
 800f56c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f570:	dd04      	ble.n	800f57c <atanf+0x24>
 800f572:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f576:	eeb0 0a67 	vmov.f32	s0, s15
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f6b4 <atanf+0x15c>
 800f580:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f6b8 <atanf+0x160>
 800f584:	2d00      	cmp	r5, #0
 800f586:	bfd8      	it	le
 800f588:	eef0 7a47 	vmovle.f32	s15, s14
 800f58c:	e7f3      	b.n	800f576 <atanf+0x1e>
 800f58e:	4b4b      	ldr	r3, [pc, #300]	; (800f6bc <atanf+0x164>)
 800f590:	429c      	cmp	r4, r3
 800f592:	dc10      	bgt.n	800f5b6 <atanf+0x5e>
 800f594:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f598:	da0a      	bge.n	800f5b0 <atanf+0x58>
 800f59a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f6c0 <atanf+0x168>
 800f59e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ae:	dce2      	bgt.n	800f576 <atanf+0x1e>
 800f5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b4:	e013      	b.n	800f5de <atanf+0x86>
 800f5b6:	f000 f8a3 	bl	800f700 <fabsf>
 800f5ba:	4b42      	ldr	r3, [pc, #264]	; (800f6c4 <atanf+0x16c>)
 800f5bc:	429c      	cmp	r4, r3
 800f5be:	dc4f      	bgt.n	800f660 <atanf+0x108>
 800f5c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f5c4:	429c      	cmp	r4, r3
 800f5c6:	dc41      	bgt.n	800f64c <atanf+0xf4>
 800f5c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f5cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f5d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f5da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f5e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f6c8 <atanf+0x170>
 800f5e8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f6cc <atanf+0x174>
 800f5ec:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f6d0 <atanf+0x178>
 800f5f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f5f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f5f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f6d4 <atanf+0x17c>
 800f5fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f600:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f6d8 <atanf+0x180>
 800f604:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f608:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f6dc <atanf+0x184>
 800f60c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f610:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f6e0 <atanf+0x188>
 800f614:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f618:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f6e4 <atanf+0x18c>
 800f61c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f620:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f6e8 <atanf+0x190>
 800f624:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f628:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f6ec <atanf+0x194>
 800f62c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f630:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f6f0 <atanf+0x198>
 800f634:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f638:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f63c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f640:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f644:	d121      	bne.n	800f68a <atanf+0x132>
 800f646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f64a:	e794      	b.n	800f576 <atanf+0x1e>
 800f64c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f650:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f654:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f658:	2301      	movs	r3, #1
 800f65a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f65e:	e7be      	b.n	800f5de <atanf+0x86>
 800f660:	4b24      	ldr	r3, [pc, #144]	; (800f6f4 <atanf+0x19c>)
 800f662:	429c      	cmp	r4, r3
 800f664:	dc0b      	bgt.n	800f67e <atanf+0x126>
 800f666:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f66a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f66e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f672:	2302      	movs	r3, #2
 800f674:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f67c:	e7af      	b.n	800f5de <atanf+0x86>
 800f67e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f682:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f686:	2303      	movs	r3, #3
 800f688:	e7a9      	b.n	800f5de <atanf+0x86>
 800f68a:	4a1b      	ldr	r2, [pc, #108]	; (800f6f8 <atanf+0x1a0>)
 800f68c:	491b      	ldr	r1, [pc, #108]	; (800f6fc <atanf+0x1a4>)
 800f68e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f692:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f696:	edd3 6a00 	vldr	s13, [r3]
 800f69a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f69e:	2d00      	cmp	r5, #0
 800f6a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f6a4:	edd2 7a00 	vldr	s15, [r2]
 800f6a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6ac:	bfb8      	it	lt
 800f6ae:	eef1 7a67 	vneglt.f32	s15, s15
 800f6b2:	e760      	b.n	800f576 <atanf+0x1e>
 800f6b4:	3fc90fdb 	.word	0x3fc90fdb
 800f6b8:	bfc90fdb 	.word	0xbfc90fdb
 800f6bc:	3edfffff 	.word	0x3edfffff
 800f6c0:	7149f2ca 	.word	0x7149f2ca
 800f6c4:	3f97ffff 	.word	0x3f97ffff
 800f6c8:	3c8569d7 	.word	0x3c8569d7
 800f6cc:	3d4bda59 	.word	0x3d4bda59
 800f6d0:	bd6ef16b 	.word	0xbd6ef16b
 800f6d4:	3d886b35 	.word	0x3d886b35
 800f6d8:	3dba2e6e 	.word	0x3dba2e6e
 800f6dc:	3e124925 	.word	0x3e124925
 800f6e0:	3eaaaaab 	.word	0x3eaaaaab
 800f6e4:	bd15a221 	.word	0xbd15a221
 800f6e8:	bd9d8795 	.word	0xbd9d8795
 800f6ec:	bde38e38 	.word	0xbde38e38
 800f6f0:	be4ccccd 	.word	0xbe4ccccd
 800f6f4:	401bffff 	.word	0x401bffff
 800f6f8:	0801094c 	.word	0x0801094c
 800f6fc:	0801095c 	.word	0x0801095c

0800f700 <fabsf>:
 800f700:	ee10 3a10 	vmov	r3, s0
 800f704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f708:	ee00 3a10 	vmov	s0, r3
 800f70c:	4770      	bx	lr
	...

0800f710 <tanf>:
 800f710:	ee10 3a10 	vmov	r3, s0
 800f714:	b507      	push	{r0, r1, r2, lr}
 800f716:	4a12      	ldr	r2, [pc, #72]	; (800f760 <tanf+0x50>)
 800f718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f71c:	4293      	cmp	r3, r2
 800f71e:	dc07      	bgt.n	800f730 <tanf+0x20>
 800f720:	eddf 0a10 	vldr	s1, [pc, #64]	; 800f764 <tanf+0x54>
 800f724:	2001      	movs	r0, #1
 800f726:	b003      	add	sp, #12
 800f728:	f85d eb04 	ldr.w	lr, [sp], #4
 800f72c:	f000 b820 	b.w	800f770 <__kernel_tanf>
 800f730:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f734:	db04      	blt.n	800f740 <tanf+0x30>
 800f736:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f73a:	b003      	add	sp, #12
 800f73c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f740:	4668      	mov	r0, sp
 800f742:	f000 f8f5 	bl	800f930 <__ieee754_rem_pio2f>
 800f746:	0040      	lsls	r0, r0, #1
 800f748:	f000 0002 	and.w	r0, r0, #2
 800f74c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f750:	ed9d 0a00 	vldr	s0, [sp]
 800f754:	f1c0 0001 	rsb	r0, r0, #1
 800f758:	f000 f80a 	bl	800f770 <__kernel_tanf>
 800f75c:	e7ed      	b.n	800f73a <tanf+0x2a>
 800f75e:	bf00      	nop
 800f760:	3f490fda 	.word	0x3f490fda
 800f764:	00000000 	.word	0x00000000

0800f768 <__ieee754_sqrtf>:
 800f768:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f76c:	4770      	bx	lr
	...

0800f770 <__kernel_tanf>:
 800f770:	b508      	push	{r3, lr}
 800f772:	ee10 3a10 	vmov	r3, s0
 800f776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f77a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800f77e:	eef0 7a40 	vmov.f32	s15, s0
 800f782:	da17      	bge.n	800f7b4 <__kernel_tanf+0x44>
 800f784:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800f788:	ee17 1a10 	vmov	r1, s14
 800f78c:	bb41      	cbnz	r1, 800f7e0 <__kernel_tanf+0x70>
 800f78e:	1c43      	adds	r3, r0, #1
 800f790:	4313      	orrs	r3, r2
 800f792:	d108      	bne.n	800f7a6 <__kernel_tanf+0x36>
 800f794:	f7ff ffb4 	bl	800f700 <fabsf>
 800f798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f79c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f7a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a4:	bd08      	pop	{r3, pc}
 800f7a6:	2801      	cmp	r0, #1
 800f7a8:	d0fa      	beq.n	800f7a0 <__kernel_tanf+0x30>
 800f7aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f7ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f7b2:	e7f5      	b.n	800f7a0 <__kernel_tanf+0x30>
 800f7b4:	494c      	ldr	r1, [pc, #304]	; (800f8e8 <__kernel_tanf+0x178>)
 800f7b6:	428a      	cmp	r2, r1
 800f7b8:	db12      	blt.n	800f7e0 <__kernel_tanf+0x70>
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f8ec <__kernel_tanf+0x17c>
 800f7c0:	bfb8      	it	lt
 800f7c2:	eef1 7a40 	vneglt.f32	s15, s0
 800f7c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7ca:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f8f0 <__kernel_tanf+0x180>
 800f7ce:	bfb8      	it	lt
 800f7d0:	eef1 0a60 	vneglt.f32	s1, s1
 800f7d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f7d8:	eddf 0a46 	vldr	s1, [pc, #280]	; 800f8f4 <__kernel_tanf+0x184>
 800f7dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7e0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f7e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f8f8 <__kernel_tanf+0x188>
 800f7e8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800f8fc <__kernel_tanf+0x18c>
 800f7ec:	ed9f 5a44 	vldr	s10, [pc, #272]	; 800f900 <__kernel_tanf+0x190>
 800f7f0:	493d      	ldr	r1, [pc, #244]	; (800f8e8 <__kernel_tanf+0x178>)
 800f7f2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f7f6:	428a      	cmp	r2, r1
 800f7f8:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f7fc:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f904 <__kernel_tanf+0x194>
 800f800:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f804:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f908 <__kernel_tanf+0x198>
 800f808:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f80c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f90c <__kernel_tanf+0x19c>
 800f810:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f814:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800f910 <__kernel_tanf+0x1a0>
 800f818:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f81c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800f914 <__kernel_tanf+0x1a4>
 800f820:	eee7 5a05 	vfma.f32	s11, s14, s10
 800f824:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f918 <__kernel_tanf+0x1a8>
 800f828:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f82c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800f91c <__kernel_tanf+0x1ac>
 800f830:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f834:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f920 <__kernel_tanf+0x1b0>
 800f838:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f83c:	eddf 5a39 	vldr	s11, [pc, #228]	; 800f924 <__kernel_tanf+0x1b4>
 800f840:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f844:	eeb0 7a46 	vmov.f32	s14, s12
 800f848:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f84c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800f850:	eeb0 6a60 	vmov.f32	s12, s1
 800f854:	eea7 6a05 	vfma.f32	s12, s14, s10
 800f858:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f928 <__kernel_tanf+0x1b8>
 800f85c:	eee6 0a26 	vfma.f32	s1, s12, s13
 800f860:	eee5 0a07 	vfma.f32	s1, s10, s14
 800f864:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f868:	db1d      	blt.n	800f8a6 <__kernel_tanf+0x136>
 800f86a:	ee07 0a10 	vmov	s14, r0
 800f86e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f872:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800f876:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f87a:	179b      	asrs	r3, r3, #30
 800f87c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800f880:	f003 0302 	and.w	r3, r3, #2
 800f884:	f1c3 0301 	rsb	r3, r3, #1
 800f888:	ee76 6a60 	vsub.f32	s13, s12, s1
 800f88c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f890:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f894:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f898:	ee07 3a90 	vmov	s15, r3
 800f89c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8a4:	e77c      	b.n	800f7a0 <__kernel_tanf+0x30>
 800f8a6:	2801      	cmp	r0, #1
 800f8a8:	d01b      	beq.n	800f8e2 <__kernel_tanf+0x172>
 800f8aa:	4b20      	ldr	r3, [pc, #128]	; (800f92c <__kernel_tanf+0x1bc>)
 800f8ac:	ee16 2a90 	vmov	r2, s13
 800f8b0:	401a      	ands	r2, r3
 800f8b2:	ee05 2a90 	vmov	s11, r2
 800f8b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f8ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f8be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f8c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f8c6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800f8ca:	ee16 2a10 	vmov	r2, s12
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	ee07 3a90 	vmov	s15, r3
 800f8d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f8d8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800f8dc:	eee7 7a06 	vfma.f32	s15, s14, s12
 800f8e0:	e75e      	b.n	800f7a0 <__kernel_tanf+0x30>
 800f8e2:	eef0 7a66 	vmov.f32	s15, s13
 800f8e6:	e75b      	b.n	800f7a0 <__kernel_tanf+0x30>
 800f8e8:	3f2ca140 	.word	0x3f2ca140
 800f8ec:	3f490fda 	.word	0x3f490fda
 800f8f0:	33222168 	.word	0x33222168
 800f8f4:	00000000 	.word	0x00000000
 800f8f8:	b79bae5f 	.word	0xb79bae5f
 800f8fc:	38a3f445 	.word	0x38a3f445
 800f900:	37d95384 	.word	0x37d95384
 800f904:	3a1a26c8 	.word	0x3a1a26c8
 800f908:	3b6b6916 	.word	0x3b6b6916
 800f90c:	3cb327a4 	.word	0x3cb327a4
 800f910:	3e088889 	.word	0x3e088889
 800f914:	3895c07a 	.word	0x3895c07a
 800f918:	398137b9 	.word	0x398137b9
 800f91c:	3abede48 	.word	0x3abede48
 800f920:	3c11371f 	.word	0x3c11371f
 800f924:	3d5d0dd1 	.word	0x3d5d0dd1
 800f928:	3eaaaaab 	.word	0x3eaaaaab
 800f92c:	fffff000 	.word	0xfffff000

0800f930 <__ieee754_rem_pio2f>:
 800f930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f932:	ee10 6a10 	vmov	r6, s0
 800f936:	4b86      	ldr	r3, [pc, #536]	; (800fb50 <__ieee754_rem_pio2f+0x220>)
 800f938:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f93c:	429d      	cmp	r5, r3
 800f93e:	b087      	sub	sp, #28
 800f940:	4604      	mov	r4, r0
 800f942:	dc05      	bgt.n	800f950 <__ieee754_rem_pio2f+0x20>
 800f944:	2300      	movs	r3, #0
 800f946:	ed80 0a00 	vstr	s0, [r0]
 800f94a:	6043      	str	r3, [r0, #4]
 800f94c:	2000      	movs	r0, #0
 800f94e:	e020      	b.n	800f992 <__ieee754_rem_pio2f+0x62>
 800f950:	4b80      	ldr	r3, [pc, #512]	; (800fb54 <__ieee754_rem_pio2f+0x224>)
 800f952:	429d      	cmp	r5, r3
 800f954:	dc38      	bgt.n	800f9c8 <__ieee754_rem_pio2f+0x98>
 800f956:	2e00      	cmp	r6, #0
 800f958:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800fb58 <__ieee754_rem_pio2f+0x228>
 800f95c:	4b7f      	ldr	r3, [pc, #508]	; (800fb5c <__ieee754_rem_pio2f+0x22c>)
 800f95e:	f025 050f 	bic.w	r5, r5, #15
 800f962:	dd18      	ble.n	800f996 <__ieee754_rem_pio2f+0x66>
 800f964:	429d      	cmp	r5, r3
 800f966:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f96a:	bf09      	itett	eq
 800f96c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800fb60 <__ieee754_rem_pio2f+0x230>
 800f970:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800fb64 <__ieee754_rem_pio2f+0x234>
 800f974:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f978:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800fb68 <__ieee754_rem_pio2f+0x238>
 800f97c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f980:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f984:	edc0 6a00 	vstr	s13, [r0]
 800f988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f98c:	edc0 7a01 	vstr	s15, [r0, #4]
 800f990:	2001      	movs	r0, #1
 800f992:	b007      	add	sp, #28
 800f994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f996:	429d      	cmp	r5, r3
 800f998:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f99c:	bf09      	itett	eq
 800f99e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800fb60 <__ieee754_rem_pio2f+0x230>
 800f9a2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800fb64 <__ieee754_rem_pio2f+0x234>
 800f9a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f9aa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800fb68 <__ieee754_rem_pio2f+0x238>
 800f9ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f9b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f9b6:	edc0 6a00 	vstr	s13, [r0]
 800f9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9be:	edc0 7a01 	vstr	s15, [r0, #4]
 800f9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c6:	e7e4      	b.n	800f992 <__ieee754_rem_pio2f+0x62>
 800f9c8:	4b68      	ldr	r3, [pc, #416]	; (800fb6c <__ieee754_rem_pio2f+0x23c>)
 800f9ca:	429d      	cmp	r5, r3
 800f9cc:	dc71      	bgt.n	800fab2 <__ieee754_rem_pio2f+0x182>
 800f9ce:	f7ff fe97 	bl	800f700 <fabsf>
 800f9d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fb70 <__ieee754_rem_pio2f+0x240>
 800f9d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f9da:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f9de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f9e6:	ee17 0a90 	vmov	r0, s15
 800f9ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb58 <__ieee754_rem_pio2f+0x228>
 800f9ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f9f2:	281f      	cmp	r0, #31
 800f9f4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb64 <__ieee754_rem_pio2f+0x234>
 800f9f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9fc:	eeb1 6a47 	vneg.f32	s12, s14
 800fa00:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fa04:	ee16 2a90 	vmov	r2, s13
 800fa08:	dc1c      	bgt.n	800fa44 <__ieee754_rem_pio2f+0x114>
 800fa0a:	495a      	ldr	r1, [pc, #360]	; (800fb74 <__ieee754_rem_pio2f+0x244>)
 800fa0c:	1e47      	subs	r7, r0, #1
 800fa0e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800fa12:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800fa16:	428b      	cmp	r3, r1
 800fa18:	d014      	beq.n	800fa44 <__ieee754_rem_pio2f+0x114>
 800fa1a:	6022      	str	r2, [r4, #0]
 800fa1c:	ed94 7a00 	vldr	s14, [r4]
 800fa20:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fa24:	2e00      	cmp	r6, #0
 800fa26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa2a:	ed84 0a01 	vstr	s0, [r4, #4]
 800fa2e:	dab0      	bge.n	800f992 <__ieee754_rem_pio2f+0x62>
 800fa30:	eeb1 7a47 	vneg.f32	s14, s14
 800fa34:	eeb1 0a40 	vneg.f32	s0, s0
 800fa38:	ed84 7a00 	vstr	s14, [r4]
 800fa3c:	ed84 0a01 	vstr	s0, [r4, #4]
 800fa40:	4240      	negs	r0, r0
 800fa42:	e7a6      	b.n	800f992 <__ieee754_rem_pio2f+0x62>
 800fa44:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fa48:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800fa4c:	2908      	cmp	r1, #8
 800fa4e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800fa52:	dde2      	ble.n	800fa1a <__ieee754_rem_pio2f+0xea>
 800fa54:	eddf 5a42 	vldr	s11, [pc, #264]	; 800fb60 <__ieee754_rem_pio2f+0x230>
 800fa58:	eef0 6a40 	vmov.f32	s13, s0
 800fa5c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fa60:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fa64:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa68:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800fb68 <__ieee754_rem_pio2f+0x238>
 800fa6c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fa70:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fa74:	ee15 2a90 	vmov	r2, s11
 800fa78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fa7c:	1a5b      	subs	r3, r3, r1
 800fa7e:	2b19      	cmp	r3, #25
 800fa80:	dc04      	bgt.n	800fa8c <__ieee754_rem_pio2f+0x15c>
 800fa82:	edc4 5a00 	vstr	s11, [r4]
 800fa86:	eeb0 0a66 	vmov.f32	s0, s13
 800fa8a:	e7c7      	b.n	800fa1c <__ieee754_rem_pio2f+0xec>
 800fa8c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800fb78 <__ieee754_rem_pio2f+0x248>
 800fa90:	eeb0 0a66 	vmov.f32	s0, s13
 800fa94:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fa98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fa9c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800fb7c <__ieee754_rem_pio2f+0x24c>
 800faa0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800faa4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800faa8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800faac:	ed84 7a00 	vstr	s14, [r4]
 800fab0:	e7b4      	b.n	800fa1c <__ieee754_rem_pio2f+0xec>
 800fab2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fab6:	db06      	blt.n	800fac6 <__ieee754_rem_pio2f+0x196>
 800fab8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fabc:	edc0 7a01 	vstr	s15, [r0, #4]
 800fac0:	edc0 7a00 	vstr	s15, [r0]
 800fac4:	e742      	b.n	800f94c <__ieee754_rem_pio2f+0x1c>
 800fac6:	15ea      	asrs	r2, r5, #23
 800fac8:	3a86      	subs	r2, #134	; 0x86
 800faca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800face:	ee07 3a90 	vmov	s15, r3
 800fad2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fad6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800fb80 <__ieee754_rem_pio2f+0x250>
 800fada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fae2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800faea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800faee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faf6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fafa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fafe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb06:	edcd 7a05 	vstr	s15, [sp, #20]
 800fb0a:	d11e      	bne.n	800fb4a <__ieee754_rem_pio2f+0x21a>
 800fb0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb14:	bf14      	ite	ne
 800fb16:	2302      	movne	r3, #2
 800fb18:	2301      	moveq	r3, #1
 800fb1a:	491a      	ldr	r1, [pc, #104]	; (800fb84 <__ieee754_rem_pio2f+0x254>)
 800fb1c:	9101      	str	r1, [sp, #4]
 800fb1e:	2102      	movs	r1, #2
 800fb20:	9100      	str	r1, [sp, #0]
 800fb22:	a803      	add	r0, sp, #12
 800fb24:	4621      	mov	r1, r4
 800fb26:	f000 f82f 	bl	800fb88 <__kernel_rem_pio2f>
 800fb2a:	2e00      	cmp	r6, #0
 800fb2c:	f6bf af31 	bge.w	800f992 <__ieee754_rem_pio2f+0x62>
 800fb30:	edd4 7a00 	vldr	s15, [r4]
 800fb34:	eef1 7a67 	vneg.f32	s15, s15
 800fb38:	edc4 7a00 	vstr	s15, [r4]
 800fb3c:	edd4 7a01 	vldr	s15, [r4, #4]
 800fb40:	eef1 7a67 	vneg.f32	s15, s15
 800fb44:	edc4 7a01 	vstr	s15, [r4, #4]
 800fb48:	e77a      	b.n	800fa40 <__ieee754_rem_pio2f+0x110>
 800fb4a:	2303      	movs	r3, #3
 800fb4c:	e7e5      	b.n	800fb1a <__ieee754_rem_pio2f+0x1ea>
 800fb4e:	bf00      	nop
 800fb50:	3f490fd8 	.word	0x3f490fd8
 800fb54:	4016cbe3 	.word	0x4016cbe3
 800fb58:	3fc90f80 	.word	0x3fc90f80
 800fb5c:	3fc90fd0 	.word	0x3fc90fd0
 800fb60:	37354400 	.word	0x37354400
 800fb64:	37354443 	.word	0x37354443
 800fb68:	2e85a308 	.word	0x2e85a308
 800fb6c:	43490f80 	.word	0x43490f80
 800fb70:	3f22f984 	.word	0x3f22f984
 800fb74:	0801096c 	.word	0x0801096c
 800fb78:	2e85a300 	.word	0x2e85a300
 800fb7c:	248d3132 	.word	0x248d3132
 800fb80:	43800000 	.word	0x43800000
 800fb84:	080109ec 	.word	0x080109ec

0800fb88 <__kernel_rem_pio2f>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	ed2d 8b04 	vpush	{d8-d9}
 800fb90:	b0d9      	sub	sp, #356	; 0x164
 800fb92:	4688      	mov	r8, r1
 800fb94:	9002      	str	r0, [sp, #8]
 800fb96:	49b8      	ldr	r1, [pc, #736]	; (800fe78 <__kernel_rem_pio2f+0x2f0>)
 800fb98:	9866      	ldr	r0, [sp, #408]	; 0x198
 800fb9a:	9301      	str	r3, [sp, #4]
 800fb9c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800fba0:	9901      	ldr	r1, [sp, #4]
 800fba2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800fba4:	f101 3bff 	add.w	fp, r1, #4294967295
 800fba8:	1d11      	adds	r1, r2, #4
 800fbaa:	db25      	blt.n	800fbf8 <__kernel_rem_pio2f+0x70>
 800fbac:	1ed0      	subs	r0, r2, #3
 800fbae:	bf48      	it	mi
 800fbb0:	1d10      	addmi	r0, r2, #4
 800fbb2:	10c0      	asrs	r0, r0, #3
 800fbb4:	1c45      	adds	r5, r0, #1
 800fbb6:	00e9      	lsls	r1, r5, #3
 800fbb8:	eba0 070b 	sub.w	r7, r0, fp
 800fbbc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800fbc0:	9103      	str	r1, [sp, #12]
 800fbc2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800fbc6:	eb0a 0c0b 	add.w	ip, sl, fp
 800fbca:	ae1c      	add	r6, sp, #112	; 0x70
 800fbcc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800fbd0:	2400      	movs	r4, #0
 800fbd2:	4564      	cmp	r4, ip
 800fbd4:	dd12      	ble.n	800fbfc <__kernel_rem_pio2f+0x74>
 800fbd6:	9901      	ldr	r1, [sp, #4]
 800fbd8:	ac1c      	add	r4, sp, #112	; 0x70
 800fbda:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800fbde:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800fbe2:	f04f 0c00 	mov.w	ip, #0
 800fbe6:	45d4      	cmp	ip, sl
 800fbe8:	dc27      	bgt.n	800fc3a <__kernel_rem_pio2f+0xb2>
 800fbea:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fbee:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800fbf2:	4627      	mov	r7, r4
 800fbf4:	2600      	movs	r6, #0
 800fbf6:	e016      	b.n	800fc26 <__kernel_rem_pio2f+0x9e>
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	e7db      	b.n	800fbb4 <__kernel_rem_pio2f+0x2c>
 800fbfc:	42e7      	cmn	r7, r4
 800fbfe:	bf5d      	ittte	pl
 800fc00:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800fc04:	ee07 1a90 	vmovpl	s15, r1
 800fc08:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fc0c:	eef0 7a47 	vmovmi.f32	s15, s14
 800fc10:	ece6 7a01 	vstmia	r6!, {s15}
 800fc14:	3401      	adds	r4, #1
 800fc16:	e7dc      	b.n	800fbd2 <__kernel_rem_pio2f+0x4a>
 800fc18:	ecfe 6a01 	vldmia	lr!, {s13}
 800fc1c:	ed97 7a00 	vldr	s14, [r7]
 800fc20:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc24:	3601      	adds	r6, #1
 800fc26:	455e      	cmp	r6, fp
 800fc28:	f1a7 0704 	sub.w	r7, r7, #4
 800fc2c:	ddf4      	ble.n	800fc18 <__kernel_rem_pio2f+0x90>
 800fc2e:	ece9 7a01 	vstmia	r9!, {s15}
 800fc32:	f10c 0c01 	add.w	ip, ip, #1
 800fc36:	3404      	adds	r4, #4
 800fc38:	e7d5      	b.n	800fbe6 <__kernel_rem_pio2f+0x5e>
 800fc3a:	a908      	add	r1, sp, #32
 800fc3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fc44:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800fe84 <__kernel_rem_pio2f+0x2fc>
 800fc48:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800fe80 <__kernel_rem_pio2f+0x2f8>
 800fc4c:	9105      	str	r1, [sp, #20]
 800fc4e:	9304      	str	r3, [sp, #16]
 800fc50:	4656      	mov	r6, sl
 800fc52:	00b3      	lsls	r3, r6, #2
 800fc54:	9306      	str	r3, [sp, #24]
 800fc56:	ab58      	add	r3, sp, #352	; 0x160
 800fc58:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fc5c:	ac08      	add	r4, sp, #32
 800fc5e:	ab44      	add	r3, sp, #272	; 0x110
 800fc60:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800fc64:	46a4      	mov	ip, r4
 800fc66:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fc6a:	4637      	mov	r7, r6
 800fc6c:	2f00      	cmp	r7, #0
 800fc6e:	f1a0 0004 	sub.w	r0, r0, #4
 800fc72:	dc4a      	bgt.n	800fd0a <__kernel_rem_pio2f+0x182>
 800fc74:	4628      	mov	r0, r5
 800fc76:	9207      	str	r2, [sp, #28]
 800fc78:	f000 f9f8 	bl	801006c <scalbnf>
 800fc7c:	eeb0 8a40 	vmov.f32	s16, s0
 800fc80:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fc84:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fc88:	f000 fa56 	bl	8010138 <floorf>
 800fc8c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fc90:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fc94:	2d00      	cmp	r5, #0
 800fc96:	9a07      	ldr	r2, [sp, #28]
 800fc98:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fc9c:	ee17 9a90 	vmov	r9, s15
 800fca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fca4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fca8:	dd41      	ble.n	800fd2e <__kernel_rem_pio2f+0x1a6>
 800fcaa:	f106 3cff 	add.w	ip, r6, #4294967295
 800fcae:	ab08      	add	r3, sp, #32
 800fcb0:	f1c5 0e08 	rsb	lr, r5, #8
 800fcb4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fcb8:	fa47 f00e 	asr.w	r0, r7, lr
 800fcbc:	4481      	add	r9, r0
 800fcbe:	fa00 f00e 	lsl.w	r0, r0, lr
 800fcc2:	1a3f      	subs	r7, r7, r0
 800fcc4:	f1c5 0007 	rsb	r0, r5, #7
 800fcc8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800fccc:	4107      	asrs	r7, r0
 800fcce:	2f00      	cmp	r7, #0
 800fcd0:	dd3c      	ble.n	800fd4c <__kernel_rem_pio2f+0x1c4>
 800fcd2:	f04f 0e00 	mov.w	lr, #0
 800fcd6:	f109 0901 	add.w	r9, r9, #1
 800fcda:	4671      	mov	r1, lr
 800fcdc:	4576      	cmp	r6, lr
 800fcde:	dc67      	bgt.n	800fdb0 <__kernel_rem_pio2f+0x228>
 800fce0:	2d00      	cmp	r5, #0
 800fce2:	dd03      	ble.n	800fcec <__kernel_rem_pio2f+0x164>
 800fce4:	2d01      	cmp	r5, #1
 800fce6:	d074      	beq.n	800fdd2 <__kernel_rem_pio2f+0x24a>
 800fce8:	2d02      	cmp	r5, #2
 800fcea:	d07b      	beq.n	800fde4 <__kernel_rem_pio2f+0x25c>
 800fcec:	2f02      	cmp	r7, #2
 800fcee:	d12d      	bne.n	800fd4c <__kernel_rem_pio2f+0x1c4>
 800fcf0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fcf4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fcf8:	b341      	cbz	r1, 800fd4c <__kernel_rem_pio2f+0x1c4>
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	9207      	str	r2, [sp, #28]
 800fcfe:	f000 f9b5 	bl	801006c <scalbnf>
 800fd02:	9a07      	ldr	r2, [sp, #28]
 800fd04:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fd08:	e020      	b.n	800fd4c <__kernel_rem_pio2f+0x1c4>
 800fd0a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fd0e:	3f01      	subs	r7, #1
 800fd10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd18:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fd1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd20:	ecac 0a01 	vstmia	ip!, {s0}
 800fd24:	ed90 0a00 	vldr	s0, [r0]
 800fd28:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fd2c:	e79e      	b.n	800fc6c <__kernel_rem_pio2f+0xe4>
 800fd2e:	d105      	bne.n	800fd3c <__kernel_rem_pio2f+0x1b4>
 800fd30:	1e70      	subs	r0, r6, #1
 800fd32:	ab08      	add	r3, sp, #32
 800fd34:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800fd38:	11ff      	asrs	r7, r7, #7
 800fd3a:	e7c8      	b.n	800fcce <__kernel_rem_pio2f+0x146>
 800fd3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fd40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd48:	da30      	bge.n	800fdac <__kernel_rem_pio2f+0x224>
 800fd4a:	2700      	movs	r7, #0
 800fd4c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd54:	f040 809a 	bne.w	800fe8c <__kernel_rem_pio2f+0x304>
 800fd58:	1e74      	subs	r4, r6, #1
 800fd5a:	46a4      	mov	ip, r4
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	45d4      	cmp	ip, sl
 800fd60:	da47      	bge.n	800fdf2 <__kernel_rem_pio2f+0x26a>
 800fd62:	2900      	cmp	r1, #0
 800fd64:	d063      	beq.n	800fe2e <__kernel_rem_pio2f+0x2a6>
 800fd66:	ab08      	add	r3, sp, #32
 800fd68:	3d08      	subs	r5, #8
 800fd6a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d07f      	beq.n	800fe72 <__kernel_rem_pio2f+0x2ea>
 800fd72:	4628      	mov	r0, r5
 800fd74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fd78:	f000 f978 	bl	801006c <scalbnf>
 800fd7c:	1c63      	adds	r3, r4, #1
 800fd7e:	aa44      	add	r2, sp, #272	; 0x110
 800fd80:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800fe84 <__kernel_rem_pio2f+0x2fc>
 800fd84:	0099      	lsls	r1, r3, #2
 800fd86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fd8a:	4623      	mov	r3, r4
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f280 80ad 	bge.w	800feec <__kernel_rem_pio2f+0x364>
 800fd92:	4623      	mov	r3, r4
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f2c0 80cb 	blt.w	800ff30 <__kernel_rem_pio2f+0x3a8>
 800fd9a:	aa44      	add	r2, sp, #272	; 0x110
 800fd9c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fda0:	4e36      	ldr	r6, [pc, #216]	; (800fe7c <__kernel_rem_pio2f+0x2f4>)
 800fda2:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800fda6:	2000      	movs	r0, #0
 800fda8:	1ae2      	subs	r2, r4, r3
 800fdaa:	e0b6      	b.n	800ff1a <__kernel_rem_pio2f+0x392>
 800fdac:	2702      	movs	r7, #2
 800fdae:	e790      	b.n	800fcd2 <__kernel_rem_pio2f+0x14a>
 800fdb0:	6820      	ldr	r0, [r4, #0]
 800fdb2:	b949      	cbnz	r1, 800fdc8 <__kernel_rem_pio2f+0x240>
 800fdb4:	b118      	cbz	r0, 800fdbe <__kernel_rem_pio2f+0x236>
 800fdb6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	2001      	movs	r0, #1
 800fdbe:	f10e 0e01 	add.w	lr, lr, #1
 800fdc2:	3404      	adds	r4, #4
 800fdc4:	4601      	mov	r1, r0
 800fdc6:	e789      	b.n	800fcdc <__kernel_rem_pio2f+0x154>
 800fdc8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800fdcc:	6020      	str	r0, [r4, #0]
 800fdce:	4608      	mov	r0, r1
 800fdd0:	e7f5      	b.n	800fdbe <__kernel_rem_pio2f+0x236>
 800fdd2:	1e74      	subs	r4, r6, #1
 800fdd4:	ab08      	add	r3, sp, #32
 800fdd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fdda:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800fdde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fde2:	e783      	b.n	800fcec <__kernel_rem_pio2f+0x164>
 800fde4:	1e74      	subs	r4, r6, #1
 800fde6:	ab08      	add	r3, sp, #32
 800fde8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fdec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fdf0:	e7f5      	b.n	800fdde <__kernel_rem_pio2f+0x256>
 800fdf2:	ab08      	add	r3, sp, #32
 800fdf4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800fdf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fdfc:	4301      	orrs	r1, r0
 800fdfe:	e7ae      	b.n	800fd5e <__kernel_rem_pio2f+0x1d6>
 800fe00:	3001      	adds	r0, #1
 800fe02:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800fe06:	2f00      	cmp	r7, #0
 800fe08:	d0fa      	beq.n	800fe00 <__kernel_rem_pio2f+0x278>
 800fe0a:	9b06      	ldr	r3, [sp, #24]
 800fe0c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fe10:	eb0d 0403 	add.w	r4, sp, r3
 800fe14:	9b01      	ldr	r3, [sp, #4]
 800fe16:	18f7      	adds	r7, r6, r3
 800fe18:	ab1c      	add	r3, sp, #112	; 0x70
 800fe1a:	f106 0c01 	add.w	ip, r6, #1
 800fe1e:	3c4c      	subs	r4, #76	; 0x4c
 800fe20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe24:	4430      	add	r0, r6
 800fe26:	4560      	cmp	r0, ip
 800fe28:	da04      	bge.n	800fe34 <__kernel_rem_pio2f+0x2ac>
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	e711      	b.n	800fc52 <__kernel_rem_pio2f+0xca>
 800fe2e:	9c05      	ldr	r4, [sp, #20]
 800fe30:	2001      	movs	r0, #1
 800fe32:	e7e6      	b.n	800fe02 <__kernel_rem_pio2f+0x27a>
 800fe34:	9b04      	ldr	r3, [sp, #16]
 800fe36:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fe3a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800fe3e:	9306      	str	r3, [sp, #24]
 800fe40:	ee07 3a90 	vmov	s15, r3
 800fe44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe48:	2600      	movs	r6, #0
 800fe4a:	ece7 7a01 	vstmia	r7!, {s15}
 800fe4e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800fe52:	46b9      	mov	r9, r7
 800fe54:	455e      	cmp	r6, fp
 800fe56:	dd04      	ble.n	800fe62 <__kernel_rem_pio2f+0x2da>
 800fe58:	ece4 7a01 	vstmia	r4!, {s15}
 800fe5c:	f10c 0c01 	add.w	ip, ip, #1
 800fe60:	e7e1      	b.n	800fe26 <__kernel_rem_pio2f+0x29e>
 800fe62:	ecfe 6a01 	vldmia	lr!, {s13}
 800fe66:	ed39 7a01 	vldmdb	r9!, {s14}
 800fe6a:	3601      	adds	r6, #1
 800fe6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe70:	e7f0      	b.n	800fe54 <__kernel_rem_pio2f+0x2cc>
 800fe72:	3c01      	subs	r4, #1
 800fe74:	e777      	b.n	800fd66 <__kernel_rem_pio2f+0x1de>
 800fe76:	bf00      	nop
 800fe78:	08010d30 	.word	0x08010d30
 800fe7c:	08010d04 	.word	0x08010d04
 800fe80:	43800000 	.word	0x43800000
 800fe84:	3b800000 	.word	0x3b800000
 800fe88:	00000000 	.word	0x00000000
 800fe8c:	9b03      	ldr	r3, [sp, #12]
 800fe8e:	eeb0 0a48 	vmov.f32	s0, s16
 800fe92:	1a98      	subs	r0, r3, r2
 800fe94:	f000 f8ea 	bl	801006c <scalbnf>
 800fe98:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800fe80 <__kernel_rem_pio2f+0x2f8>
 800fe9c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea4:	db19      	blt.n	800feda <__kernel_rem_pio2f+0x352>
 800fea6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800fe84 <__kernel_rem_pio2f+0x2fc>
 800feaa:	ee60 7a27 	vmul.f32	s15, s0, s15
 800feae:	aa08      	add	r2, sp, #32
 800feb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800feb4:	1c74      	adds	r4, r6, #1
 800feb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feba:	3508      	adds	r5, #8
 800febc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fec4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fec8:	ee10 3a10 	vmov	r3, s0
 800fecc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fed0:	ee17 3a90 	vmov	r3, s15
 800fed4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fed8:	e74b      	b.n	800fd72 <__kernel_rem_pio2f+0x1ea>
 800feda:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fede:	aa08      	add	r2, sp, #32
 800fee0:	ee10 3a10 	vmov	r3, s0
 800fee4:	4634      	mov	r4, r6
 800fee6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800feea:	e742      	b.n	800fd72 <__kernel_rem_pio2f+0x1ea>
 800feec:	a808      	add	r0, sp, #32
 800feee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fef2:	9001      	str	r0, [sp, #4]
 800fef4:	ee07 0a90 	vmov	s15, r0
 800fef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fefc:	3b01      	subs	r3, #1
 800fefe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ff02:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ff06:	ed62 7a01 	vstmdb	r2!, {s15}
 800ff0a:	e73f      	b.n	800fd8c <__kernel_rem_pio2f+0x204>
 800ff0c:	ecf6 6a01 	vldmia	r6!, {s13}
 800ff10:	ecb5 7a01 	vldmia	r5!, {s14}
 800ff14:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff18:	3001      	adds	r0, #1
 800ff1a:	4550      	cmp	r0, sl
 800ff1c:	dc01      	bgt.n	800ff22 <__kernel_rem_pio2f+0x39a>
 800ff1e:	4290      	cmp	r0, r2
 800ff20:	ddf4      	ble.n	800ff0c <__kernel_rem_pio2f+0x384>
 800ff22:	a858      	add	r0, sp, #352	; 0x160
 800ff24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ff28:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	e731      	b.n	800fd94 <__kernel_rem_pio2f+0x20c>
 800ff30:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	dc09      	bgt.n	800ff4a <__kernel_rem_pio2f+0x3c2>
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	dc2b      	bgt.n	800ff92 <__kernel_rem_pio2f+0x40a>
 800ff3a:	d044      	beq.n	800ffc6 <__kernel_rem_pio2f+0x43e>
 800ff3c:	f009 0007 	and.w	r0, r9, #7
 800ff40:	b059      	add	sp, #356	; 0x164
 800ff42:	ecbd 8b04 	vpop	{d8-d9}
 800ff46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ff4c:	2b03      	cmp	r3, #3
 800ff4e:	d1f5      	bne.n	800ff3c <__kernel_rem_pio2f+0x3b4>
 800ff50:	aa30      	add	r2, sp, #192	; 0xc0
 800ff52:	1f0b      	subs	r3, r1, #4
 800ff54:	4413      	add	r3, r2
 800ff56:	461a      	mov	r2, r3
 800ff58:	4620      	mov	r0, r4
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	f1a2 0204 	sub.w	r2, r2, #4
 800ff60:	dc52      	bgt.n	8010008 <__kernel_rem_pio2f+0x480>
 800ff62:	4622      	mov	r2, r4
 800ff64:	2a01      	cmp	r2, #1
 800ff66:	f1a3 0304 	sub.w	r3, r3, #4
 800ff6a:	dc5d      	bgt.n	8010028 <__kernel_rem_pio2f+0x4a0>
 800ff6c:	ab30      	add	r3, sp, #192	; 0xc0
 800ff6e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800ff72:	440b      	add	r3, r1
 800ff74:	2c01      	cmp	r4, #1
 800ff76:	dc67      	bgt.n	8010048 <__kernel_rem_pio2f+0x4c0>
 800ff78:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ff7c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ff80:	2f00      	cmp	r7, #0
 800ff82:	d167      	bne.n	8010054 <__kernel_rem_pio2f+0x4cc>
 800ff84:	edc8 6a00 	vstr	s13, [r8]
 800ff88:	ed88 7a01 	vstr	s14, [r8, #4]
 800ff8c:	edc8 7a02 	vstr	s15, [r8, #8]
 800ff90:	e7d4      	b.n	800ff3c <__kernel_rem_pio2f+0x3b4>
 800ff92:	ab30      	add	r3, sp, #192	; 0xc0
 800ff94:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800ff98:	440b      	add	r3, r1
 800ff9a:	4622      	mov	r2, r4
 800ff9c:	2a00      	cmp	r2, #0
 800ff9e:	da24      	bge.n	800ffea <__kernel_rem_pio2f+0x462>
 800ffa0:	b34f      	cbz	r7, 800fff6 <__kernel_rem_pio2f+0x46e>
 800ffa2:	eef1 7a47 	vneg.f32	s15, s14
 800ffa6:	edc8 7a00 	vstr	s15, [r8]
 800ffaa:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ffae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffb2:	aa31      	add	r2, sp, #196	; 0xc4
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	429c      	cmp	r4, r3
 800ffb8:	da20      	bge.n	800fffc <__kernel_rem_pio2f+0x474>
 800ffba:	b10f      	cbz	r7, 800ffc0 <__kernel_rem_pio2f+0x438>
 800ffbc:	eef1 7a67 	vneg.f32	s15, s15
 800ffc0:	edc8 7a01 	vstr	s15, [r8, #4]
 800ffc4:	e7ba      	b.n	800ff3c <__kernel_rem_pio2f+0x3b4>
 800ffc6:	ab30      	add	r3, sp, #192	; 0xc0
 800ffc8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800fe88 <__kernel_rem_pio2f+0x300>
 800ffcc:	440b      	add	r3, r1
 800ffce:	2c00      	cmp	r4, #0
 800ffd0:	da05      	bge.n	800ffde <__kernel_rem_pio2f+0x456>
 800ffd2:	b10f      	cbz	r7, 800ffd8 <__kernel_rem_pio2f+0x450>
 800ffd4:	eef1 7a67 	vneg.f32	s15, s15
 800ffd8:	edc8 7a00 	vstr	s15, [r8]
 800ffdc:	e7ae      	b.n	800ff3c <__kernel_rem_pio2f+0x3b4>
 800ffde:	ed33 7a01 	vldmdb	r3!, {s14}
 800ffe2:	3c01      	subs	r4, #1
 800ffe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffe8:	e7f1      	b.n	800ffce <__kernel_rem_pio2f+0x446>
 800ffea:	ed73 7a01 	vldmdb	r3!, {s15}
 800ffee:	3a01      	subs	r2, #1
 800fff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fff4:	e7d2      	b.n	800ff9c <__kernel_rem_pio2f+0x414>
 800fff6:	eef0 7a47 	vmov.f32	s15, s14
 800fffa:	e7d4      	b.n	800ffa6 <__kernel_rem_pio2f+0x41e>
 800fffc:	ecb2 7a01 	vldmia	r2!, {s14}
 8010000:	3301      	adds	r3, #1
 8010002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010006:	e7d6      	b.n	800ffb6 <__kernel_rem_pio2f+0x42e>
 8010008:	edd2 7a00 	vldr	s15, [r2]
 801000c:	edd2 6a01 	vldr	s13, [r2, #4]
 8010010:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010014:	3801      	subs	r0, #1
 8010016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801001a:	ed82 7a00 	vstr	s14, [r2]
 801001e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010022:	edc2 7a01 	vstr	s15, [r2, #4]
 8010026:	e798      	b.n	800ff5a <__kernel_rem_pio2f+0x3d2>
 8010028:	edd3 7a00 	vldr	s15, [r3]
 801002c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010030:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010034:	3a01      	subs	r2, #1
 8010036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801003a:	ed83 7a00 	vstr	s14, [r3]
 801003e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010042:	edc3 7a01 	vstr	s15, [r3, #4]
 8010046:	e78d      	b.n	800ff64 <__kernel_rem_pio2f+0x3dc>
 8010048:	ed33 7a01 	vldmdb	r3!, {s14}
 801004c:	3c01      	subs	r4, #1
 801004e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010052:	e78f      	b.n	800ff74 <__kernel_rem_pio2f+0x3ec>
 8010054:	eef1 6a66 	vneg.f32	s13, s13
 8010058:	eeb1 7a47 	vneg.f32	s14, s14
 801005c:	edc8 6a00 	vstr	s13, [r8]
 8010060:	ed88 7a01 	vstr	s14, [r8, #4]
 8010064:	eef1 7a67 	vneg.f32	s15, s15
 8010068:	e790      	b.n	800ff8c <__kernel_rem_pio2f+0x404>
 801006a:	bf00      	nop

0801006c <scalbnf>:
 801006c:	ee10 3a10 	vmov	r3, s0
 8010070:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010074:	d02b      	beq.n	80100ce <scalbnf+0x62>
 8010076:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801007a:	d302      	bcc.n	8010082 <scalbnf+0x16>
 801007c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010080:	4770      	bx	lr
 8010082:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010086:	d123      	bne.n	80100d0 <scalbnf+0x64>
 8010088:	4b24      	ldr	r3, [pc, #144]	; (801011c <scalbnf+0xb0>)
 801008a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010120 <scalbnf+0xb4>
 801008e:	4298      	cmp	r0, r3
 8010090:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010094:	db17      	blt.n	80100c6 <scalbnf+0x5a>
 8010096:	ee10 3a10 	vmov	r3, s0
 801009a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801009e:	3a19      	subs	r2, #25
 80100a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80100a4:	4288      	cmp	r0, r1
 80100a6:	dd15      	ble.n	80100d4 <scalbnf+0x68>
 80100a8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010124 <scalbnf+0xb8>
 80100ac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8010128 <scalbnf+0xbc>
 80100b0:	ee10 3a10 	vmov	r3, s0
 80100b4:	eeb0 7a67 	vmov.f32	s14, s15
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	bfb8      	it	lt
 80100bc:	eef0 7a66 	vmovlt.f32	s15, s13
 80100c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80100c4:	4770      	bx	lr
 80100c6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801012c <scalbnf+0xc0>
 80100ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80100ce:	4770      	bx	lr
 80100d0:	0dd2      	lsrs	r2, r2, #23
 80100d2:	e7e5      	b.n	80100a0 <scalbnf+0x34>
 80100d4:	4410      	add	r0, r2
 80100d6:	28fe      	cmp	r0, #254	; 0xfe
 80100d8:	dce6      	bgt.n	80100a8 <scalbnf+0x3c>
 80100da:	2800      	cmp	r0, #0
 80100dc:	dd06      	ble.n	80100ec <scalbnf+0x80>
 80100de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80100e6:	ee00 3a10 	vmov	s0, r3
 80100ea:	4770      	bx	lr
 80100ec:	f110 0f16 	cmn.w	r0, #22
 80100f0:	da09      	bge.n	8010106 <scalbnf+0x9a>
 80100f2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801012c <scalbnf+0xc0>
 80100f6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8010130 <scalbnf+0xc4>
 80100fa:	ee10 3a10 	vmov	r3, s0
 80100fe:	eeb0 7a67 	vmov.f32	s14, s15
 8010102:	2b00      	cmp	r3, #0
 8010104:	e7d9      	b.n	80100ba <scalbnf+0x4e>
 8010106:	3019      	adds	r0, #25
 8010108:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801010c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010110:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010134 <scalbnf+0xc8>
 8010114:	ee07 3a90 	vmov	s15, r3
 8010118:	e7d7      	b.n	80100ca <scalbnf+0x5e>
 801011a:	bf00      	nop
 801011c:	ffff3cb0 	.word	0xffff3cb0
 8010120:	4c000000 	.word	0x4c000000
 8010124:	7149f2ca 	.word	0x7149f2ca
 8010128:	f149f2ca 	.word	0xf149f2ca
 801012c:	0da24260 	.word	0x0da24260
 8010130:	8da24260 	.word	0x8da24260
 8010134:	33000000 	.word	0x33000000

08010138 <floorf>:
 8010138:	ee10 3a10 	vmov	r3, s0
 801013c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010140:	3a7f      	subs	r2, #127	; 0x7f
 8010142:	2a16      	cmp	r2, #22
 8010144:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010148:	dc2a      	bgt.n	80101a0 <floorf+0x68>
 801014a:	2a00      	cmp	r2, #0
 801014c:	da11      	bge.n	8010172 <floorf+0x3a>
 801014e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80101b0 <floorf+0x78>
 8010152:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010156:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801015a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015e:	dd05      	ble.n	801016c <floorf+0x34>
 8010160:	2b00      	cmp	r3, #0
 8010162:	da23      	bge.n	80101ac <floorf+0x74>
 8010164:	4a13      	ldr	r2, [pc, #76]	; (80101b4 <floorf+0x7c>)
 8010166:	2900      	cmp	r1, #0
 8010168:	bf18      	it	ne
 801016a:	4613      	movne	r3, r2
 801016c:	ee00 3a10 	vmov	s0, r3
 8010170:	4770      	bx	lr
 8010172:	4911      	ldr	r1, [pc, #68]	; (80101b8 <floorf+0x80>)
 8010174:	4111      	asrs	r1, r2
 8010176:	420b      	tst	r3, r1
 8010178:	d0fa      	beq.n	8010170 <floorf+0x38>
 801017a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80101b0 <floorf+0x78>
 801017e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010182:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018a:	ddef      	ble.n	801016c <floorf+0x34>
 801018c:	2b00      	cmp	r3, #0
 801018e:	bfbe      	ittt	lt
 8010190:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010194:	fa40 f202 	asrlt.w	r2, r0, r2
 8010198:	189b      	addlt	r3, r3, r2
 801019a:	ea23 0301 	bic.w	r3, r3, r1
 801019e:	e7e5      	b.n	801016c <floorf+0x34>
 80101a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80101a4:	d3e4      	bcc.n	8010170 <floorf+0x38>
 80101a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80101aa:	4770      	bx	lr
 80101ac:	2300      	movs	r3, #0
 80101ae:	e7dd      	b.n	801016c <floorf+0x34>
 80101b0:	7149f2ca 	.word	0x7149f2ca
 80101b4:	bf800000 	.word	0xbf800000
 80101b8:	007fffff 	.word	0x007fffff

080101bc <_init>:
 80101bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101be:	bf00      	nop
 80101c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101c2:	bc08      	pop	{r3}
 80101c4:	469e      	mov	lr, r3
 80101c6:	4770      	bx	lr

080101c8 <_fini>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	bf00      	nop
 80101cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ce:	bc08      	pop	{r3}
 80101d0:	469e      	mov	lr, r3
 80101d2:	4770      	bx	lr
